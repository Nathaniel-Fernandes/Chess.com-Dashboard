[{"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js":"1","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js":"2","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js":"3","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js":"4","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js":"5","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js":"6","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js":"7","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js":"8","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js":"9","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js":"10","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js":"11","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js":"12","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js":"13","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js":"14","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js":"15","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js":"16","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js":"17","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js":"18","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js":"19","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js":"20","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js":"21","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js":"22","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js":"23","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js":"24","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js":"25","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js":"26","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js":"27","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js":"28","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js":"29","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js":"30","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js":"31","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js":"32","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js":"33","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js":"34","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js":"35","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js":"36","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js":"37","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js":"38","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js":"39","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js":"40","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js":"41","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js":"42","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js":"43","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js":"44","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js":"45","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\wdyr.js":"46","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\ResourcesTab.js":"47","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\miscellaneous.js":"48","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\endgames.js":"49","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\tactics.js":"50","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\openings.js":"51","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\strategy.js":"52","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\disclosurePolicy.js":"53","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\oneClickCheckout.js":"54","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\thankYou.js":"55"},{"size":234,"mtime":1610499362249,"results":"56","hashOfConfig":"57"},{"size":883,"mtime":1610560445167,"results":"58","hashOfConfig":"57"},{"size":4420,"mtime":1610560457011,"results":"59","hashOfConfig":"57"},{"size":3897,"mtime":1610560591758,"results":"60","hashOfConfig":"57"},{"size":777,"mtime":1610043532898,"results":"61","hashOfConfig":"57"},{"size":3758,"mtime":1610057769035,"results":"62","hashOfConfig":"57"},{"size":450,"mtime":1607486841061,"results":"63","hashOfConfig":"57"},{"size":1103,"mtime":1609528850153,"results":"64","hashOfConfig":"57"},{"size":9692,"mtime":1610560439952,"results":"65","hashOfConfig":"57"},{"size":11653,"mtime":1609528839959,"results":"66","hashOfConfig":"57"},{"size":3411,"mtime":1610560469299,"results":"67","hashOfConfig":"57"},{"size":692,"mtime":1607886954037,"results":"68","hashOfConfig":"57"},{"size":2881,"mtime":1610065581887,"results":"69","hashOfConfig":"57"},{"size":3832,"mtime":1610077141960,"results":"70","hashOfConfig":"57"},{"size":2993,"mtime":1610058529962,"results":"71","hashOfConfig":"57"},{"size":5910,"mtime":1610059606947,"results":"72","hashOfConfig":"57"},{"size":385,"mtime":1610052200729,"results":"73","hashOfConfig":"57"},{"size":317,"mtime":1610052172796,"results":"74","hashOfConfig":"57"},{"size":1908,"mtime":1610057281324,"results":"75","hashOfConfig":"57"},{"size":3183,"mtime":1610060064988,"results":"76","hashOfConfig":"57"},{"size":4569,"mtime":1610560487163,"results":"77","hashOfConfig":"57"},{"size":1362,"mtime":1610059972232,"results":"78","hashOfConfig":"57"},{"size":3903,"mtime":1610065953389,"results":"79","hashOfConfig":"57"},{"size":2842,"mtime":1610500991647,"results":"80","hashOfConfig":"57"},{"size":2909,"mtime":1610058549956,"results":"81","hashOfConfig":"57"},{"size":4509,"mtime":1610066031439,"results":"82","hashOfConfig":"57"},{"size":4386,"mtime":1610560506583,"results":"83","hashOfConfig":"57"},{"size":1502,"mtime":1610052152969,"results":"84","hashOfConfig":"57"},{"size":1903,"mtime":1610052157924,"results":"85","hashOfConfig":"57"},{"size":2456,"mtime":1610052150248,"results":"86","hashOfConfig":"57"},{"size":2544,"mtime":1610052154840,"results":"87","hashOfConfig":"57"},{"size":4223,"mtime":1610560600286,"results":"88","hashOfConfig":"57"},{"size":1425,"mtime":1610052178588,"results":"89","hashOfConfig":"57"},{"size":3833,"mtime":1610057870606,"results":"90","hashOfConfig":"57"},{"size":7235,"mtime":1610069494398,"results":"91","hashOfConfig":"57"},{"size":581,"mtime":1610052175384,"results":"92","hashOfConfig":"57"},{"size":788,"mtime":1610052171697,"results":"93","hashOfConfig":"57"},{"size":5522,"mtime":1610560582201,"results":"94","hashOfConfig":"57"},{"size":2846,"mtime":1610560442434,"results":"95","hashOfConfig":"57"},{"size":345,"mtime":1610560443830,"results":"96","hashOfConfig":"57"},{"size":4280,"mtime":1610560540778,"results":"97","hashOfConfig":"57"},{"size":3041,"mtime":1610052167124,"results":"98","hashOfConfig":"57"},{"size":3407,"mtime":1610560559221,"results":"99","hashOfConfig":"57"},{"size":3054,"mtime":1610560547603,"results":"100","hashOfConfig":"57"},{"size":2792,"mtime":1610560516621,"results":"101","hashOfConfig":"57"},{"size":196,"mtime":1610051899609,"results":"102","hashOfConfig":"57"},{"size":787,"mtime":1609887679612,"results":"103","hashOfConfig":"57"},{"size":277,"mtime":1609876424664,"results":"104","hashOfConfig":"57"},{"size":2773,"mtime":1609872790180,"results":"105","hashOfConfig":"57"},{"size":3437,"mtime":1610560260551,"results":"106","hashOfConfig":"57"},{"size":3489,"mtime":1610560183513,"results":"107","hashOfConfig":"57"},{"size":2585,"mtime":1610078545942,"results":"108","hashOfConfig":"57"},{"size":623,"mtime":1609970452591,"results":"109","hashOfConfig":"57"},{"size":373,"mtime":1609883271683,"results":"110","hashOfConfig":"57"},{"size":426,"mtime":1609884167681,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"gju65z",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"114"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"114"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"114"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"114"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"114"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"114"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"114"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"114"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js",[],["238","239"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js",["240"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js",["241"],"import axios from 'axios'\r\n// axios.defaults.headers.common['User-Agent'] = 'Chess Intellect (chessintellect.com)'\r\n// axios.defaults.headers.common['Accept'] = 'application/json, text/plain, */*'\r\n\r\n\r\nexport const ArchiveURL = 'https://api.chess.com/pub/player/{}/games/archives';\r\nexport const NewAnalysisURL = 'https://www.chess.com/analysis/game/live/{}?tab=report'\r\nexport const GetAnalysisURL = 'https://www.chess.com/callback/analysis/game/live/{}/all'\r\nexport const UserProfileURL = 'https://api.chess.com/pub/player/{}'\r\nexport const CorsProxy = 'https://mysterious-harbor-28403.herokuapp.com/'\r\nexport const ChesscomMembership = 'https://www.chess.com/membership?ref_id=9730606'\r\nexport const ChesscomLoginURL = 'https://www.chess.com/login_and_go?ref_id=9730606'\r\n\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js",["242"],"import React, { useState } from 'react';\r\nimport { store } from '../State/store';\r\n\r\nconst LoadForm = () => {\r\n    const [uname, setUname] = useState(\"\");\r\n\r\n    <form>\r\n        <input \r\n            type=\"text\" \r\n            value={uname} \r\n            onChange ={(e) => setUname(e.targe.value)} \r\n            placeholder=\"Player Name\" \r\n            name=\"username\"></input>\r\n        <button>Submit</button>\r\n\t</form>\r\n}\r\n\r\nexport default LoadForm;\r\n",["243","244"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js",["245"],"import React, { useState, useEffect } from 'react'\r\nimport SUNBURST_ECO from './Sunburst_ECO'\r\nimport { store } from '../../State/store'\r\nimport BARCHART_OPENINGS from './Barchart_Openings'\r\nimport seedrandom from 'seedrandom'\r\n\r\n\r\n\r\nexport const Opening_Data = ({ type, width, height }) => {\r\n    // const defaultState = [{name:\"White\", children:[]}, {name:\"Black\",children:[]}]\r\n\r\n    const data = store(state => state.opening)\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [white, setWhite] = useState([])\r\n    const [black, setBlack] = useState([])\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const w = {};\r\n        const b = {};\r\n\r\n        // console.log(data)\r\n        data.filter((obj) => obj.color.toLowerCase() === \"white\").forEach((e, i, arr) => {\r\n            if(w?.[e.eco]) {\r\n                w[e.eco].value += 1\r\n            } else {\r\n                w[e.eco] = {\r\n                    name: e.eco,\r\n                    value: 1,\r\n                    description: e.name,\r\n                    total: arr.length,\r\n                    won: 0,\r\n                    loss: 0,\r\n                }\r\n            }\r\n\r\n            if(e.won) w[e.eco].won += 1;\r\n            else w[e.eco].loss += 1\r\n        })\r\n\r\n        data.filter((obj) => obj.color.toLowerCase() === \"black\").forEach((e, i, arr) => {\r\n            // console.log(this)\r\n            if(b?.[e.eco]) {\r\n                b[e.eco].value += 1\r\n            } else {\r\n                b[e.eco] = {\r\n                    name: e.eco,\r\n                    value: 1,\r\n                    description: e.name,\r\n                    total: arr.length,\r\n                    won: 0,\r\n                    loss: 0\r\n                }\r\n            }\r\n\r\n            if(e.won) b[e.eco].won += 1;\r\n            else b[e.eco].loss += 1\r\n        })\r\n\r\n        setWhite(() => Object.values(w).sort((a, b) => b.value - a.value))\r\n        setBlack(() => Object.values(b).sort((a, b) => a.value - b.value))\r\n        setLoading(() => false)\r\n    }, [data])\r\n\r\n    // let randomNumberGenerator = 0;\r\n    // useEffect(() => {\r\n    //     randomNumberGenerator = seedrandom('random_number')\r\n\r\n    // },[])\r\n\r\n    if(!loading) {\r\n        if(type.toLowerCase() === \"sunburst\") {\r\n            return (\r\n                <SUNBURST_ECO \r\n                    white={white} \r\n                    black={black} \r\n                    width={width} \r\n                    height={height} \r\n                    // rng={randomNumberGenerator}\r\n                />\r\n            )\r\n        } \r\n        else if(type.toLowerCase() === \"bar\" || type.toLowerCase() === 'barchart') {\r\n            return (\r\n                <BARCHART_OPENINGS white={white} black={black} width={width} height={height} />\r\n            )\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n// Opening_Data.whyDidYouRender = true\r\n\r\nexport default Opening_Data;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js",["246","247","248"],"import React, { memo, useMemo, useCallback, useEffect, useState } from 'react'\r\nimport { Sunburst } from '@nivo/sunburst'\r\nimport { useTheme } from '@nivo/core'\r\nimport seedrandom from 'seedrandom'\r\n\r\n// place these out here so it's not recreated\r\n// const layers =\r\nconst margin = { top: 60, right: 130, bottom: 30, left: 60 }\r\nconst defs = []\r\n\r\nconst Sunburst_ECO = ({white, black, width, height}) => {\r\n    const data = useMemo(() => {\r\n        return {\r\n            name: \"Openings\",\r\n            children: [\r\n                {\r\n                    name: \"White\", \r\n                    color:\"#FFFFFF\", \r\n                    children:white, \r\n                    description: \"White\", \r\n                    total:white.reduce((a,b) => (a+b.value), 0), \r\n                    won:white.reduce((a,b) => (a+b.won), 0),\r\n                    loss:white.reduce((a,b) => (a+b.loss), 0)\r\n                },\r\n                {\r\n                    name: \"Black\", \r\n                    color:\"#000000\", \r\n                    children:black, \r\n                    description: \"Black\", \r\n                    total:black.reduce((a,b)=> (a+b.value), 0), \r\n                    won:black.reduce((a,b) => (a+b.won), 0),\r\n                    loss:black.reduce((a,b) => (a+b.loss), 0)\r\n                }\r\n            ]\r\n        }\r\n    }, [white.length, black.length])\r\n\r\n    const rng = seedrandom('generate_number')\r\n    const childColor = () => pickCustomPalette(customPalette2, rng)\r\n    const colors = useCallback(({ id }) => pickWhiteBlack(id), [])\r\n\r\n    const Title = (data) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold', fontSize: '19px'}\r\n\r\n        // console.log(width, height)\r\n        return (\r\n            <text \r\n                x={data.centerX + 20}\r\n                y={-20}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Black & White Openings (Hover)\r\n            </text>\r\n        )\r\n    } \r\n    \r\n    // console.log(data)\r\n    return (\r\n        <Sunburst\r\n            data={data}\r\n            id=\"description\"\r\n            value=\"value\"\r\n            width={width}\r\n            height={height}\r\n            margin={margin}\r\n            cornerRadius={4}\r\n            borderWidth={2}\r\n            borderColor= \"black\"\r\n            colors={colors}\r\n            childColor={childColor}\r\n            animate={false}\r\n            motionConfig=\"gentle\"\r\n            isInteractive={true}\r\n            tooltip={CustomTooltip}\r\n            layers={ ['sliceLabels', 'slices', Title]}\r\n            defs={defs}\r\n        />\r\n    )\r\n}\r\n\r\n// Sunburst_ECO.whyDidYouRender = true\r\n\r\nexport default memo(Sunburst_ECO);\r\n\r\n// const customPalette = [\"#E8C1A0\",\"#F47560\",\"#F1E15B\",\"#E8A838\",\"#61CDBB\",\"#97E3D5\"]\r\nconst customPalette2 = [\"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\", \"#fb9a99\", \"#e31a1c\", \"#fdbf6f\", \"#ff7f00\", \"#cab2d6\", \"#6a3d9a\", \"#ffff99\", \"#b15928\"]\r\n\r\nconst pickCustomPalette = (palette, rng) => {\r\n    const i = Math.floor(rng()*palette.length)\r\n    const color = palette[i]\r\n    // console.log(i, color)\r\n\r\n    return color;\r\n}\r\n\r\nconst pickWhiteBlack = (id) => {\r\n    if(id === \"White\") { \r\n        // return \"#fff1d9\" \r\n        return \"#FFFFFF\"\r\n    }\r\n\r\n    return \"#000000\" \r\n}\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    const theme = useTheme()\r\n    // console.log(theme)\r\n    return (\r\n        <div style={{ ...theme.tooltip.container, position: 'absolute', width: '200px'}}>\r\n            <strong>Name:</strong> {data.description} <br />\r\n            <strong>ECO:</strong> {data.name} <br />\r\n            <strong>Played:</strong> {value} ({(value / data.total * 100).toFixed(1)}%) <br />\r\n            <strong>Won:</strong> {data.won}   <br />\r\n            <strong>Lost:</strong> {data.loss}\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js",["249"],"import React from 'react'\r\nimport { XAxis,YAxis,BarSeries,DensitySeries } from '@data-ui/histogram'\r\nimport { baseLabel } from '@data-ui/theme/lib/svgLabel'\r\nimport { store } from '../../State/store'\r\nimport ResponsiveHistogram from '../ResponsiveHistogram'\r\n\r\nconst Histogram_MovePly = ({ type = \"blunder\", x = \"value\", width, height }) => {\r\n\r\n    const MoveData = {\r\n        blunder: store(state => state.blunder),\r\n        mistake: store(state => state.mistake),\r\n        inaccuracy: store(state => state.inaccuracy)\r\n    }\r\n\r\n    const Fill = {\r\n        blunder: \"#CA3432\",\r\n        mistake: \"#E58F2A\",\r\n        inaccuracy: \"#6650D1\" // \"#5c533b\"\r\n    }\r\n\r\n    // this is only unique thing - might be able to extract\r\n    const DataAccessor = {\r\n        percent: datum => datum?.plyPercent,\r\n        value: datum => datum?.ply\r\n    }\r\n\r\n\r\n    // console.log(width, height)\r\n    // console.log(DataAccessor[x])\r\n    // console.log(MoveData)\r\n    return (\r\n        <ResponsiveHistogram\r\n            ariaLabel=\"\"\r\n            height={height}\r\n            width={width}\r\n            orientation=\"vertical\"\r\n            cumulative={false}\r\n            binCount={20}\r\n            binType=\"numeric\"\r\n            valueAccessor={DataAccessor[x]}\r\n            renderTooltip={({ event, datum, data, color }) => (\r\n                <div>\r\n                  <strong style={{ color }}>{datum.bin0} to {datum.bin1}</strong>\r\n                  <div><strong>count </strong>{datum.count}</div>\r\n                  <div><strong>cumulative </strong>{datum.cumulative}</div>\r\n                  <div><strong>density </strong>{datum.density}</div>\r\n                </div>\r\n            )}\r\n        >\r\n            <BarSeries animated rawData={MoveData[type]} fill={Fill[type]}/>\r\n            {/* <DensitySeries\r\n                stroke=\"black\"\r\n                showArea={false}\r\n                smoothing={0.01}\r\n                kernel=\"gaussian\"\r\n                rawData={MoveData[type]}\r\n                fill={Fill[type]}\r\n            /> */}\r\n\r\n            <XAxis \r\n                label={x === \"percent\" ? \"Move Ply % of Total Game\" : \"Move Ply\" }\r\n                axisStyles = {{\r\n                    label: {\r\n                        'bottom': {\r\n                            ...baseLabel,\r\n                            fontSize: '18px',\r\n                            fill: 'black',\r\n                            y: '46'\r\n                        },\r\n                    }\r\n                }}\r\n            />\r\n            <YAxis \r\n                label=\"Count\"\r\n                axisStyles = {{\r\n                    label: {\r\n                    'left': {\r\n                        ...baseLabel,\r\n                        fontSize: '18px',\r\n                        fill: 'black',\r\n                        y: -35\r\n                    },\r\n                    }\r\n                }}\r\n            />\r\n        </ResponsiveHistogram>\r\n    )\r\n}\r\n\r\n// Histogram_MovePly.whyDidYouRender = true\r\n\r\nexport default Histogram_MovePly","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js",["250"],"import React, { useState, useEffect } from 'react'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    // console.log(nameLookUp)\r\n    return (\r\n        <div style={{width: '300px',maxHeight:'200px'}}>\r\n            <strong>ECO:</strong> {data.eco} <br />\r\n            <strong>Name:</strong>\r\n                {data.name[0]}\r\n            <br />\r\n            <strong>Won:</strong> {data.Won || 0}   <br />\r\n            <strong>Lost:</strong> {data.Lost || 0}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst Barchart_Openings = ({ white, black, width, height }) => {\r\n    \r\n    const [loading, setLoading] = useState(true)\r\n    const [data, setData] = useState({})\r\n    const [max, setMax] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const d = {}\r\n\r\n        white.forEach(e => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += e.won || 0;\r\n                d[o].Lost += e.loss || 0;\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description);\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:e.won || 0, Lost:e.loss || 0}\r\n            }\r\n        })\r\n\r\n        black.forEach(e => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += (e.won || 0);\r\n                d[o].Lost += (e.loss || 0);\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description)\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:(e.won || 0), Lost:(e.loss || 0)}\r\n            }\r\n        })\r\n        \r\n        const final = Object.values(d)\r\n        let maxValue = max;\r\n        final.forEach(e => {\r\n            if((e.Won || 0) + (e.Lost || 0) > maxValue)  {\r\n                maxValue = (e.Won || 0) + (e.Lost || 0);\r\n            }\r\n        })\r\n        \r\n        // console.log(maxValue)\r\n        // console.log(d)\r\n        setData(() => Object.values(d))\r\n        setMax(() => maxValue)\r\n\r\n        // console.log(Object.values(d))\r\n        setLoading(() => false)\r\n    },[]);\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold', fontSize: '18px'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Results by Openings\r\n            </text>\r\n        )\r\n    } \r\n\r\n    if(!loading) {\r\n        return (\r\n            <Bar\r\n                data={data.sort((a, b) => b.Won === a.Won ? b.Won + b.Lost - (a.Won + a.Lost) : b.Won - a.Won)}\r\n                width={width}\r\n                height={height}\r\n                keys={[ 'Won', 'Lost']}\r\n                indexBy=\"eco\"\r\n                margin={{ top: 40, right: (width > 600) ? 130 : 80, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                valueScale={{ type: 'linear' }}\r\n                indexScale={{ type: 'band', round: true }}\r\n                colors={{ scheme: 'nivo' }}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    // tickPadding: 5,\r\n                    tickRotation: -30,\r\n                    legend: 'ECO Codes',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 40,\r\n                    size: 40\r\n                }}\r\n                enableGridX\r\n                layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n                axisLeft={{\r\n                    tickValues:[...Array(max + 1).keys()],\r\n                    legend: 'Count',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -30,\r\n                }}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: '#000000', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                tooltip={CustomTooltip}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                theme={{\r\n                    axis: {\r\n                        ticks: {\r\n                            text: {\r\n                                fontSize: '12px',\r\n                            }\r\n                        },\r\n                        legend: {\r\n                            text: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                color: 'black'\r\n                            }\r\n                        }\r\n                    },\r\n                    legends: {\r\n                        text: {\r\n                            fontSize: '12px',\r\n                        }\r\n                    },\r\n                    textColor: 'black'\r\n\r\n                }}\r\n\r\n                animate={false}\r\n            />\r\n        )\r\n    } \r\n    \r\n    return null\r\n \r\n}\r\n\r\n// Barchart_Openings.whyDidYouRender = true\r\n\r\nexport default Barchart_Openings;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js",["251"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js",["252"],"import { useState, useEffect } from 'react'\r\nimport { store } from \"../../State/store\";\r\nimport ResponsiveHistogram from \"../ResponsiveHistogram\";\r\nimport { XAxis, YAxis, BarSeries } from \"@data-ui/histogram\";\r\nimport { baseLabel } from '@data-ui/theme/lib/svgLabel'\r\n\r\nconst Histogram_CAPS = ({ height, width }) => {\r\n  \r\n  const [meanCAPS, setMeanCAPS] = useState(0)\r\n  \r\n  const games = store((state) => state.Games);\r\n  \r\n  useEffect(() => {\r\n    const reducer = (value, currObj) => value + (currObj.CAPS || 0)\r\n\r\n    const total = games.reduce(reducer, 0)\r\n    const count = games.length\r\n\r\n    // console.log(total, count)\r\n    setMeanCAPS(total / count)\r\n\r\n  }, [games.length])\r\n  \r\n\tconsole.log(meanCAPS)\r\n  return (\r\n    <ResponsiveHistogram\r\n      ariaLabel=\"Histogram of Chess.com CAPS % Score\"\r\n      height={height}\r\n      width={width}\r\n      orientation=\"vertical\"\r\n      cumulative={false}\r\n      binCount={10}\r\n      binType=\"numeric\"\r\n      valueAccessor={(datum) => datum?.CAPS}\r\n      limits={[0, 100]}\r\n      renderTooltip={({ event, datum, data, color }) => {\r\n        // console.log(data)\r\n        return (\r\n        <div>\r\n          <strong style={{ color }}>\r\n            {datum.bin0} to {datum.bin1}\r\n          </strong>\r\n          <div>\r\n            <strong>count </strong>\r\n            {datum.count}\r\n          </div>\r\n          <div>\r\n            <strong>cumulative </strong>\r\n            {datum.cumulative}\r\n          </div>\r\n          <div>\r\n            <strong>density </strong>\r\n            {datum.density}\r\n          </div>\r\n          <div>\r\n            <strong>MEAN: </strong>\r\n            {meanCAPS.toFixed(1)}\r\n          </div>\r\n        </div>\r\n      )\r\n    }}\r\n    >\r\n      <BarSeries animated rawData={games} fill=\"red\" />\r\n      {/* <DensitySeries\r\n          stroke=\"#e64980\"\r\n          showArea={true}\r\n          smoothing={0.01}\r\n          kernel=\"gaussian\"\r\n          rawData={blunders}\r\n          fill=\"red\"\r\n      /> */}\r\n\r\n      <XAxis\r\n        label=\"Chess.com CAPS Score\"\r\n        axisStyles = {{\r\n          label: {\r\n            'bottom': {\r\n              // ...xAxisStyles,\r\n              ...baseLabel,\r\n              fontSize: '18px',\r\n              fill: 'black',\r\n              y: '46'\r\n            },\r\n          }\r\n        }}\r\n        // labelProps={{\r\n        //   // ...xAxisStyles,\r\n        //   fontSize: \"100px\"\r\n        // }}\r\n      />\r\n      <YAxis \r\n        label=\"Count\"\r\n        stroke=\"black\"\r\n        axisStyles = {{\r\n          label: {\r\n            'left': {\r\n              // ...xAxisStyles,\r\n              ...baseLabel,\r\n              fontSize: '18px',\r\n              fill: 'black',\r\n              y: -35\r\n            },\r\n          }\r\n        }}\r\n      />\r\n    </ResponsiveHistogram>\r\n  );\r\n};\r\n\r\n// Histogram_CAPS.whyDidYouRender = true;\r\n\r\nexport default Histogram_CAPS;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js",["253"],"import React from 'react'\r\nimport { XAxis,YAxis,BarSeries,DensitySeries } from '@data-ui/histogram'\r\nimport { baseLabel } from '@data-ui/theme/lib/svgLabel'\r\nimport { store } from '../../State/store'\r\nimport ResponsiveHistogram from '../ResponsiveHistogram'\r\n\r\n\r\nconst Histogram_MoveTime = ({ type = \"blunder\", x = \"percent\", width, height }) => {\r\n\r\n    const MoveData = {\r\n        blunder: store(state => state.blunder),\r\n        mistake: store(state => state.mistake),\r\n        inaccuracy: store(state => state.inaccuracy)\r\n    }\r\n\r\n    const Fill = {\r\n        blunder: \"#CA3432\",\r\n        mistake: \"#E58F2A\",\r\n        inaccuracy: \"#6650D1\" // \"#5c533b\"\r\n    }\r\n\r\n    const DataAccessor = {\r\n        percent: datum => datum?.timeToThinkPercent,\r\n        value: datum => datum?.timeToThink\r\n    }\r\n\r\n    // console.log(blunders, mistakes)\r\n    return (\r\n        // <ResponsiveHistogram\r\n        <ResponsiveHistogram\r\n            ariaLabel=\"\"\r\n            height={height}\r\n            width={width}\r\n            orientation=\"vertical\"\r\n            cumulative={false}\r\n            binCount={20}\r\n            binType=\"numeric\"\r\n            valueAccessor={DataAccessor[x]}\r\n            renderTooltip={({ event, datum, data, color }) => (\r\n                <div>\r\n                  <strong style={{ color }}>{datum.bin0} to {datum.bin1}</strong>\r\n                  <div><strong>count </strong>{datum.count}</div>\r\n                  <div><strong>cumulative </strong>{datum.cumulative}</div>\r\n                  <div><strong>density </strong>{datum.density}</div>\r\n                </div>\r\n            )}\r\n        >\r\n            <BarSeries animated rawData={MoveData[type]} fill={Fill[type]}/>\r\n            {/* <DensitySeries\r\n                stroke=\"black\"\r\n                showArea={false}\r\n                smoothing={0.01}\r\n                kernel=\"gaussian\"\r\n                rawData={MoveData[type]}\r\n                fill={Fill[type]}\r\n            /> */}\r\n\r\n            <XAxis \r\n                label= {x === \"percent\" ? \"Time Left % of Total Game\" : \"Time Left (s)\" }\r\n                axisStyles = {{\r\n                    label: {\r\n                    'bottom': {\r\n                        ...baseLabel,\r\n                        fontSize: '18px',\r\n                        fill: 'black',\r\n                        y: '46'\r\n                    },\r\n                    }\r\n                }}\r\n            />\r\n\r\n            <YAxis \r\n                label=\"Count\"\r\n                axisStyles = {{\r\n                    label: {\r\n                    'left': {\r\n                        ...baseLabel,\r\n                        fontSize: '18px',\r\n                        fill: 'black',\r\n                        y: -35\r\n                    },\r\n                    }\r\n                }}\r\n            />\r\n        </ResponsiveHistogram>\r\n    )\r\n}\r\n\r\n// Histogram_MoveTime.whyDidYouRender = true\r\n\r\nexport default Histogram_MoveTime","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js",["254"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst Barchart_Tactics = ({ width, height }) => {\r\n\r\n    const tactics = store((state) => {\r\n        return {\r\n            \"Win the Exchange\":state.winningExchange,\r\n            \"Underdefended Piece\":state.underdefended,\r\n            \"Trapped piece\":state.trapped,\r\n            \"Hanging Piece\":state.hanging,\r\n            \"Relative Pin\":state.relativePin,\r\n            \"Absolute Pin\":state.absolutePin,\r\n            Skewer:state.skewer,\r\n            Fork:state.fork,\r\n            \"Mate\":state.mate,\r\n        }\r\n    })\r\n\r\n    const [the_data, setThe_data] = useState([])\r\n    // const [max, setMax] = useState(0)\r\n\r\n    \r\n    useEffect(() => {\r\n        setThe_data(() => [])\r\n\r\n        const d = Object.keys(tactics).map((e) => {\r\n            return {\r\n                \"tactic\": e,\r\n                \"Blundered\": tactics[e].filter((obj) => obj.class === \"blunders\").length || null,\r\n                \"Missed\": tactics[e].filter((obj) => obj.class === \"missed\").length || null,\r\n                \"Got\": tactics[e].filter((obj) => obj.class === \"got\").length || null\r\n            }\r\n        })\r\n        d.sort((a, b) => {\r\n            const result =  ((b.Blundered || 0) + (b.Missed || 0) + (b.Got || 0)) - ((a.Blundered || 0) + (a.Missed || 0) + (a.Got || 0))\r\n            // console.log(result)\r\n            return result\r\n        })\r\n        // console.log(d)\r\n\r\n        // setMax(() => d[0].Blundered + d[0].Missed + d[0].Got)\r\n        setThe_data(() => d)\r\n\r\n    }, [])\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics by Category\r\n            </text>\r\n        )\r\n    } \r\n\r\n    return (\r\n        <>\r\n        { the_data.reduce((sum, obj) => sum + obj.Blundered + obj.Missed + obj.Got, 0) === 0 ?\r\n            <p className=\"no-data-message\">No tactics data available. Coming soon!</p> :\r\n        <Bar\r\n            data={\r\n                the_data.filter(obj => ((obj.Blundered || 0) + (obj.Missed || 0) + (obj.Got || 0) !== 0))\r\n            }\r\n            keys={['Blundered','Missed', 'Got']}\r\n            indexBy=\"tactic\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 40, right: 130, bottom: 80, left: 60 }}\r\n            // groupMode=\"grouped\"\r\n            axisLeft={{\r\n                tickValues: 5,\r\n                legend: 'Count',\r\n                legendPosition: 'middle',\r\n                legendOffset: -30,\r\n            }}\r\n            axisBottom={{\r\n                tickSize: 8,\r\n                tickPadding: 5,\r\n                tickRotation: -20,\r\n                legend: 'Tactic',\r\n                legendPosition: 'middle',\r\n                legendOffset: 55\r\n            }}\r\n            labelSkipHeight={10}\r\n            padding={0.25}\r\n            enableGridX\r\n            layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n            theme={{\r\n\t\t\t\taxis: {\r\n\t\t\t\t\tticks: {\r\n\t\t\t\t\t\ttext: {\r\n\t\t\t\t\t\t\tfontSize: '12px',\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\ttext: {\r\n\t\t\t\t\t\t\tfontSize: '16px',\r\n\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t\tcolor: 'black'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tlegends: {\r\n\t\t\t\t\ttext: {\r\n\t\t\t\t\t\tfontSize: '12px',\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\ttextColor: 'black'\r\n\r\n\t\t\t}}\r\n        />\r\n        }\r\n        </>\r\n    )\r\n        \r\n}\r\n\r\n// Barchart_Tactics.whyDidYouRender = true\r\n\r\nexport default Barchart_Tactics","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js",["255"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js",["256"],"import React, {useState, useEffect} from 'react'\r\nimport { store } from \"../State/store\"\r\nimport 'react-data-grid/dist/react-data-grid.css'\r\nimport Table from './Table'\r\n\r\nconst TacticsTable = () => {\r\n\r\n    const [rows, setRows] = useState([])\r\n    const tactics = store((state) => {\r\n        return [\r\n            ...state.winningExchange,\r\n            ...state.underdefended,\r\n            ...state.trapped,\r\n            ...state.hanging,\r\n            ...state.relativePin,\r\n            ...state.absolutePin,\r\n            ...state.skewer,\r\n            ...state.fork,\r\n            ...state.mate,\r\n        ]\r\n    })\r\n\r\n    useEffect(() => {\r\n        // console.log(tactics)\r\n        const t = tactics.map((e, i) => {\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                name: e.type.name,\r\n                phase: e.phase,\r\n                move: Math.ceil(e.ply / 2),\r\n                ply: e.ply,\r\n                timeLeft: e?.timeToThink?.toFixed(1),\r\n                timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                result: e.won ? \"Won\" : \"Lost\",\r\n                eco:e.eco,\r\n                color:e.color,\r\n                opponent: e.opponent,\r\n                class: e.class,\r\n                caps: e.CAPS.toFixed(1)\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table data={rows} />\r\n    )\r\n\r\n}\r\n\r\n// TacticsTable.whyDidYouRender = true\r\n\r\nexport default TacticsTable","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js",["257"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n    {field: 'blunders', headerName: 'Blunders'},\r\n    {field: 'mistakes', headerName: 'Mistakes'},\r\n    {field: 'inaccuracies', headerName: 'Inaccuracies'}\r\n]\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const Games = store(state => state.Games)\r\n    const Openings = store(state => state.opening)\r\n    const blunders = store(state => state.blunder)\r\n    const mistakes = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        // console.log(Openings)\r\n        const t = Games.map((e, i) => {\r\n            // console.log(Openings.filter(obj => obj.id === e.id))\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                result: e.result === \"win\" ? \"Won\" : \"Lost\",\r\n                opponent: e.opponent,\r\n                color:e.color,\r\n                eco: Openings.filter(obj => obj.id === e.id)?.[0]?.eco,\r\n                caps: e?.CAPS?.toFixed(1),\r\n                blunders: blunders.filter(obj => obj.id === e.id).length,\r\n                mistakes: mistakes.filter(obj => obj.id === e.id).length,\r\n                inaccuracies: inaccuracy.filter(obj => obj.id === e.id).length\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [Games])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\n// Table_Game.whyDidYouRender = true\r\n\r\nexport default Table_Game","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js",["258"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'won',headerName:\"Won\",},\r\n    {field: 'lost',headerName:\"Lost\",},\r\n    // {field: 'count',headerName:\"Total\",filter: true,},\r\n    {field: 'aveCaps',headerName:\"Average CAPS\", width:108},\r\n    {field: 'blunders',headerName:\"Blunders\",},\r\n    {field: 'mistakes',headerName:\"Mistakes\",},\r\n    {field: 'inaccuracy',headerName:\"Inaccuracies\",},\r\n]\r\nconst Table_Opening = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const openings = store(state => state.opening)\r\n    const blunder = store(state => state.blunder)\r\n    const mistake = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    // console.log(openings)\r\n\r\n    useEffect(() => {\r\n        // console.log('hi')\r\n        const data = {};\r\n        \r\n        openings.forEach((e, i) => {\r\n            if(!data[e.eco]) {\r\n                data[e.eco] = {\r\n                    eco: e.eco,\r\n                    count: 1,\r\n                    won: 0,\r\n                    lost: 0,\r\n                    aveCaps: e.caps,\r\n                    blunders: blunder.filter(obj => obj.id === e.id).length,\r\n                    mistakes: mistake.filter(obj => obj.id === e.id).length,\r\n                    inaccuracy: inaccuracy.filter(obj => obj.id === e.id).length\r\n                };\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n            }\r\n            else {\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n                data[e.eco].aveCaps = (data[e.eco].aveCaps * data[e.eco].count + e.caps) / (data[e.eco].count + 1);\r\n                data[e.eco].count += 1;\r\n                data[e.eco].blunders += blunder.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].mistakes += mistake.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].inaccuracy += inaccuracy.filter(obj => obj.id === e.id).length;\r\n            }\r\n        })\r\n        \r\n        Object.keys(data).forEach(e => {\r\n            data[e].aveCaps = data[e].aveCaps.toFixed(1)\r\n        })\r\n        setRows(() => Object.values(data))\r\n        // console.log(data)\r\n        // console.log(Object.values(data))\r\n    }, [openings])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} width={720} />\r\n    )\r\n}\r\n\r\n// Table_Opening.whyDidYouRender = true\r\n\r\nexport default Table_Opening","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js",["259"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js",["260","261"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js",["262"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js",["263","264"],"import React, { useState } from 'react';\r\nimport { GetURL } from '../BusinessLogic/helpers';\r\nimport { ChesscomLoginURL, CorsProxy } from '../BusinessLogic/urls'\r\n\r\nconst chooseBackgroundColor = (loggedIn) => {\r\n    if(loggedIn === true) {\r\n        return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n    }\r\n    else if(loggedIn === false) {\r\n        return {backgroundColor: \"#e03131\"}\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst ChesscomLogin = ({ setPage }) => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(null)\r\n\r\n    // const resetValidation = () => {\r\n    //     setLoggedIn(null);\r\n    // }\r\n\r\n\r\n    return (\r\n            <div className=\"username-form\">\r\n                <p className=\"chesscom-login-instructions\" style={chooseBackgroundColor(loggedIn)}>{\r\n                    (loggedIn === true) ? `Click to proceed.` :\r\n                    \"Click below and log into Chess.com.\"\r\n                }</p>\r\n                <p className=\"form-content\">\r\n                    <span title=\"Chess Intellect does NOT request any passwords. You must log in because Chess.com only lets logged-in members request new game analyses be created.\">Why? </span>\r\n                    <span title=\"You must be logged into Chess.com on the SAME browser window as the current Chessintellect.com tab. Don't login on a different browser window. Either open a new tab or click the button below to login.\"> Help!</span>\r\n                </p>\r\n                <p className=\"form-message\">\r\n                    You must sign in to Chess.com in the <b>same</b> browser window but a different tab. You must check this manually. You're good to go if you click the button below and are already logged in to your account. Otherwise, please login.\r\n                </p>\r\n                \r\n                <div className=\"username-form-buttons\">\r\n                    <button onClick={() => setPage(page => page - 1)} className=\"grey-button\">Back</button>\r\n                    {loggedIn === true ? <button onClick={() => setPage(page => page + 1)} className=\"orange-button\">Proceed</button> :\r\n                        <button onClick={() => { setLoggedIn(true); window.open(ChesscomLoginURL, '_blank');}} className=\"orange-button\">Log In</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n// const testLoggedIn = async () => {\r\n//     let loggedIn = false;\r\n\r\n//     await GetURL(CorsProxy + 'https://www.chess.com/analysis/game/live/5687380484?tab=report')\r\n//           .then(res => {\r\n//               if(res.data.includes(\"Upgrade to Save\") || res.data.includes(\"locked-message\")) {\r\n//                   loggedIn = false;\r\n//               }\r\n//               else if(res.data.includes(\"Key Moments\") || res.data.includes(\"Saved Analysis\")) {\r\n//                   loggedIn = true\r\n//               }\r\n//               console.log(res.data)\r\n//           }).catch(err => {\r\n//               console.warn(err)\r\n//           })\r\n\r\n//     return loggedIn;\r\n// }\r\n\r\n// ChesscomLogin.whyDidYouRender = true\r\nexport default ChesscomLogin;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js",["265","266"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\wdyr.js",["267"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\ResourcesTab.js",["268"],"import React from 'react'\r\nimport TacticsResources from './tactics'\r\n// import MiscResources from './miscellaneous'\r\nimport DisclosurePolicy from './disclosurePolicy'\r\nimport EndgameResources from './endgames'\r\nimport StrategyResources from './strategy'\r\nimport OpeningResources from './openings'\r\n// import OneClickBuyAll from './oneClickCheckout'\r\nimport ThankYou from './thankYou'\r\n\r\nconst Resources = () => {\r\n\r\n    return (\r\n        <div className=\"resources-page\"> \r\n            <DisclosurePolicy />\r\n            {/* <OneClickBuyAll /> */}\r\n            <TacticsResources />\r\n            <EndgameResources />\r\n            <StrategyResources />\r\n            <OpeningResources />\r\n            {/* <MiscResources /> */}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resources\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\miscellaneous.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\endgames.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\tactics.js",["269","270","271"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\openings.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\strategy.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\disclosurePolicy.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\oneClickCheckout.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\thankYou.js",[],{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":105,"column":12,"nodeType":"278","messageId":"279","endLine":132,"endColumn":7},{"ruleId":"280","severity":1,"message":"281","line":1,"column":8,"nodeType":"282","messageId":"283","endLine":1,"endColumn":13},{"ruleId":"280","severity":1,"message":"284","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":15},{"ruleId":"272","replacedBy":"285"},{"ruleId":"274","replacedBy":"286"},{"ruleId":"280","severity":1,"message":"287","line":5,"column":8,"nodeType":"282","messageId":"283","endLine":5,"endColumn":18},{"ruleId":"280","severity":1,"message":"288","line":1,"column":45,"nodeType":"282","messageId":"283","endLine":1,"endColumn":54},{"ruleId":"280","severity":1,"message":"289","line":1,"column":56,"nodeType":"282","messageId":"283","endLine":1,"endColumn":64},{"ruleId":"290","severity":1,"message":"291","line":36,"column":8,"nodeType":"292","endLine":36,"endColumn":36,"suggestions":"293"},{"ruleId":"280","severity":1,"message":"294","line":2,"column":32,"nodeType":"282","messageId":"283","endLine":2,"endColumn":45},{"ruleId":"290","severity":1,"message":"295","line":68,"column":7,"nodeType":"292","endLine":68,"endColumn":9,"suggestions":"296"},{"ruleId":"280","severity":1,"message":"297","line":6,"column":7,"nodeType":"282","messageId":"283","endLine":6,"endColumn":19},{"ruleId":"290","severity":1,"message":"298","line":22,"column":6,"nodeType":"292","endLine":22,"endColumn":20,"suggestions":"299"},{"ruleId":"280","severity":1,"message":"294","line":2,"column":32,"nodeType":"282","messageId":"283","endLine":2,"endColumn":45},{"ruleId":"290","severity":1,"message":"300","line":46,"column":8,"nodeType":"292","endLine":46,"endColumn":10,"suggestions":"301"},{"ruleId":"290","severity":1,"message":"300","line":46,"column":8,"nodeType":"292","endLine":46,"endColumn":10,"suggestions":"302"},{"ruleId":"290","severity":1,"message":"300","line":45,"column":8,"nodeType":"292","endLine":45,"endColumn":10,"suggestions":"303"},{"ruleId":"290","severity":1,"message":"304","line":45,"column":8,"nodeType":"292","endLine":45,"endColumn":15,"suggestions":"305"},{"ruleId":"290","severity":1,"message":"306","line":59,"column":8,"nodeType":"292","endLine":59,"endColumn":18,"suggestions":"307"},{"ruleId":"290","severity":1,"message":"308","line":98,"column":8,"nodeType":"292","endLine":98,"endColumn":10,"suggestions":"309"},{"ruleId":"310","severity":1,"message":"311","line":90,"column":149,"nodeType":"312","endLine":90,"endColumn":164},{"ruleId":"280","severity":1,"message":"313","line":119,"column":11,"nodeType":"282","messageId":"283","endLine":119,"endColumn":27},{"ruleId":"290","severity":1,"message":"314","line":58,"column":8,"nodeType":"292","endLine":58,"endColumn":10,"suggestions":"315"},{"ruleId":"280","severity":1,"message":"316","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":16},{"ruleId":"280","severity":1,"message":"317","line":3,"column":28,"nodeType":"282","messageId":"283","endLine":3,"endColumn":37},{"ruleId":"290","severity":1,"message":"318","line":52,"column":8,"nodeType":"292","endLine":52,"endColumn":42,"suggestions":"319"},{"ruleId":"290","severity":1,"message":"320","line":87,"column":8,"nodeType":"292","endLine":87,"endColumn":21,"suggestions":"321"},{"ruleId":"280","severity":1,"message":"322","line":1,"column":8,"nodeType":"282","messageId":"283","endLine":1,"endColumn":13},{"ruleId":"280","severity":1,"message":"323","line":9,"column":8,"nodeType":"282","messageId":"283","endLine":9,"endColumn":16},{"ruleId":"324","severity":1,"message":"325","line":47,"column":7,"nodeType":"326","endLine":55,"endColumn":8},{"ruleId":"324","severity":1,"message":"325","line":56,"column":7,"nodeType":"326","endLine":64,"endColumn":8},{"ruleId":"324","severity":1,"message":"325","line":65,"column":7,"nodeType":"326","endLine":73,"endColumn":8},"no-native-reassign",["327"],"no-negated-in-lhs",["328"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'games', 'games', 'gamenum', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'gamenum'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.",["327"],["328"],"'seedrandom' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'black' and 'white'. Either include them or remove the dependency array.","ArrayExpression",["329"],"'DensitySeries' is defined but never used.","React Hook useEffect has missing dependencies: 'black', 'max', and 'white'. Either include them or remove the dependency array.",["330"],"'defaultState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'games'. Either include it or remove the dependency array.",["331"],"React Hook useEffect has a missing dependency: 'tactics'. Either include it or remove the dependency array.",["332"],["333"],["334"],"React Hook useEffect has missing dependencies: 'Openings', 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'blunder', 'inaccuracy', and 'mistake'. Either include them or remove the dependency array.",["336"],"React Hook useEffect has missing dependencies: 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["337"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'username_zustand' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'modalID'. Either include it or remove the dependency array.",["338"],"'GetURL' is defined but never used.","'CorsProxy' is defined but never used.","React Hook useEffect has a missing dependency: 'maxGames'. Either include it or remove the dependency array.",["339"],"React Hook useEffect has a missing dependency: 'logs'. Either include it or remove the dependency array.",["340"],"'React' is defined but never used.","'ThankYou' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"347","fix":"349"},{"desc":"347","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},"Update the dependencies array to be: [white, black]",{"range":"363","text":"364"},"Update the dependencies array to be: [black, max, white]",{"range":"365","text":"366"},"Update the dependencies array to be: [games, games.length]",{"range":"367","text":"368"},"Update the dependencies array to be: [tactics]",{"range":"369","text":"370"},{"range":"371","text":"370"},{"range":"372","text":"370"},"Update the dependencies array to be: [Games, Openings, blunders, inaccuracy, mistakes]",{"range":"373","text":"374"},"Update the dependencies array to be: [blunder, inaccuracy, mistake, openings]",{"range":"375","text":"376"},"Update the dependencies array to be: [blunders, inaccuracy, mistakes]",{"range":"377","text":"378"},"Update the dependencies array to be: [modalID]",{"range":"379","text":"380"},"Update the dependencies array to be: [receivedGameData, failedGameData, maxGames]",{"range":"381","text":"382"},"Update the dependencies array to be: [logs, logs.length]",{"range":"383","text":"384"},[1324,1352],"[white, black]",[2209,2211],"[black, max, white]",[669,683],"[games, games.length]",[1595,1597],"[tactics]",[1447,1449],[1367,1369],[1749,1756],"[Games, Openings, blunders, inaccuracy, mistakes]",[2369,2379],"[blunder, inaccuracy, mistake, openings]",[3344,3346],"[blunders, inaccuracy, mistakes]",[1896,1898],"[modalID]",[1551,1585],"[receivedGameData, failedGameData, maxGames]",[2636,2649],"[logs, logs.length]"]