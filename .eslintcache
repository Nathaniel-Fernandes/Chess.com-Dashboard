[{"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js":"1","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js":"2","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js":"3","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js":"4","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js":"5","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js":"6","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js":"7","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js":"8","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js":"9","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js":"10","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js":"11","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js":"12","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js":"13","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js":"14","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js":"15","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js":"16","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js":"17","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js":"18","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js":"19","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js":"20","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js":"21","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js":"22","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js":"23","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js":"24","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js":"25","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js":"26","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js":"27","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js":"28","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js":"29","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js":"30","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js":"31","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js":"32","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js":"33","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js":"34","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js":"35","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js":"36","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js":"37","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js":"38","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js":"39","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js":"40","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js":"41","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js":"42"},{"size":202,"mtime":1608225211824,"results":"43","hashOfConfig":"44"},{"size":1326,"mtime":1608697223628,"results":"45","hashOfConfig":"44"},{"size":3878,"mtime":1608352668352,"results":"46","hashOfConfig":"44"},{"size":3132,"mtime":1608696559933,"results":"47","hashOfConfig":"44"},{"size":662,"mtime":1608692422090,"results":"48","hashOfConfig":"44"},{"size":3047,"mtime":1608142604320,"results":"49","hashOfConfig":"44"},{"size":450,"mtime":1607486841061,"results":"50","hashOfConfig":"44"},{"size":1158,"mtime":1608567207851,"results":"51","hashOfConfig":"44"},{"size":9000,"mtime":1608066628484,"results":"52","hashOfConfig":"44"},{"size":11625,"mtime":1608352671298,"results":"53","hashOfConfig":"44"},{"size":3408,"mtime":1608145525206,"results":"54","hashOfConfig":"44"},{"size":692,"mtime":1607886954037,"results":"55","hashOfConfig":"44"},{"size":2489,"mtime":1608306646465,"results":"56","hashOfConfig":"44"},{"size":2990,"mtime":1608420196947,"results":"57","hashOfConfig":"44"},{"size":2083,"mtime":1608269245262,"results":"58","hashOfConfig":"44"},{"size":5041,"mtime":1608338990526,"results":"59","hashOfConfig":"44"},{"size":336,"mtime":1608268494627,"results":"60","hashOfConfig":"44"},{"size":277,"mtime":1608430818909,"results":"61","hashOfConfig":"44"},{"size":1412,"mtime":1608228102644,"results":"62","hashOfConfig":"44"},{"size":2698,"mtime":1608352664908,"results":"63","hashOfConfig":"44"},{"size":4333,"mtime":1608352594460,"results":"64","hashOfConfig":"44"},{"size":1277,"mtime":1608250714219,"results":"65","hashOfConfig":"44"},{"size":2406,"mtime":1608356624280,"results":"66","hashOfConfig":"44"},{"size":1303,"mtime":1608250626871,"results":"67","hashOfConfig":"44"},{"size":2011,"mtime":1608250701948,"results":"68","hashOfConfig":"44"},{"size":3894,"mtime":1608357560600,"results":"69","hashOfConfig":"44"},{"size":3541,"mtime":1608403876469,"results":"70","hashOfConfig":"44"},{"size":1564,"mtime":1608568806559,"results":"71","hashOfConfig":"44"},{"size":1863,"mtime":1608567786308,"results":"72","hashOfConfig":"44"},{"size":2433,"mtime":1608430535562,"results":"73","hashOfConfig":"44"},{"size":2509,"mtime":1608352647053,"results":"74","hashOfConfig":"44"},{"size":4168,"mtime":1608568773852,"results":"75","hashOfConfig":"44"},{"size":833,"mtime":1608569564085,"results":"76","hashOfConfig":"44"},{"size":3201,"mtime":1608429847652,"results":"77","hashOfConfig":"44"},{"size":3849,"mtime":1608429947063,"results":"78","hashOfConfig":"44"},{"size":534,"mtime":1608567500155,"results":"79","hashOfConfig":"44"},{"size":744,"mtime":1608430686427,"results":"80","hashOfConfig":"44"},{"size":4753,"mtime":1608697401923,"results":"81","hashOfConfig":"44"},{"size":2893,"mtime":1608674380737,"results":"82","hashOfConfig":"44"},{"size":369,"mtime":1608674276612,"results":"83","hashOfConfig":"44"},{"size":525,"mtime":1608697174197,"results":"84","hashOfConfig":"44"},{"size":1897,"mtime":1608698822542,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"gju65z",{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js",[],["193","194"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js",["195","196"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js",["197","198","199"],"import { store } from '../State/store';\r\nimport { ArchiveURL } from './urls';\r\nimport { \r\n\tColorfromGame, \r\n\tCreateURL, \r\n\tGetURL, \r\n\tIDfromURL, \r\n\tResultFromGame, \r\n\tTimeControlFromGame, \r\n\tTimeClassFromGame,\r\n\tDateFromGameSeconds,\r\n\tgetOpponentfromGame } from './helpers';\r\nimport { Analyze, AnalyzeGame } from '../BusinessLogic/Analyze';\r\n\r\nexport const timeout = (ms = 5000) => { \r\n\treturn new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const initializeState = () => {\r\n\t// check if less then 100 games\r\n\tconst maxGamesAllowed = store.getState().maxGamesAllowed;\r\n\r\n\tif (store.getState().Games.length < maxGamesAllowed) {\r\n\t\t// console.log(\"hellow?\")\r\n\r\n        GetURL(CreateURL(ArchiveURL, store.getState().UserName))\r\n\t\t\t.then((res, err) => {\r\n\t\t\t\t\t// primitive error handling\r\n\t\t\t\t\tif(err) { console.warn(err); return; }\r\n\t\t\t\t\telse if(res.data.status === 404) return;\r\n\r\n\t\t\t\t\tstore.getState().setGameArchives(res.data.archives)\t\t// think a synchronous call to update Archives\r\n\t\t\t\t\tconsole.log(store.getState().GameArchive)\t\t\t\t// prints out updated state\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn GameIDfromArchive();\r\n\t\t\t})\r\n\t\t\t.then(async (res) => {\r\n\r\n\t\t\t\tfor(let i = 0; i < maxGamesAllowed; i++) {\r\n\t\t\t\t\tAnalyzeGame(store.getState().Games[i]);\r\n\t\t\t\t\tconsole.log(`Request data Game ${i}`)\r\n\t\t\t\t\tawait timeout(1000);\r\n\t\t\t\t}\r\n\t\t\t}).then(() => {\r\n\t\t\t\tconst tacticsObj = {\r\n\t\t\t\t\tfork: store.getState().fork,\r\n\t\t\t\t\tmate: store.getState().mate,\r\n\t\t\t\t\thanging: store.getState().hanging,\r\n\t\t\t\t\trelativePin: store.getState().relativePin,\r\n\t\t\t\t\tabsolutePin: store.getState().absolutePin,\r\n\t\t\t\t\ttrapped: store.getState().trapped,\r\n\t\t\t\t\tunderdefended: store.getState().underdefended,\r\n\t\t\t\t\twinningExchange: store.getState().winningExchange,\r\n\t\t\t\t\tskewer: store.getState().skewer,\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// console.log(JSON.stringify(tacticsObj, null, '  '))\r\n\t\t\t\tstore.getState().setLoadingFalse();\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * @description Adds the GameIDs to GameID array from the archive\r\n * @returns {void} A promise  \r\n * @todo don't hardcode # of games\r\n */\r\nconst GameIDfromArchive = async () => {\r\n\t\t// console.log(\"Current Store: \", store.getState())\r\n\t\tconst maxGamesAllowed = store.getState().maxGamesAllowed;\r\n\t\tlet archives = store.getState().GameArchive;\r\n\t\tlet i = archives.length - 1;\r\n\t\tlet gamenum = store.getState().Games.length;\r\n\t\tlet games;\r\n\r\n\t\t// TESTS\r\n\t\t// 1. <100 games\r\n\t\t// 2. >100 games\r\n\t\t// 3. multiple archives\r\n\t\t// (async _ => {\r\n\t\t\twhile(archives[i] && i >= 0 && gamenum <= maxGamesAllowed) { \r\n\t\t\t\tconsole.log(\"GM top loop: \", gamenum)\t\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(archives[i])\r\n\r\n\t\t\t\tawait GetURL(archives[i])\r\n\t\t\t\t\t.then(res => {\r\n\t\t\t\t\t\t//  console.log(res.data)\r\n\t\t\t\t\t\tgames = res.data.games\r\n\r\n\t\t\t\t\t\t//  console.log(games.length)\r\n\r\n\t\t\t\t\t\tfor(let j = games.length - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\t// validation\r\n\t\t\t\t\t\t\tif(gamenum > maxGamesAllowed) {\tbreak;\t}\t// break if exceed limit. In future not hardcode\r\n\t\t\t\t\t\t\tif(games[j].rules !== \"chess\") { continue; } // check if rules are chess or variant\r\n\r\n\t\t\t\t\t\t\tconst id = IDfromURL(games[j].url);\r\n\t\t\t\t\t\t\tconst color = ColorfromGame(games[j], store.getState().UserName);\r\n\t\t\t\t\t\t\tconst result = ResultFromGame(games[j], color);\r\n\t\t\t\t\t\t\tconst tc = TimeControlFromGame(games[j]);\r\n\t\t\t\t\t\t\tconst tclass = TimeClassFromGame(games[j]);\r\n\t\t\t\t\t\t\tconst date = DateFromGameSeconds(games[j].end_time, true);\r\n\t\t\t\t\t\t\tconst opp = getOpponentfromGame(games[j], color)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (!store.getState().Games.includes(id)) { \t// could implement binarysearch in the future\r\n\t\t\t\t\t\t\t\tstore.getState().AddGame(id, color, result, tc, tclass, date, opp);\r\n\t\t\t\t\t\t\t\tgamenum += 1;\r\n\t\t\t\t\t\t\t\tstore.getState().SetNeedAnalysis();\t// performance optim: only do once\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// console.log(\"GN in loop: \", gamenum)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\ti--;\t\r\n\t\t\t}\r\n\t\t\t// console.log(\"gameids state: \", store.getState().Games)\r\n\r\n\t\t// Analyze();\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js",["200","201","202"],"import axios from \"axios\";\r\n\r\n/**\r\n * @param {string} url the incomplete url\r\n * @param {string | number} replacement the replacement to fill the url\r\n * @returns {string} the completed url\r\n */\r\nexport const CreateURL = (url, replacement) => {\r\n\treturn url.replace(\"{}\", replacement);\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} url The URL to get a response from\r\n * @returns {promise} Promise with requested url\r\n */\r\nexport const GetURL = async (url) => {\r\n\treturn axios.get(url);\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} url The URL with a Game ID in it \r\n * @returns {number} The game id\r\n * @throws Error if too many matches (!= 1)\r\n */\r\nexport const IDfromURL = (url) => {\r\n\tconst id = url.match(/\\d{1,13}/g)\r\n\r\n\tif(id.length !== 1) {\r\n\t\tthrow {\r\n\t\t\tmessage: \"IDfromURL to many matches\",\r\n\t\t\tobj: id\r\n\t\t} \r\n\t}\r\n\r\n\treturn Number(id[0])\r\n}\r\n\r\nexport const getOpponentfromGame = (gameObj, color) => {\r\n\tif(color === \"white\") {\r\n\t\treturn gameObj?.black?.username;\r\n\t}\r\n\r\n\treturn gameObj?.white?.username\r\n}\r\n\r\n/**\r\n * @param {string} username the players username\r\n * @param {object} gameObj The game object of a game\r\n */\r\nexport const ColorfromGame = (gameObj, uname) => {\r\n\tif(uname === gameObj.white.username) {\r\n\t\treturn \"white\";\r\n\t}\r\n\r\n\telse if(uname === gameObj.black.username) {\r\n\t\treturn \"black\";\r\n\t}\r\n\r\n\telse {\r\n\t\tthrow {\r\n\t\t\tmessage: \"Cannot find username in game. Perhaps this is the wrong game ID\",\r\n\t\t\tusername: uname,\r\n\t\t\twhite: gameObj.white.username,\r\n\t\t\tblack: gameObj.black.username\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const TimeControlFromGame = (gameObj) => {\r\n\treturn gameObj.time_control;\r\n}\r\n\r\nexport const TimeClassFromGame = (gameObj) => {\r\n\treturn gameObj.time_class;\r\n}\r\n\r\nconst dateWithTimeZone = (seconds) => {\r\n\tconst date = new Date(1970,0,1);\r\n\t\tdate.setSeconds(seconds)\r\n\t\r\n\tconst timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone\r\n\tif(timeZone === undefined || timeZone === null || !timeZone) {\r\n\t\treturn date;\r\n\t}\r\n\r\n\tconst utcDate = new Date(date.toLocaleString('en-US', { timeZone: \"UTC\" }));\r\n\tconst tzDate = new Date(date.toLocaleString('en-US', { timeZone: timeZone }));\r\n\tconst offset = utcDate.getTime() - tzDate.getTime();\r\n\r\n\tdate.setTime( date.getTime() - offset );\r\n  \r\n\treturn date;\r\n};\r\n\r\nexport const DateFromGameSeconds = (seconds, humanReadable = true) => {\r\n\t\r\n\tconst d = dateWithTimeZone(seconds)\r\n\r\n\tif(humanReadable) {\r\n\t\treturn `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n\t}\r\n\r\n\tconst formatted = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n\r\n\t// console.log(formatted);\r\n\treturn formatted;\r\n\t// return gameObj.end_time;\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} gameObj the game object of a game\r\n * @param {string} color the player's color\r\n */\r\nexport const ResultFromGame = (gameObj, color) => {\r\n\t// console.log(color)\r\n\tif(color !== \"white\" && color !== \"black\") {\r\n\t\tthrow {\r\n\t\t\tmessage: \"Not a valid color\",\r\n\t\t\tcolor: color\r\n\t\t}\r\n\t}\r\n\r\n\treturn gameObj[color].result;\r\n}\r\n\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js",["203"],"import React, { useState } from 'react';\r\nimport { store } from '../State/store';\r\n\r\nconst LoadForm = () => {\r\n    const [uname, setUname] = useState(\"\");\r\n\r\n    <form>\r\n        <input \r\n            type=\"text\" \r\n            value={uname} \r\n            onChange ={(e) => setUname(e.targe.value)} \r\n            placeholder=\"Player Name\" \r\n            name=\"username\"></input>\r\n        <button>Submit</button>\r\n\t</form>\r\n}\r\n\r\nexport default LoadForm;\r\n",["204","205"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js",["206","207","208","209","210"],"import { getGameData, phase, plyPercent, ValidGameID } from './AnalyzeHelpers';\r\nimport { store } from '../State/store';\r\nimport { \r\n    AnalyzeCastle, \r\n    AnalyzeClassification, \r\n    AnalyzeOpenings,\r\n    AnalyzeGamePatterns,\r\n    AnalyzeAllTactics,\r\n    AnalyzeEndgames,\r\n    AddCaps\r\n} from './AnalysisMetrics';\r\n\r\n/**\r\n * @description Analyzes the games\r\n * @param {string|number} id The id of the game to analyze\r\n */\r\nexport const AnalyzeGame = async (game) => {  \r\n    // function input validation\r\n    ValidGameID(game.id);\r\n\r\n    const data = await getGameData(game.id);\r\n    // console.log(\"game: \", game)\r\n\r\n    if(!data) {\r\n        throw {\r\n            message: `Data is undefined for ${game.id}`,\r\n            data: data,\r\n            game: game\r\n        }\r\n        // just get this to request another game\r\n    }\r\n\r\n    AddCaps(data, game);\r\n    AnalyzeCastle(data, game);\r\n    AnalyzeOpenings(data, game);\r\n    AnalyzeClassification(\"blunder\", data,game);\r\n    AnalyzeClassification(\"mistake\", data,game);\r\n    AnalyzeClassification(\"inaccuracy\", data,game);\r\n    AnalyzeGamePatterns(data,game);\r\n    AnalyzeAllTactics(data, game);\r\n\r\n}\r\n\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js",["211","212","213","214","215","216","217","218","219","220","221","222","223"],"import { CreateURL, GetURL } from './helpers';\r\nimport { CorsProxy, GetAnalysisURL, NewAnalysisURL } from './urls'\r\nimport { store } from '../State/store'\r\n\r\n/**\r\n * \r\n * @param {string|number} id The game id\r\n * @returns {promise} The game data\r\n * @todo Need better error handling\r\n */\r\nexport const getGameData = async (id, time = 1) => {\r\n    // function input validation\r\n    ValidGameID(id);\r\n    if(time <= 0 || time >= 5) {\r\n        throw {\r\n            message: \"Invoked getGameData too many times\",\r\n            the_id: id,\r\n            the_time: time\r\n        }\r\n    }\r\n\r\n    return getGameAnalysis(id)\r\n            .then((res) => {\r\n                // console.log(\"Game data: \", res.data)\r\n\r\n                if(!res.data.data) {\r\n                    if(time === 1) {\r\n                        console.log(id);\r\n                        newAnalysis(id);\r\n                        return new Promise((resolve) => {\r\n                            setTimeout(() => { return resolve(getGameData(id,time+1))}, 61000)\r\n                        })\r\n                    }\r\n                    else if (time <= 3) {\r\n                        console.warn(`Tried to retrieve game ${id} ${time} times`)\r\n                        // if(time === 3) { newAnalysis(id); /* try to restart again */ }\r\n                        newAnalysis(id);\r\n                        \r\n                        return new Promise((resolve) => {\r\n                            setTimeout(() => { return resolve(getGameData(id,time+1))}, 61000)\r\n                        })\r\n                    }\r\n                    if (time === 4) {\r\n                        throw {\r\n                            message: `Could not retrieve game data got ${id} after 3 attempts`,\r\n                            response: res.data\r\n                        }\r\n                    }\r\n                }\r\n                // got data values\r\n                else {\r\n                    console.log(`got data for: ${id}`)\r\n                    return res.data.data.analysis;\r\n                }\r\n\r\n            }).catch(err => {\r\n                console.warn(err.message)\r\n            });\r\n}\r\n\r\n/**\r\n * @description Opens window of the analysis report which should\r\n * start the analysis\r\n * @param {string|number} id The game id\r\n * @returns {void}\r\n */\r\nexport const newAnalysis = async ( id ) => {\r\n    ValidGameID(id);\r\n\r\n    return openWindow(CreateURL(NewAnalysisURL, id))\r\n}\r\n\r\n/**\r\n * @param {string} url opens window in new tab and closes tab after 5 seconds\r\n * @returns timer to close window\r\n * @todo add check if tab is null to handle the error\r\n */\r\nexport const openWindow = async ( url ) => {\r\n    if (typeof(url) !== \"string\") {\r\n        throw {\r\n            message: \"URL is not a valid string\",\r\n            type: typeof(url),\r\n            the_url: url\r\n        }\r\n    }\r\n\r\n    const tab = window.open(url, '_blank');\r\n    return setTimeout(() => tab.close(), 15000) // \r\n}\r\n\r\n/**\r\n * @param {number|string} id The id of the game\r\n * @returns {JSON} The json result of the request \r\n * @throws Error if id not a number\r\n */\r\nexport const getGameAnalysis = async ( id ) => {\r\n    // Check if input is valid\r\n    ValidGameID(id);\r\n\r\n    return GetURL(CreateURL(CorsProxy + GetAnalysisURL, id));\r\n}\r\n\r\n/**\r\n * \r\n * @param {number|string} id checks if the GameID is valid\r\n */\r\nexport const ValidGameID = (id) => {\r\n    if (Number(id) === NaN || Number(id) <= 1) {    // I believe 2 is the lowest game id\r\n        throw {\r\n            message: \"ID is not a valid number\",\r\n            type: typeof(id),\r\n            the_id: id\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {number} ply The ply to compare\r\n * @param {array} phaseArr The array of phases\r\n */\r\nexport const phase = (ply, phaseArr) => {\r\n    ply = Number(ply);\r\n    const numPhases = phaseArr.length;\r\n\r\n\r\n    if(ply === NaN || ply < 0) {\r\n        throw {\r\n            message: \"Invalid ply.\",\r\n            ply: ply\r\n        }\r\n    }\r\n\r\n\r\n    if(numPhases === 0 || ply < phaseArr[0]) {\r\n        return \"open\";\r\n    } else if(numPhases === 1 || ply < phaseArr[1]) {\r\n        return \"middle\";\r\n    } \r\n    \r\n    return \"end\";\r\n}\r\n\r\n/**\r\n * \r\n * @param {number} ply The ply to compare\r\n * @param {number} total The total number of ply\r\n */\r\nexport const plyPercent = (ply, total) => {\r\n    ply = Number(ply)\r\n    total = Number(total)\r\n\r\n    if(ply === NaN || total === NaN) {\r\n        throw {\r\n            message: \"Invalid ply or total ply\",\r\n            ply: ply,\r\n            total: total\r\n        }\r\n    } else if(ply < 0 || total < 0) {\r\n        throw {\r\n            message: \"Ply cannot be negative\",\r\n            ply: ply,\r\n            total: total\r\n        }\r\n    }\r\n\r\n    if(total - 1 !== 0) {\r\n        return (ply / (total - 1)) * 100 // total positions includes start so -1\r\n    } \r\n    \r\n    return (ply / total) * 100\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {string} timecontrol The time control\r\n */\r\nexport const totalFromTC = (timecontrol) => {\r\n    return parseInt(timecontrol);\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} timecontrol The time control\r\n */\r\nexport const incFromTC = (timecontrol) => {\r\n    let increment = parseInt(timecontrol.match(/\\+\\d*/g));\r\n        increment = (increment) ? increment : 0;\r\n\r\n    return increment;\r\n}\r\n/**\r\n * \r\n * @param {array} data array of the time for each move\r\n * @param {number} ply The current ply\r\n * @param {string} timecontrol The time control of the game\r\n * @todo check if ply is valid\r\n */\r\nexport const calculateClockTime = (times, ply, timecontrol) => {\r\n    const total = totalFromTC(timecontrol);\r\n    const increment = incFromTC(timecontrol);\r\n\r\n    if(total === NaN || total <= 0 || increment < 0) {\r\n        throw {\r\n            message: \"Invalid time control or increment\",\r\n            total: total,\r\n            increment: increment\r\n        }\r\n    }\r\n\r\n    // if(ply) \r\n\r\n\r\n    let final = total;\r\n    // console.log(final)\r\n    // gives time NOT including the time for ply\r\n    // i.e. calculates time on clock on start of ply\r\n    for(let i = ply % 2; i < ply; i += 2) { \r\n        final = final - times[i] / 10 + increment;\r\n        // console.log(final, times[i] / 10, increment)\r\n    }\r\n\r\n    return final;\r\n} \r\n\r\n\r\nexport const SameTacticType = (actual, user) => {\r\n    const regex = \"\\\\b\" + user + \"\\\\b\";\r\n    const index = actual.toLowerCase().search(new RegExp(regex))\r\n\r\n    // console.log(regex, actual, index)\r\n\r\n    if (index !== -1) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n    // ele.type.toLowerCase().indexOf(new RegExp(\"\\b\" + name + \"\\b\",g)) !== -1\r\n}\r\n\r\n// in major need of a refactoring\r\nexport const UpdateTacticsState = (name, record) => {\r\n    name = name.toLowerCase();\r\n    // console.log(name)\r\n\r\n    if(SameTacticType(name, \"trapped piece\")) { \r\n        record.type.name = \"trapped\";\r\n        store.getState().addTactic(\"trapped\",record); return;\r\n    }\r\n\r\n    if(SameTacticType(name, \"skewer\")) { \r\n        record.type.name = \"skewer\";\r\n        store.getState().addTactic(\"skewer\",record); return;\r\n    }\r\n\r\n    if(SameTacticType(name,\"fork\")) {\r\n        // console.log(\"added fork\", record)\r\n        // console.log(record.type.type)\r\n        // console.log(re)\r\n        record.type.name = \"fork\"; \r\n        store.getState().addTactic(\"fork\", record); return; \r\n    }\r\n\r\n    if(SameTacticType(name,\"mate\") || SameTacticType(record.type.group, \"checkmate\")) { \r\n        record.type.name = \"mate\"; \r\n        store.getState().addTactic(\"mate\", record); return; \r\n    }\r\n    if(SameTacticType(name,\"material left undefended\") || SameTacticType(name, \"undefended material\")) { \r\n        // console.log(\"added hanging\", record)\r\n        record.type.name = \"hanging\";\r\n        store.getState().addTactic(\"hanging\", record); return; \r\n    }\r\n    \r\n\r\n    if(SameTacticType(name, \"under-defended material\")) {\r\n        record.type.name = \"underdefended\";\r\n        store.getState().addTactic(\"underdefended\", record); return;\r\n    }\r\n\r\n    if(SameTacticType(name, \"winning exchange\")) {\r\n        // console.log(\"adding winning exchange\")\r\n        record.type.name = \"winning exchange\";\r\n        store.getState().addTactic(\"winningExchange\", record); return;\r\n    }\r\n\r\n    if(name.includes(\"pin\")) { \r\n        if(record.type.group.includes(\"relative\") || record.type.type.includes(\"relative\")) {\r\n            record.type.name = \"relative pin\";\r\n            store.getState().addTactic(\"relativePin\", record); return; \r\n        }\r\n        record.type.name = \"absolute pin\";\r\n        store.getState().addTactic(\"absolutePin\", record); return; \r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @description Returns the opposite color of parameter\r\n * @param {string} color The initial color\r\n */\r\nexport const oppositeColor = (color) => {\r\n    // console.log(color.toLowerCase())\r\n    if(color.toLowerCase() !== \"white\" && color.toLowerCase() !== \"black\") {\r\n        console.warn({\r\n            message: \"Not a known color\",\r\n            color: color\r\n        })\r\n    }\r\n\r\n    return (color === \"white\") ? \"black\" : \"white\";\r\n}\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js",["224","225"],"import { store } from '../State/store';\r\nimport { phase, plyPercent, calculateClockTime, totalFromTC, SameTacticType, UpdateTacticsState, oppositeColor } from './AnalyzeHelpers';\r\nimport { GetCurrentFen } from './fen';\r\nimport { CreateRecordProto, CreateTacticRecord } from './RecordPrototypes';\r\n\r\nexport const AddCaps = (data, gameObj) => {\r\n    const caps = data?.CAPS?.[gameObj.color]?.all;\r\n    if(caps === undefined) {\r\n        console.warn(`data.CAPS is undefined for ${gameObj.id} ${gameObj.color}`);\r\n        return;\r\n    }\r\n\r\n    store.getState().AddCAPStoGame(gameObj.id, caps)\r\n    // console.log(store.getState().Games)\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} data The returned data object\r\n * @param {object} gameObj The game object\r\n */\r\n\r\nexport const AnalyzeCastle = ( data, gameObj ) => {\r\n\r\n    const record = CreateRecordProto(data, gameObj);\r\n    let plyCastled = data?.castled[gameObj.color];\r\n\r\n    if(plyCastled === undefined || plyCastled === null || !(typeof(plyCastled) === \"number\")) {\r\n        console.warn({\r\n            message: \"Ply castled is undefined (data.castled[gameObj.color])\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            plyCastled: plyCastled\r\n        })\r\n        return;\r\n    }\r\n\r\n    if(plyCastled != -1) { // -1 means did not castle\r\n        plyCastled++;   // correct for TRUE ply (data starts @ 0 when should start at 1)\r\n\r\n        record.castled = true;\r\n        record.ply = plyCastled;\r\n        record.plyPercent = plyPercent(plyCastled, data.totalPositions)\r\n        record.phase = phase(plyCastled, data.gamePhases);\r\n        \r\n        record.fen = GetCurrentFen(data, record.ply, record.id)\r\n    } else {\r\n        record.castled = false;\r\n    }\r\n\r\n    store.getState().addCastled(record);\r\n    // console.log(store.getState().castled);\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {string} type \"inaccuracy, mistake, blunder\"\r\n * @param {object} data the analysis object\r\n * @param {object} gameObj the game object\r\n */\r\nexport const AnalyzeClassification = (type, data, gameObj) => {\r\n    // constants\r\n\tconst allowed = [\"blunder\", \"mistake\", \"inaccuracy\"];\r\n    const p = data?.positions;\r\n    const totalType = data?.tallies?.report?.[gameObj.color]?.[type];\r\n    \r\n    // input validation\r\n    if(!allowed.includes(type)) {\r\n        throw {\r\n            message: \"invalid move type\",\r\n            type: type\r\n        }\r\n    }\r\n\r\n    if(p === undefined || p === null || !p) {\r\n        console.warn({\r\n            message: \"positions is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            p: p\r\n        })\r\n        return;\r\n    }\r\n    if(totalType === undefined || totalType === null || !(typeof(totalType) === \"number\")) {\r\n        console.warn({\r\n            message: \"totalType is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            totalType: totalType\r\n        })\r\n        return;\r\n    }\r\n    \r\n\r\n    let count = 0;\r\n    let i = (p[0].color === gameObj.color) ? 0 : 1;\r\n    const recordProto = CreateRecordProto(data, gameObj);\r\n\r\n    if(totalType !== 0) {\r\n\r\n        while(count < totalType && i <= data.totalPositions - 2) {\r\n            if(p[i].classificationName === type) {\r\n                let record = {...recordProto};\r\n\r\n                // console.log(\"index: \", i, p[i], record)\r\n                record.score = p[i].playedMove.score;\r\n                record.difference = p[i].difference;\r\n                record.scenarios = p[i].scenarios;\r\n\r\n                record.ply = i + 1; // starts @ 0 so increment\r\n                record.plyPercent = plyPercent(record.ply, data.totalPositions)\r\n                record.phase = phase(record.ply, data.gamePhases);\r\n\r\n                record.fen = GetCurrentFen(data, record.ply, record.id)\r\n\r\n                if(data.time) {\r\n                    // console.log(\"id: \", gameObj.id, data)\r\n                    record.timeSpent = data.time.moves[i] / 10;\r\n                    record.timeToThink = calculateClockTime(data.time.moves, i, gameObj.timecontrol);\r\n                    record.timeToThinkPercent = record.timeToThink / totalFromTC(gameObj.timecontrol) * 100\r\n                }\r\n                // **************************** COME BACK AND CHECK THIS\r\n                // record.takeaway = {\r\n                //     type: data.TEP.takeaways[i]?.[0].type, // need to check\r\n                // }\r\n\r\n                // console.log(record);\r\n                store.getState().addMoveType(type, record);\r\n                count++;\r\n            }\r\n            i += 2;\r\n        }\r\n    }\r\n\r\n    // console.log(store.getState()[type])\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} data The returned data object\r\n * @param {object} gameObj The game object\r\n */\r\nexport const AnalyzeOpenings = (data, gameObj) => {\r\n    if(data?.book === undefined) {\r\n        console.warn(`data.book undefined for ${gameObj.id} ${gameObj.color}`)\r\n    }\r\n    if(data?.bookPly === undefined) {\r\n        console.warn(`data.book undefined for ${gameObj.id} ${gameObj.color}`)\r\n    }\r\n\r\n    if(data?.CAPS?.[gameObj.color]?.all === undefined) {\r\n        console.warn(`data.CAPS is undefined for ${gameObj.id} ${gameObj.color}`)\r\n    }\r\n\r\n    const record = CreateRecordProto(data, gameObj);\r\n          record.caps = data?.CAPS?.[gameObj.color]?.all;\r\n          record.name = data?.book?.name;\r\n          record.bookPly = data?.bookPly;\r\n          record.lastBookFEN = GetCurrentFen(data, record.bookPly + 1, gameObj.id)\r\n\r\n    store.getState().addOpening(record);\r\n    // console.log(store.getState().opening);\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {object} data The analysis data\r\n * @param {object} gameObj the game object\r\n */\r\nexport const AnalyzeGamePatterns = (data, gameObj) => {\r\n\r\n    const record = CreateRecordProto(data, gameObj);\r\n    const d = data?.TEP?.moves?.[gameObj.color] // rename to make easier to work with\r\n\r\n    if(d === undefined || d === null || !d) {\r\n        console.warn({\r\n            message: \"data.TEP.moves[gameObj.color] is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color\r\n        })\r\n        return;\r\n    }\r\n\r\n    for(const i in d) {\r\n\r\n        let p = [];\r\n        for(const j of d[i]) {\r\n            let phs = phase(j, data.gamePhases);\r\n\r\n            if(!p.includes(phs)) { p.push(phs); }\r\n            if(p.length === 3) break;   // shortcircuit if already complete\r\n        }\r\n\r\n        record[i] = {\r\n            plyPresent: i.length,\r\n            PercentPresent: plyPercent(i.length, data.totalPositions),\r\n            phase: p\r\n        }\r\n    }\r\n\r\n    store.getState().addGamePattern(record)\r\n    // console.log(store.getState().gamePatterns)\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} data The data analysis object\r\n * @param {object} gameObj The game object\r\n */\r\nexport const AnalyzeAllTactics = (data, gameObj) => {\r\n    const KnownTacticsTypes = [\r\n        \"fork\", \"mate\",\"material left undefended\",\r\n        \"undefended material\",\"pin\",\"trapped piece\",\r\n        \"under-defended material\", \"winning exchange\",\r\n        \"skewer\"\r\n    ];\r\n\r\n    const p = data?.positions;\r\n    const t = data?.TEP?.takeaways;\r\n\r\n    if(p === undefined || p === null || !p) {\r\n        console.warn({\r\n            message: \"positions is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            p: p\r\n        })\r\n        return;\r\n    }\r\n\r\n    if(t === undefined || t === null || !t) {\r\n        console.warn({\r\n            message: \"takeaways is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            t: t\r\n        })\r\n        return;\r\n    }\r\n\r\n    for(let i in t) {\r\n        i = Number(i)\r\n\r\n        for(let j = 0; j < t[i].length; j++) {\r\n            const ele = t[i]?.[j]\r\n\r\n            // console.log(t, t.i, i, typeof(i), ele, ele?.color)\r\n            if (ele?.color === gameObj.color) {\r\n                // console.log(ele.type)\r\n\r\n                // warn if type is not in the known array\r\n                if(!KnownTacticsTypes.some((e) => SameTacticType(ele.type, e))) {\r\n                    console.warn(\"Not included\", ele.type, gameObj.id) // if gets here then it is a new type of tactic\r\n                }\r\n\r\n                else {\r\n                    console.warn(ele.type)\r\n\r\n                    const record = CreateTacticRecord(i-1,ele,p,data,gameObj)\r\n                    // console.log(record);\r\n                    \r\n                    UpdateTacticsState(ele.type, record);\r\n                }\r\n            } \r\n            // NEEDS a BUNCH of refactoring, but at least it works\r\n            else if(oppositeColor(ele?.color) === gameObj.color && ele.class === \"blunders\") {\r\n                // console.log(\"first\")\r\n                if(!t[i + 1] || t[i + 1].length === 0) {\r\n                    // console.log(\"second\")\r\n\r\n                    // validation\r\n                    if(p[i] === undefined) {\r\n                        console.warn({\r\n                            message: \"p[i] doesn't exist\",\r\n                            i: i,\r\n                            id: gameObj.id\r\n                        })\r\n                        return;\r\n                    }\r\n\r\n                    if(p[i].playedMove.moveLan !== ele.eval.pv[0]) {\r\n                        // console.log(\"third\")\r\n                        if(p[i].classificationName === \"blunder\" || p[i].classificationName === \"mistake\") {\r\n                            \r\n                                // console.log(\"final\")\r\n\r\n                                // passed all the checks so now add this \r\n                                // warn if type is not in the known array\r\n                                if(!KnownTacticsTypes.some((e) => SameTacticType(ele.type, e))) {\r\n                                    console.warn(\"Opp: Not included\", ele.type, gameObj.id) // if gets here then it is a new type of tactic\r\n                                }\r\n\r\n                                else {\r\n                                    // console.log(\"fourth\")\r\n                                    console.warn(\"opp: \", ele.type)\r\n                    \r\n                                    const record = CreateTacticRecord(i,ele,p,data,gameObj,\"missed\")\r\n                                    // console.log(record)\r\n\r\n                                    UpdateTacticsState(ele.type, record);\r\n                                } \r\n                        }\r\n        \r\n                    } else { // they are equal so you got the tactic\r\n                        // console.log(\"final\")\r\n\r\n                        // passed all the checks so now add this \r\n                        // warn if type is not in the known array\r\n                        if(!KnownTacticsTypes.some((e) => SameTacticType(ele.type, e))) {\r\n                            console.warn(\"Opp: Not included\", ele.type, gameObj.id) // if gets here then it is a new type of tactic\r\n                        }\r\n\r\n                        else {\r\n                            // console.log(\"fourth\")\r\n                            console.warn(\"opp: \", ele.type)\r\n            \r\n                            const record = CreateTacticRecord(i,ele,p,data,gameObj,\"got\")\r\n                            // console.log(record)\r\n\r\n                            UpdateTacticsState(ele.type, record);\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const AnalyzeEndgames = (data, gameObj) => {\r\n    // const record = CreateRecordProto(data, gameObj);\r\n    const d = data?.TEP?.endgames; // rename to make easier to work with\r\n\r\n    if(d.length > 0) {\r\n        console.warn(d)\r\n    }\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js",["226","227","228","229"],"import React, { useState, useEffect } from 'react'\r\nimport Sunburst_ECO from './Sunburst_ECO'\r\nimport { store } from '../../State/store'\r\nimport Barchart_Openings from './Barchart_Openings'\r\n\r\n\r\nexport const Opening_Data = ({ type, width, height }) => {\r\n    // const defaultState = [{name:\"White\", children:[]}, {name:\"Black\",children:[]}]\r\n\r\n    const data = store(state => state.opening)\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [white, setWhite] = useState([])\r\n    const [black, setBlack] = useState([])\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const w = {};\r\n        const b = {};\r\n\r\n        // console.log(data)\r\n        data.filter((obj) => obj.color.toLowerCase() === \"white\").map((e, i, arr) => {\r\n            if(w?.[e.eco]) {\r\n                w[e.eco].value += 1\r\n            } else {\r\n                w[e.eco] = {\r\n                    name: e.eco,\r\n                    value: 1,\r\n                    description: e.name,\r\n                    total: arr.length,\r\n                    won: 0,\r\n                    loss: 0,\r\n                }\r\n            }\r\n\r\n            if(e.won) w[e.eco].won += 1;\r\n            else w[e.eco].loss += 1\r\n        })\r\n\r\n        data.filter((obj) => obj.color.toLowerCase() === \"black\").map((e, i, arr) => {\r\n            // console.log(this)\r\n            if(b?.[e.eco]) {\r\n                b[e.eco].value += 1\r\n            } else {\r\n                b[e.eco] = {\r\n                    name: e.eco,\r\n                    value: 1,\r\n                    description: e.name,\r\n                    total: arr.length,\r\n                    won: 0,\r\n                    loss: 0\r\n                }\r\n            }\r\n\r\n            if(e.won) b[e.eco].won += 1;\r\n            else b[e.eco].loss += 1\r\n        })\r\n\r\n        setWhite(() => Object.values(w).sort((a, b) => b.value - a.value))\r\n        setBlack(() => Object.values(b).sort((a, b) => a.value - b.value))\r\n        setLoading(() => false)\r\n    }, [data])\r\n\r\n\r\n    if(!loading) {\r\n        if(type.toLowerCase() === \"sunburst\") {\r\n            return (\r\n                <Sunburst_ECO white={white} black={black} width={width} height={height} />\r\n            )\r\n        } \r\n        else if(type.toLowerCase() === \"bar\" || type.toLowerCase() === 'barchart') {\r\n            return (\r\n                <Barchart_Openings white={white} black={black} width={width} height={height} />\r\n            )\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport default Opening_Data;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js",["230","231"],"import React, { memo } from 'react'\r\nimport { ResponsiveSunburst, Sunburst } from '@nivo/sunburst'\r\nimport { useTheme } from '@nivo/core'\r\n\r\nconst Sunburst_ECO = ({white, black, width, height}) => {\r\n    return (\r\n        <Sunburst\r\n            data={\r\n                {\r\n                    name: \"Openings\",\r\n                    children: [\r\n                        {\r\n                            name: \"White\", \r\n                            color:\"#FFFFFF\", \r\n                            children:white, \r\n                            description: \"White\", \r\n                            total:white.reduce((a,b) => (a+b.value), 0), \r\n                            won:white.reduce((a,b) => (a+b.won), 0),\r\n                            loss:white.reduce((a,b) => (a+b.loss), 0)\r\n                        },\r\n                        {\r\n                            name: \"Black\", \r\n                            color:\"#000000\", \r\n                            children:black, \r\n                            description: \"Black\", \r\n                            total:black.reduce((a,b)=> (a+b.value), 0), \r\n                            won:black.reduce((a,b) => (a+b.won), 0),\r\n                            loss:black.reduce((a,b) => (a+b.loss), 0)\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n            id=\"name\"\r\n            value=\"value\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 50, right: 130, bottom: 80, left: 60 }}\r\n            cornerRadius={4}\r\n            borderWidth={2}\r\n            colors={({ id }) => pickWhiteBlack(id)}\r\n            childColor={() => pickCustomPalette(customPalette2)}\r\n            animate={false}\r\n            motionConfig=\"gentle\"\r\n            isInteractive={true}\r\n            tooltip={CustomTooltip}\r\n            layers={['sliceLabels', 'slices']}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(Sunburst_ECO);\r\n\r\nconst customPalette = [\"#E8C1A0\",\"#F47560\",\"#F1E15B\",\"#E8A838\",\"#61CDBB\",\"#97E3D5\"]\r\nconst customPalette2 = [\"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\", \"#fb9a99\", \"#e31a1c\", \"#fdbf6f\", \"#ff7f00\", \"#cab2d6\", \"#6a3d9a\", \"#ffff99\", \"#b15928\"]\r\n\r\nconst pickCustomPalette = (palette) => {\r\n    const i = Math.floor(Math.random()*palette.length)\r\n    const color = palette[i]\r\n    // console.log(i, color)\r\n\r\n    return color;\r\n}\r\n\r\nconst pickWhiteBlack = (id) => {\r\n    if(id === \"White\") { \r\n        return \"#fff1d9\" \r\n    }\r\n\r\n    return \"#000000\" \r\n}\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    const theme = useTheme()\r\n    // console.log(nameLookUp)\r\n    return (\r\n        <div style={{ ...theme.tooltip.container}}>\r\n            <strong>Name:</strong> {data.description} <br />\r\n            <strong>ECO:</strong> {id} <br />\r\n            <strong>Played:</strong> {value} ({(value / data.total * 100).toFixed(1)}%) <br />\r\n            <strong>Won:</strong> {data.won}   <br />\r\n            <strong>Lost:</strong> {data.loss}\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js",["232","233","234","235"],"import React, { useState, useEffect } from 'react'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    // console.log(nameLookUp)\r\n    return (\r\n        <div style={{width: '300px',maxHeight:'200px'}}>\r\n            <strong>ECO:</strong> {data.eco} <br />\r\n            <strong>Name:</strong>\r\n                {data.name[0]}\r\n            <br />\r\n            <strong>Won:</strong> {data.Won || 0}   <br />\r\n            <strong>Lost:</strong> {data.Lost || 0}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst Barchart_Openings = ({ white, black, width, height }) => {\r\n    \r\n    const [loading, setLoading] = useState(true)\r\n    const [data, setData] = useState({})\r\n    const [max, setMax] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const d = {}\r\n\r\n        white.map((e) => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += e.won || 0;\r\n                d[o].Lost += e.loss || 0;\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description);\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:e.won || 0, Lost:e.loss || 0}\r\n            }\r\n        })\r\n\r\n        black.map((e) => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += (e.won || 0);\r\n                d[o].Lost += (e.loss || 0);\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description)\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:(e.won || 0), Lost:(e.loss || 0)}\r\n            }\r\n        })\r\n        \r\n        const final = Object.values(d)\r\n        let maxValue = max;\r\n        final.map((e) => {\r\n            if((e.Won || 0) + (e.Lost || 0) > maxValue)  {\r\n                maxValue = (e.Won || 0) + (e.Lost || 0);\r\n            }\r\n        })\r\n        \r\n        // console.log(maxValue)\r\n        // console.log(d)\r\n        setData(() => Object.values(d))\r\n        setMax(() => maxValue)\r\n\r\n        // console.log(Object.values(d))\r\n        setLoading(() => false)\r\n    },[]);\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics vs. Game Phases\r\n            </text>\r\n        )\r\n    } \r\n\r\n    if(!loading) {\r\n        return (\r\n            <Bar\r\n                data={data.sort((a, b) => b.Won === a.Won ? b.Won + b.Lost - (a.Won + a.Lost) : b.Won - a.Won)}\r\n                width={width}\r\n                height={height}\r\n                keys={[ 'Won', 'Lost']}\r\n                indexBy=\"eco\"\r\n                margin={{ top: 50, right: (width > 600) ? 130 : 80, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                valueScale={{ type: 'linear' }}\r\n                indexScale={{ type: 'band', round: true }}\r\n                colors={{ scheme: 'nivo' }}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    // tickPadding: 5,\r\n                    tickRotation: -30,\r\n                    legend: 'Openings',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 40\r\n                }}\r\n                enableGridX\r\n                layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n                axisLeft={{\r\n                    tickValues:[...Array(max + 1).keys()],\r\n                    legend: 'Count',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -30\r\n                }}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: '#000000', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                tooltip={CustomTooltip}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                animate={false}\r\n            />\r\n        )\r\n    } \r\n    \r\n    return null\r\n \r\n}\r\n\r\nexport default Barchart_Openings;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js",["236","237"],"import { Pie } from '@nivo/pie'\r\n\r\nconst PieChart = ({ data, width, height, marginDef = false }) => {\r\n    const margin = marginDef || { top: 40, right: 80, bottom: 80, left: (width < 520) ? 65 : 0 }\r\n\r\n    const theme = { fontSize: \"16px\", fontWeight: 'bold'  }\r\n    const borderColor = { from: 'color', modifiers: [ [ 'darker', '1.4' ] ] }\r\n    const patterns = [\r\n        {\r\n            id: 'dots',\r\n            type: 'patternDots',\r\n            background: 'inherit',\r\n            color: 'rgba(255, 255, 255, 0.3)',\r\n            size: 4,\r\n            padding: 1,\r\n            stagger: true\r\n        },\r\n        {\r\n            id: 'lines',\r\n            type: 'patternLines',\r\n            background: 'inherit',\r\n            color: 'rgba(255, 255, 255, 0.3)',\r\n            rotation: -45,\r\n            lineWidth: 6,\r\n            spacing: 10\r\n        }\r\n    ]\r\n\r\n    const legend = [\r\n        {\r\n            anchor: 'right',\r\n            direction: 'column',\r\n            justify: false,\r\n            translateX: (width > 600) ? (600 - width) / 3 + 65 : 65,\r\n            translateY: 0,\r\n            itemsSpacing: 5,\r\n            itemWidth: 100,\r\n            itemHeight: 18,\r\n            itemTextColor: '#999',\r\n            itemDirection: 'left-to-right',\r\n            itemOpacity: 1,\r\n            symbolSize: 18,\r\n            symbolShape: 'square',\r\n            effects: [\r\n                {\r\n                    on: 'hover',\r\n                    style: {\r\n                        itemTextColor: '#000',\r\n                        backgroundColor: '#FFFF00'\r\n                    }\r\n                }\r\n            ]\r\n        }]\r\n\r\n    // console.log(width, height)\r\n\r\n    return (\r\n        <Pie \r\n            data={data}\r\n            width={width}\r\n            height={height}\r\n            margin={margin}\r\n            padAngle={3}\r\n            cornerRadius={2}\r\n            innerRadius={0.5}\r\n            sortByValue={true}\r\n            enableRadialLabels={true}\r\n            radialLabelsSkipAngle={10}\r\n            radialLabelsLinkHorizontalLength={8}\r\n            radialLabelsLinkDiagonalLength={24}\r\n            sliceLabelsSkipAngle={10}\r\n            sliceLabelsSkipAngle={10}\r\n            borderWidth={1}\r\n            borderColor=\"#a17a5b\"\r\n            theme={theme}\r\n            borderColor={borderColor}\r\n            defs={patterns}\r\n            fill={\r\n                Object.keys(data).map((e) => {\r\n                    // console.log(e)\r\n                    return {match: { id: data[e].id}, id: (e % 2 === 0) ? 'lines' : 'dots'}\r\n                })\r\n            }\r\n            legends={(width > 550) ? legend : false }\r\n\t\t\tanimate={false}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport default PieChart;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js",["238"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport Pie from '../ResponsivePie'\r\n\r\nconst Pie_Results = ({ width, height }) => {\r\n\r\n    const defaultState = {\"win\":0,\"draw\":0,\"loss\":0}\r\n    const data = store(state => state.Games)\r\n    const [loading, setLoading] = useState(true)\r\n    const [reason, setReason] = useState(defaultState)\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        setReason(() => defaultState)\r\n\r\n        for(let i = 0; i < data.length; i++) {\r\n            const type = data[i].result;\r\n            // console.log(type)\r\n\r\n            if(type === \"win\") {\r\n                setReason((e) => {\r\n                    return {...e, \"win\": e.win + 1}\r\n                })\r\n            } else if (type === \"draw\") {\r\n                setReason((e) => {\r\n                    return {...e, \"draw\": e.draw + 1}\r\n                })   \r\n            } else {\r\n                setReason((e) => {\r\n                    return {...e, \"loss\": e.loss + 1}\r\n                })\r\n            }\r\n        }\r\n\r\n        setLoading(() => false)\r\n        // console.log(data, reason)\r\n    }, [data]);\r\n\r\n    if(!loading) {\r\n        const data = Object.keys(reason).map((e) => { \r\n            return {id: e, label: e, value: reason[e]}\r\n        })\r\n        // console.log(data)\r\n\r\n        return (\r\n            <Pie data={data} width={width} height={height} />\r\n        )\r\n    }\r\n\r\n    return null; // default return\r\n}\r\n\r\nexport default Pie_Results;\r\n\r\n\r\n/*\r\n\r\n            <ResponsivePie \r\n                data={ data }\r\n                margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n                padAngle={3}\r\n                cornerRadius={2}\r\n                innerRadius={0.5}\r\n                sortByValue={true}\r\n                enableRadialLabels={true}\r\n                radialLabelsSkipAngle={10}\r\n                radialLabelsLinkHorizontalLength={8}\r\n                sliceLabelsSkipAngle={10}\r\n                sliceLabelsSkipAngle={10}\r\n                borderWidth={1}\r\n                borderColor=\"#a17a5b\"\r\n                theme={{\r\n                    fontSize: \"16px\",\r\n                    fontWeight: 'bold'\r\n                }}\r\n                borderColor={{ from: 'color', modifiers: [ [ 'darker', '1.4' ] ] }}\r\n                defs={[\r\n                    {\r\n                        id: 'dots',\r\n                        type: 'patternDots',\r\n                        background: 'inherit',\r\n                        color: 'rgba(255, 255, 255, 0.3)',\r\n                        size: 4,\r\n                        padding: 1,\r\n                        stagger: true\r\n                    },\r\n                    {\r\n                        id: 'lines',\r\n                        type: 'patternLines',\r\n                        background: 'inherit',\r\n                        color: 'rgba(255, 255, 255, 0.3)',\r\n                        rotation: -45,\r\n                        lineWidth: 6,\r\n                        spacing: 10\r\n                    }\r\n                ]}\r\n                fill={\r\n                    Object.keys(data).map((e) => {\r\n                        console.log(e)\r\n                        return {match: { id: data[e].id}, id: (e % 2 === 0) ? 'lines' : 'dots'}\r\n                    })\r\n                }\r\n                legends={[\r\n                    {\r\n                        anchor: 'right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 65,\r\n                        translateY: 0,\r\n                        itemsSpacing: 5,\r\n                        itemWidth: 100,\r\n                        itemHeight: 18,\r\n                        itemTextColor: '#999',\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 1,\r\n                        symbolSize: 18,\r\n                        symbolShape: 'square',\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemTextColor: '#000',\r\n                                    backgroundColor: '#FFFF00'\r\n                                }\r\n                            }\r\n                        ]\r\n                    }]}\r\n            />\r\n*/","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js",["239","240"],"import React from 'react'\r\nimport  { ResponsiveScatterPlot, ScatterPlot } from '@nivo/scatterplot'\r\n\r\nconst Scatter = ({ data, width, height }) => {\r\n\tconst margin = { top: 60, right: 140, bottom: 70, left: 90 };\r\n\tconst xScale = { type: \"time\", format: \"%m/%d/%Y %H:%M:%S\", precision: \"minute\" }\r\n\tconst yScale = { type: \"linear\", min: 0, max: 100 }\r\n\tconst axisBottom = {\r\n\t\torient: \"bottom\",\r\n\t\ttickSize: 5,\r\n\t\ttickPadding: 5,\r\n\t\ttickRotation: 0,\r\n\t\tformat: \"%b %d\",\r\n\t\ttickValues: 5,\r\n\t}\r\n\tconst axisLeft = {\r\n\t\torient: \"left\",\r\n\t\ttickSize: 5,\r\n\t\ttickPadding: 5,\r\n\t\ttickRotation: 0,\r\n\t\tlegend: \"CAPS Score\",\r\n\t\tlegendPosition: \"middle\",\r\n\t\tlegendOffset: -60,\r\n\t}\r\n\tconst legends = [\r\n\t\t{\r\n\t\t\tanchor: \"bottom-right\",\r\n\t\t\tdirection: \"column\",\r\n\t\t\tjustify: false,\r\n\t\t\ttranslateX: 130,\r\n\t\t\ttranslateY: 0,\r\n\t\t\titemWidth: 100,\r\n\t\t\titemHeight: 12,\r\n\t\t\titemsSpacing: 5,\r\n\t\t\titemDirection: \"left-to-right\",\r\n\t\t\tsymbolSize: 12,\r\n\t\t\tsymbolShape: \"circle\",\r\n\t\t\teffects: [\r\n\t\t\t{\r\n\t\t\t\ton: \"hover\",\r\n\t\t\t\tstyle: {\r\n\t\t\t\titemOpacity: 1,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t]\r\n\r\n  \treturn (\r\n\t\t<ScatterPlot\r\n\t\t\tdata={data}\r\n\t\t\twidth={width}\r\n\t\t\theight={height}\r\n\t\t\tmargin={margin}\r\n\t\t\txScale={xScale}\r\n\t\t\txFormat=\"time:%Y-%m-%d\"\r\n\t\t\tyScale={yScale}\r\n\t\t\tblendMode=\"normal\"\r\n\t\t\tcolors={{ scheme: 'nivo' }}\r\n\t\t\taxisTop={null}\r\n\t\t\taxisRight={null}\r\n\t\t\taxisBottom={axisBottom}\r\n\t\t\taxisLeft={axisLeft}\r\n\t\t\tlegends={legends}\r\n\t\t\tanimate={false}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default Scatter;\r\n\r\n\r\n{\r\n    /* <ScatterChart width={600} height={400}>\r\n  <CartesianGrid strokeDasharray=\"3 3\" />\r\n  <YAxis type=\"number\" dataKey=\"CAPS\" name=\"CAPS\"/>\r\n  <XAxis type=\"number\" domain={[\"dataMin\",\"dataMax\"]} dataKey=\"date\" name=\"Date\"/>\r\n  <Tooltip />\r\n  <Scatter name=\"White\" data={White} r={7} stroke=\"#000000\" legendType=\"circle\" fill=\"e5e4e2\"/>\r\n  <Scatter name=\"Black\" data={Black} fill= \"#33475b\" />\r\n  <Legend />\r\n  </ScatterChart> */\r\n  }\r\n  \r\n  // useEffect(() => {\r\n  //   setWhite(() => [])\r\n  //   setBlack(() => [])\r\n  //   for(let i = 0; i < data.length; i++) {\r\n  //     // console.log(i)\r\n  //     if(data[i].color === \"white\") {\r\n  //       setWhite((arr) => [...arr, data[i]])\r\n  //       console.log(White, data[i])\r\n  //     }\r\n  //     else {\r\n  //       setBlack((arr) => [...arr, data[i]])\r\n  //       console.log(Black, data[i])\r\n  //     }\r\n  //   }\r\n  //   console.log(White)\r\n  //   console.log(Black)\r\n  \r\n  // },[]);\r\n  ","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js",["241","242","243"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport { ResponsiveBar, Bar } from '@nivo/bar'\r\n\r\nconst Barchart_Tactics = ({ width, height }) => {\r\n\r\n    const tactics = store((state) => {\r\n        return {\r\n            \"Win the Exchange\":state.winningExchange,\r\n            \"Underdefended Piece\":state.underdefended,\r\n            \"Trapped piece\":state.trapped,\r\n            \"Hanging Piece\":state.hanging,\r\n            \"Relative Pin\":state.relativePin,\r\n            \"Absolute Pin\":state.absolutePin,\r\n            Skewer:state.skewer,\r\n            Fork:state.fork,\r\n            \"Mate\":state.mate,\r\n        }\r\n    })\r\n\r\n    const [the_data, setThe_data] = useState([])\r\n    const [max, setMax] = useState(0)\r\n\r\n    \r\n    useEffect(() => {\r\n        setThe_data(() => [])\r\n\r\n        const d = Object.keys(tactics).map((e) => {\r\n            return {\r\n                \"tactic\": e,\r\n                \"Blundered\": tactics[e].filter((obj) => obj.class === \"blunders\").length || null,\r\n                \"Missed\": tactics[e].filter((obj) => obj.class === \"missed\").length || null,\r\n                \"Got\": tactics[e].filter((obj) => obj.class === \"got\").length || null\r\n            }\r\n        })\r\n        d.sort((a, b) => {\r\n            const result =  ((b.Blundered || 0) + (b.Missed || 0) + (b.Got || 0)) - ((a.Blundered || 0) + (a.Missed || 0) + (a.Got || 0))\r\n            // console.log(result)\r\n            return result\r\n        })\r\n        // console.log(d)\r\n\r\n        setMax(() => d[0].Blundered + d[0].Missed + d[0].Got)\r\n        setThe_data(() => d)\r\n\r\n    }, [])\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics by Category\r\n            </text>\r\n        )\r\n    } \r\n\r\n    return (\r\n        <Bar\r\n            data={\r\n                the_data.filter(obj => ((obj.Blundered || 0) + (obj.Missed || 0) + (obj.Got || 0) !== 0))\r\n            }\r\n            keys={['Blundered','Missed', 'Got']}\r\n            indexBy=\"tactic\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 50, right: 130, bottom: 80, left: 60 }}\r\n            // groupMode=\"grouped\"\r\n            axisLeft={{\r\n                tickValues: 5,\r\n                legend: 'Count',\r\n                legendPosition: 'middle',\r\n                legendOffset: -30,\r\n            }}\r\n            axisBottom={{\r\n                tickSize: 8,\r\n                tickPadding: 5,\r\n                tickRotation: -20,\r\n                legend: 'Tactic',\r\n                legendPosition: 'middle',\r\n                legendOffset: 70\r\n            }}\r\n            labelSkipHeight={10}\r\n            padding={0.25}\r\n            enableGridX\r\n            layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Barchart_Tactics","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js",["244","245","246"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport { ResponsiveBar, Bar } from '@nivo/bar'\r\n\r\nconst Barchart_TacticsPhases = ({ width, height }) => {\r\n\r\n    const [the_data, setThe_data] = useState([])\r\n    const [the_keys, setKeys] = useState([])\r\n\r\n    const tactics = store((state) => {\r\n        return {\r\n            \"Win the Exchange\":state.winningExchange,\r\n            \"Underdefended Piece\":state.underdefended,\r\n            \"Trapped piece\":state.trapped,\r\n            \"Hanging Piece\":state.hanging,\r\n            \"Relative Pin\":state.relativePin,\r\n            \"Absolute Pin\":state.absolutePin,\r\n            Skewer:state.skewer,\r\n            Fork:state.fork,\r\n            \"Mate\":state.mate,\r\n        }\r\n    })\r\n\r\n    \r\n    useEffect(() => {\r\n        const d = [{phase: \"Opening\"}, {phase: \"Middlegame\"}, {phase: \"Endgame\"}];\r\n        const k = [] \r\n\r\n        Object.keys(tactics).map((e) => {\r\n            const opening = tactics[e].filter((obj) => obj.phase === \"open\").length\r\n            const middle = tactics[e].filter((obj) => obj.phase === \"middle\").length\r\n            const end = tactics[e].filter((obj) => obj.phase === \"end\").length\r\n\r\n            d[0][e] = opening\r\n            d[1][e] = middle\r\n            d[2][e] = end\r\n\r\n            if(opening + middle + end !== 0) k.push(e)\r\n        })\r\n\r\n        // console.log(d)\r\n\r\n        setThe_data(() => d)\r\n        setKeys(() => k)\r\n\r\n    }, [])\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics vs. Game Phases\r\n            </text>\r\n        )\r\n    } \r\n    // console.log(the_data)\r\n    return (\r\n        <Bar\r\n            data={\r\n                the_data\r\n            }\r\n            keys={the_keys}\r\n            indexBy=\"phase\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 25, right: 160, bottom: 80, left: 30 }}\r\n            colors={{ scheme: 'set1' }}\r\n            // groupMode=\"grouped\"\r\n            layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n            axisBottom={{\r\n                tickSize: 8,\r\n                tickPadding: 5,\r\n                // tickRotation: -20,\r\n                legend: 'Tactic',\r\n                legendPosition: 'middle',\r\n                legendOffset: 50\r\n            }}\r\n            labelSkipHeight={20}\r\n            padding={0.25}\r\n            enableGridX\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Barchart_TacticsPhases","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js",["247","248","249"],"import React, {useState, useEffect} from 'react'\r\nimport { store } from \"../State/store\"\r\nimport DataGrid from 'react-data-grid'\r\nimport 'react-data-grid/dist/react-data-grid.css'\r\nimport { DateFromGameSeconds } from '../BusinessLogic/helpers'\r\nimport Table from './Table'\r\n\r\nconst TacticsTable = () => {\r\n\r\n    const [rows, setRows] = useState([])\r\n    const tactics = store((state) => {\r\n        return [\r\n            ...state.winningExchange,\r\n            ...state.underdefended,\r\n            ...state.trapped,\r\n            ...state.hanging,\r\n            ...state.relativePin,\r\n            ...state.absolutePin,\r\n            ...state.skewer,\r\n            ...state.fork,\r\n            ...state.mate,\r\n        ]\r\n    })\r\n\r\n    useEffect(() => {\r\n        // console.log(tactics)\r\n        const t = tactics.map((e, i) => {\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                name: e.type.name,\r\n                phase: e.phase,\r\n                move: Math.ceil(e.ply / 2),\r\n                ply: e.ply,\r\n                timeLeft: e?.timeToThink?.toFixed(1),\r\n                timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                result: e.won ? \"Won\" : \"Lost\",\r\n                eco:e.eco,\r\n                color:e.color,\r\n                opponent: e.opponent,\r\n                class: e.class,\r\n                caps: e.CAPS.toFixed(1)\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table data={rows} />\r\n    )\r\n\r\n}\r\n\r\nexport default TacticsTable","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js",["250"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n    {field: 'blunders', headerName: 'Blunders'},\r\n    {field: 'mistakes', headerName: 'Mistakes'},\r\n    {field: 'inaccuracies', headerName: 'Inaccuracies'}\r\n]\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const Games = store(state => state.Games)\r\n    const Openings = store(state => state.opening)\r\n    const blunders = store(state => state.blunder)\r\n    const mistakes = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        // console.log(Openings)\r\n        const t = Games.map((e, i) => {\r\n            // console.log(Openings.filter(obj => obj.id === e.id))\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                result: e.result === \"win\" ? \"Won\" : \"Lost\",\r\n                opponent: e.opponent,\r\n                color:e.color,\r\n                eco: Openings.filter(obj => obj.id === e.id)?.[0]?.eco,\r\n                caps: e?.CAPS?.toFixed(1),\r\n                blunders: blunders.filter(obj => obj.id === e.id).length,\r\n                mistakes: mistakes.filter(obj => obj.id === e.id).length,\r\n                inaccuracies: inaccuracy.filter(obj => obj.id === e.id).length\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [Games])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\nexport default Table_Game","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js",["251"],"import './table.css'\r\nimport { useState } from 'react'\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nexport const renderLink = (params) => {\r\n    // console.log(params);\r\n    return `<a href=\"https://www.chess.com/analysis/game/live/${params.value}\" target=\"_blank\">${params.value}</a>`\r\n}\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'name', filter: true, width: 120},\r\n    {field: 'class',filter: true,},\r\n    {field: 'phase',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'result',filter: true,},\r\n    {field: 'move'},\r\n    {field: 'ply'},\r\n    {field: 'timeLeft', headerName: 'Time Left (s)'},\r\n    {field: 'timeLeftPercent', headerName: 'Time Left (%)'},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n]\r\n\r\nconst defaultCol = {\r\n    sortable: true,\r\n    // floatingFilter: true,\r\n    resizable: true,\r\n    width: 100,\r\n    cellStyle: {\r\n        // border: '1px solid',\r\n        border: 'solid',\r\n        borderTopWidth: '0.5px',\r\n        borderRightWidth: '0.5px',\r\n        borderLeftWidth: '0.5px',\r\n        borderBottomWidth: '0.5px',\r\n        textAlign: \"center\"\r\n    },\r\n    cellClass: \"grid-cell-centered\"\r\n}\r\n\r\n\r\n\r\nconst Table = ({ data, customCol, width = '100%', height = 400, file = \"export.csv\"}) => {\r\n    \r\n    const [gridAPI, setGridAPI] = useState()\r\n\r\n    const gridOptions = {\r\n        defaultColDef: defaultCol,\r\n        // onFirstDataRendered: onFirstDataRendered,\r\n        columnDefs: customCol || columns,\r\n        onGridReady: (params) => setGridAPI(() => params.api)\r\n    }\r\n\r\n    function onBtnExportDataAsCsv(gridAPI, file = \"export.csv\") {\r\n        const params = {\r\n            allColumns: true,\r\n            fileName: file\r\n        }\r\n        gridAPI.exportDataAsCsv(params);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button className=\"export-data\" onClick={() => onBtnExportDataAsCsv(gridAPI, file)}>Export (CSV)</button>\r\n\r\n            <div className=\"ag-theme-balham\" style={{ height: height, maxWidth: width}}>\r\n                <AgGridReact rowData={data} gridOptions={gridOptions}>\r\n                </AgGridReact>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js",["252","253","254","255"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'won',headerName:\"Won\",},\r\n    {field: 'lost',headerName:\"Lost\",},\r\n    // {field: 'count',headerName:\"Total\",filter: true,},\r\n    {field: 'aveCaps',headerName:\"Average CAPS\", width:108},\r\n    {field: 'blunders',headerName:\"Blunders\",},\r\n    {field: 'mistakes',headerName:\"Mistakes\",},\r\n    {field: 'inaccuracy',headerName:\"Inaccuracies\",},\r\n]\r\nconst Table_Opening = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const openings = store(state => state.opening)\r\n    const blunder = store(state => state.blunder)\r\n    const mistake = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    // console.log(openings)\r\n\r\n    useEffect(() => {\r\n        // console.log('hi')\r\n        const data = {};\r\n        \r\n        openings.map((e, i) => {\r\n            if(!data[e.eco]) {\r\n                data[e.eco] = {\r\n                    eco: e.eco,\r\n                    count: 1,\r\n                    won: 0,\r\n                    lost: 0,\r\n                    aveCaps: e.caps,\r\n                    blunders: blunder.filter(obj => obj.id === e.id).length,\r\n                    mistakes: mistake.filter(obj => obj.id === e.id).length,\r\n                    inaccuracy: inaccuracy.filter(obj => obj.id === e.id).length\r\n                };\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n            }\r\n            else {\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n                data[e.eco].aveCaps = (data[e.eco].aveCaps * data[e.eco].count + e.caps) / (data[e.eco].count + 1);\r\n                data[e.eco].count += 1;\r\n                data[e.eco].blunders += blunder.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].mistakes += mistake.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].inaccuracy += inaccuracy.filter(obj => obj.id === e.id).length;\r\n            }\r\n        })\r\n        \r\n        Object.keys(data).map(e => {\r\n            data[e].aveCaps = data[e].aveCaps.toFixed(1)\r\n        })\r\n        setRows(() => Object.values(data))\r\n        // console.log(data)\r\n        // console.log(Object.values(data))\r\n    }, [openings])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} width={720} />\r\n    )\r\n}\r\n\r\nexport default Table_Opening","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js",["256","257","258","259"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'type'},\r\n    {field: 'phase', filter: 'Phase'},\r\n    {field: 'move', filter: 'Move'},\r\n    {field: 'ply', filter: 'Move'},\r\n    {field: 'timeLeft', filter: 'Time Left (s)'},\r\n    {field: 'timeLeftPercent', filter: 'Time Left (%)'},\r\n    {field: 'fen', width: 190},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n]\r\n\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    // const Games = store(state => state.Games)\r\n    const blunders = store(state => state.blunder)\r\n    const mistakes = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        console.log(blunders)\r\n        const t = []\r\n\r\n        blunders.map(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Blunder',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        mistakes.map(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Mistake',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        inaccuracy.map(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Inaccuracy',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\nexport default Table_Game\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//     console.log(tactics)\r\n//     const t = tactics.map((e, i) => {\r\n//         return {\r\n//             date: e.date.split(\" \")[0],\r\n//             name: e.type.name,\r\n//             phase: e.phase,\r\n//             move: Math.ceil(e.ply / 2),\r\n//             ply: e.ply,\r\n//             timeLeft: e.timeToThink.toFixed(1),\r\n//             timeLeftPercent: e.timeToThinkPercent.toFixed(1),\r\n//             gameID: e.id,\r\n//             result: e.won ? \"Won\" : \"Lost\",\r\n//             eco:e.eco,\r\n//             color:e.color,\r\n//             opponent: e.opponent,\r\n//             class: e.class,\r\n//             caps: e.CAPS.toFixed(1)\r\n//         }\r\n//     })\r\n\r\n//     setRows(() => t)\r\n// }, [])","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js",["260","261","262","263","264","265","266","267","268","269","270","271","272","273"],"import React from 'react'\r\nimport AutoSizer from 'react-virtualized-auto-sizer'\r\nimport Game_Pie_Loss from '../Charts/Game/Pie_Loss'\r\nimport Game_Pie_Results from '../Charts/Game/Pie_Results'\r\nimport Game_Scatter_CAPS from '../Charts/Game/Scatter_CAPS'\r\nimport Game_Histogram_CAPS from '../Charts/Game/Histogram_CAPS'\r\nimport Move_Histogram_Ply from '../Charts/Moves/Histogram_MovePly'\r\nimport Move_Histogram_Time from '../Charts/Moves/Histogram_MoveTime'\r\nimport Opening_Data from '../Charts/Opening/opening'\r\nimport Tactics_Barchart from '../Charts/Tactics/Barchart_Tactics'\r\nimport Tactics_Barchart_Phases from '../Charts/Tactics/Barchart_TacticsPhases'\r\n\r\n/*\r\n    1. game_pie_loss, game_pie_results, game_scatter_caps, game_histogram_caps, \r\n    move_histogram_ply, move_histogram_time, opening_data_barchart, opening_data_sunburst, \r\n    tactics_barchart, tactics_barchart_phases\r\n*/\r\n\r\nconst Chart = ({ chart }) => {\r\n    const styles = {width: '100%'}\r\n\r\n    // console.log(chartObj[chart])\r\n    return (\r\n        <div className=\"main-chart\">\r\n            <AutoSizer style={styles}>\r\n                {\r\n                    ({height, width}) => {\r\n                        if(chart === \"game_pie_loss\") return <Game_Pie_Loss width={width} height={height} />;\r\n                        if(chart === \"game_pie_results\") return <Game_Pie_Results width={width} height={height} />\r\n                        if(chart === \"game_scatter_caps\") return <Game_Scatter_CAPS width={width} height={height} />\r\n                        if(chart === \"game_histogram_caps\") return <Game_Histogram_CAPS width={width} height={height} />\r\n                        if(chart === \"move_histogram_ply_blunder\") return <Move_Histogram_Ply width={width} height={height} type=\"blunder\" x=\"percent\"/>\r\n                        if(chart === \"move_histogram_ply_mistake\") return <Move_Histogram_Ply width={width} height={height} type=\"mistake\" x=\"percent\"/>\r\n                        if(chart === \"move_histogram_ply_inaccuracy\") return <Move_Histogram_Ply width={width} height={height} type=\"inaccuracy\" x=\"percent\"/>\r\n                        if(chart === \"move_histogram_time_blunder\") return <Move_Histogram_Time width={width} height={height} type=\"blunder\"/>\r\n                        if(chart === \"move_histogram_time_mistake\") return <Move_Histogram_Time width={width} height={height} type=\"mistake\"/>\r\n                        if(chart === \"move_histogram_time_inaccuracy\") return <Move_Histogram_Time width={width} height={height} type=\"inaccuracy\"/>\r\n                        if(chart === \"opening_data_barchart\") return <Opening_Data width={width} height={height} type=\"barchart\"  />\r\n                        if(chart === \"opening_data_sunburst\") return <Opening_Data width={width} height={height} type=\"sunburst\"  />\r\n                        if(chart === \"tactics_barchart\") return <Tactics_Barchart width={width} height={height} />\r\n                        if(chart === \"tactics_barchart_phases\") return <Tactics_Barchart_Phases width={width} height={height} />\r\n\r\n                        return null\r\n                    }\r\n                }\r\n             </AutoSizer> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js",["274","275","276","277"],"import React from 'react';\r\nimport Table_Game from '../Tables/Table_Game'\r\nimport Table_Move from '../Tables/Table_Move'\r\nimport Table_Openings from '../Tables/Table_Openings'\r\nimport Table_Tactics from '../Tables/Table_Tactics'\r\n\r\nconst TableComponent = ({ chart }) => {\r\n    const type = chart.split(\"_\")[0].toLowerCase();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"table-list-label\">Corresponding Data</h3>\r\n            { \r\n                (type === \"game\") ? <Table_Game /> :\r\n                (type === \"move\") ? <Table_Move /> :\r\n                (type === \"opening\") ? <Table_Openings /> :\r\n                (type === \"tactics\") ? <Table_Tactics /> : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TableComponent;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js",["278"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js",["279","280","281"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js",["282"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js",["283","284","285","286","287","288","289"],{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","severity":1,"message":"295","line":6,"column":8,"nodeType":"296","messageId":"297","endLine":6,"endColumn":21},{"ruleId":"294","severity":1,"message":"298","line":7,"column":8,"nodeType":"296","messageId":"297","endLine":7,"endColumn":20},{"ruleId":"294","severity":1,"message":"299","line":13,"column":10,"nodeType":"296","messageId":"297","endLine":13,"endColumn":17},{"ruleId":"294","severity":1,"message":"300","line":45,"column":11,"nodeType":"296","messageId":"297","endLine":45,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":87,"column":12,"nodeType":"303","messageId":"304","endLine":113,"endColumn":7},{"ruleId":"305","severity":1,"message":"306","line":31,"column":3,"nodeType":"307","messageId":"308","endLine":34,"endColumn":4},{"ruleId":"305","severity":1,"message":"306","line":62,"column":3,"nodeType":"307","messageId":"308","endLine":67,"endColumn":4},{"ruleId":"305","severity":1,"message":"306","line":120,"column":3,"nodeType":"307","messageId":"308","endLine":123,"endColumn":4},{"ruleId":"294","severity":1,"message":"309","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":15},{"ruleId":"290","replacedBy":"310"},{"ruleId":"292","replacedBy":"311"},{"ruleId":"294","severity":1,"message":"312","line":1,"column":23,"nodeType":"296","messageId":"297","endLine":1,"endColumn":28},{"ruleId":"294","severity":1,"message":"313","line":1,"column":30,"nodeType":"296","messageId":"297","endLine":1,"endColumn":40},{"ruleId":"294","severity":1,"message":"309","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":15},{"ruleId":"294","severity":1,"message":"314","line":9,"column":5,"nodeType":"296","messageId":"297","endLine":9,"endColumn":20},{"ruleId":"305","severity":1,"message":"306","line":25,"column":9,"nodeType":"307","messageId":"308","endLine":29,"endColumn":10},{"ruleId":"305","severity":1,"message":"306","line":15,"column":9,"nodeType":"307","messageId":"308","endLine":19,"endColumn":10},{"ruleId":"305","severity":1,"message":"306","line":44,"column":25,"nodeType":"307","messageId":"308","endLine":47,"endColumn":26},{"ruleId":"305","severity":1,"message":"306","line":80,"column":9,"nodeType":"307","messageId":"308","endLine":84,"endColumn":10},{"ruleId":"315","severity":1,"message":"316","line":108,"column":9,"nodeType":"317","messageId":"318","endLine":108,"endColumn":27},{"ruleId":"305","severity":1,"message":"306","line":109,"column":9,"nodeType":"307","messageId":"308","endLine":113,"endColumn":10},{"ruleId":"315","severity":1,"message":"316","line":127,"column":8,"nodeType":"317","messageId":"318","endLine":127,"endColumn":19},{"ruleId":"305","severity":1,"message":"306","line":128,"column":9,"nodeType":"307","messageId":"308","endLine":131,"endColumn":10},{"ruleId":"315","severity":1,"message":"316","line":153,"column":8,"nodeType":"317","messageId":"318","endLine":153,"endColumn":19},{"ruleId":"315","severity":1,"message":"316","line":153,"column":23,"nodeType":"317","messageId":"318","endLine":153,"endColumn":36},{"ruleId":"305","severity":1,"message":"306","line":154,"column":9,"nodeType":"307","messageId":"308","endLine":158,"endColumn":10},{"ruleId":"305","severity":1,"message":"306","line":160,"column":9,"nodeType":"307","messageId":"308","endLine":164,"endColumn":10},{"ruleId":"315","severity":1,"message":"316","line":204,"column":8,"nodeType":"317","messageId":"318","endLine":204,"endColumn":21},{"ruleId":"305","severity":1,"message":"306","line":205,"column":9,"nodeType":"307","messageId":"308","endLine":209,"endColumn":10},{"ruleId":"319","severity":1,"message":"320","line":38,"column":19,"nodeType":"317","messageId":"321","endLine":38,"endColumn":21},{"ruleId":"305","severity":1,"message":"306","line":70,"column":9,"nodeType":"307","messageId":"308","endLine":73,"endColumn":10},{"ruleId":"322","severity":1,"message":"323","line":22,"column":83,"nodeType":"303","messageId":"324","endLine":22,"endColumn":85},{"ruleId":"322","severity":1,"message":"323","line":40,"column":83,"nodeType":"303","messageId":"324","endLine":40,"endColumn":85},{"ruleId":"325","severity":1,"message":"326","line":68,"column":17,"nodeType":"327","endLine":68,"endColumn":91},{"ruleId":"325","severity":1,"message":"328","line":73,"column":17,"nodeType":"327","endLine":73,"endColumn":96},{"ruleId":"294","severity":1,"message":"329","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":28},{"ruleId":"294","severity":1,"message":"330","line":53,"column":7,"nodeType":"296","messageId":"297","endLine":53,"endColumn":20},{"ruleId":"322","severity":1,"message":"323","line":29,"column":23,"nodeType":"303","messageId":"324","endLine":29,"endColumn":25},{"ruleId":"322","severity":1,"message":"323","line":41,"column":23,"nodeType":"303","messageId":"324","endLine":41,"endColumn":25},{"ruleId":"322","severity":1,"message":"323","line":55,"column":23,"nodeType":"303","messageId":"324","endLine":55,"endColumn":25},{"ruleId":"331","severity":1,"message":"332","line":68,"column":7,"nodeType":"333","endLine":68,"endColumn":9,"suggestions":"334"},{"ruleId":"335","severity":1,"message":"336","line":72,"column":13,"nodeType":"337","endLine":72,"endColumn":38},{"ruleId":"335","severity":1,"message":"336","line":76,"column":13,"nodeType":"337","endLine":76,"endColumn":38},{"ruleId":"331","severity":1,"message":"338","line":37,"column":8,"nodeType":"333","endLine":37,"endColumn":14,"suggestions":"339"},{"ruleId":"294","severity":1,"message":"340","line":2,"column":11,"nodeType":"296","messageId":"297","endLine":2,"endColumn":32},{"ruleId":"341","severity":1,"message":"342","line":73,"column":1,"nodeType":"343","messageId":"344","endLine":83,"endColumn":4},{"ruleId":"294","severity":1,"message":"345","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":23},{"ruleId":"294","severity":1,"message":"346","line":22,"column":12,"nodeType":"296","messageId":"297","endLine":22,"endColumn":15},{"ruleId":"331","severity":1,"message":"347","line":46,"column":8,"nodeType":"333","endLine":46,"endColumn":10,"suggestions":"348"},{"ruleId":"294","severity":1,"message":"345","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":23},{"ruleId":"322","severity":1,"message":"323","line":29,"column":38,"nodeType":"303","messageId":"324","endLine":29,"endColumn":40},{"ruleId":"331","severity":1,"message":"347","line":46,"column":8,"nodeType":"333","endLine":46,"endColumn":10,"suggestions":"349"},{"ruleId":"294","severity":1,"message":"350","line":3,"column":8,"nodeType":"296","messageId":"297","endLine":3,"endColumn":16},{"ruleId":"294","severity":1,"message":"351","line":5,"column":10,"nodeType":"296","messageId":"297","endLine":5,"endColumn":29},{"ruleId":"331","severity":1,"message":"347","line":47,"column":8,"nodeType":"333","endLine":47,"endColumn":10,"suggestions":"352"},{"ruleId":"331","severity":1,"message":"353","line":45,"column":8,"nodeType":"333","endLine":45,"endColumn":15,"suggestions":"354"},{"ruleId":"294","severity":1,"message":"355","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":22},{"ruleId":"294","severity":1,"message":"356","line":3,"column":17,"nodeType":"296","messageId":"297","endLine":3,"endColumn":27},{"ruleId":"322","severity":1,"message":"323","line":29,"column":29,"nodeType":"303","messageId":"324","endLine":29,"endColumn":31},{"ruleId":"322","severity":1,"message":"323","line":53,"column":33,"nodeType":"303","messageId":"324","endLine":53,"endColumn":35},{"ruleId":"331","severity":1,"message":"357","line":59,"column":8,"nodeType":"333","endLine":59,"endColumn":18,"suggestions":"358"},{"ruleId":"322","severity":1,"message":"323","line":34,"column":24,"nodeType":"303","messageId":"324","endLine":34,"endColumn":26},{"ruleId":"322","severity":1,"message":"323","line":55,"column":24,"nodeType":"303","messageId":"324","endLine":55,"endColumn":26},{"ruleId":"322","severity":1,"message":"323","line":76,"column":26,"nodeType":"303","messageId":"324","endLine":76,"endColumn":28},{"ruleId":"331","severity":1,"message":"359","line":98,"column":8,"nodeType":"333","endLine":98,"endColumn":10,"suggestions":"360"},{"ruleId":"325","severity":1,"message":"361","line":28,"column":62,"nodeType":"327","endLine":28,"endColumn":109},{"ruleId":"325","severity":1,"message":"362","line":29,"column":65,"nodeType":"327","endLine":29,"endColumn":115},{"ruleId":"325","severity":1,"message":"363","line":30,"column":66,"nodeType":"327","endLine":30,"endColumn":117},{"ruleId":"325","severity":1,"message":"364","line":31,"column":68,"nodeType":"327","endLine":31,"endColumn":121},{"ruleId":"325","severity":1,"message":"365","line":32,"column":75,"nodeType":"327","endLine":32,"endColumn":153},{"ruleId":"325","severity":1,"message":"365","line":33,"column":75,"nodeType":"327","endLine":33,"endColumn":153},{"ruleId":"325","severity":1,"message":"365","line":34,"column":78,"nodeType":"327","endLine":34,"endColumn":159},{"ruleId":"325","severity":1,"message":"366","line":35,"column":76,"nodeType":"327","endLine":35,"endColumn":143},{"ruleId":"325","severity":1,"message":"366","line":36,"column":76,"nodeType":"327","endLine":36,"endColumn":143},{"ruleId":"325","severity":1,"message":"366","line":37,"column":79,"nodeType":"327","endLine":37,"endColumn":149},{"ruleId":"325","severity":1,"message":"367","line":38,"column":70,"nodeType":"327","endLine":38,"endColumn":133},{"ruleId":"325","severity":1,"message":"367","line":39,"column":70,"nodeType":"327","endLine":39,"endColumn":133},{"ruleId":"325","severity":1,"message":"368","line":40,"column":65,"nodeType":"327","endLine":40,"endColumn":115},{"ruleId":"325","severity":1,"message":"369","line":41,"column":72,"nodeType":"327","endLine":41,"endColumn":129},{"ruleId":"325","severity":1,"message":"370","line":14,"column":37,"nodeType":"327","endLine":14,"endColumn":51},{"ruleId":"325","severity":1,"message":"371","line":15,"column":37,"nodeType":"327","endLine":15,"endColumn":51},{"ruleId":"325","severity":1,"message":"372","line":16,"column":40,"nodeType":"327","endLine":16,"endColumn":58},{"ruleId":"325","severity":1,"message":"373","line":17,"column":40,"nodeType":"327","endLine":17,"endColumn":57},{"ruleId":"294","severity":1,"message":"374","line":4,"column":8,"nodeType":"296","messageId":"297","endLine":4,"endColumn":14},{"ruleId":"294","severity":1,"message":"375","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"294","severity":1,"message":"376","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":22},{"ruleId":"331","severity":1,"message":"377","line":59,"column":8,"nodeType":"333","endLine":59,"endColumn":10,"suggestions":"378"},{"ruleId":"294","severity":1,"message":"375","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"294","severity":1,"message":"379","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":19},{"ruleId":"294","severity":1,"message":"380","line":2,"column":21,"nodeType":"296","messageId":"297","endLine":2,"endColumn":27},{"ruleId":"294","severity":1,"message":"381","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":24},{"ruleId":"294","severity":1,"message":"374","line":4,"column":8,"nodeType":"296","messageId":"297","endLine":4,"endColumn":14},{"ruleId":"294","severity":1,"message":"382","line":5,"column":10,"nodeType":"296","messageId":"297","endLine":5,"endColumn":28},{"ruleId":"294","severity":1,"message":"383","line":9,"column":12,"nodeType":"296","messageId":"297","endLine":9,"endColumn":20},{"ruleId":"294","severity":1,"message":"384","line":11,"column":11,"nodeType":"296","messageId":"297","endLine":11,"endColumn":26},"no-native-reassign",["385"],"no-negated-in-lhs",["386"],"no-unused-vars","'Opening_Table' is defined but never used.","Identifier","unusedVar","'UsernameForm' is defined but never used.","'Analyze' is defined but never used.","'tacticsObj' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'games', 'games', 'gamenum', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'gamenum'.","ArrowFunctionExpression","unsafeRefs","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'store' is defined but never used.",["385"],["386"],"'phase' is defined but never used.","'plyPercent' is defined but never used.","'AnalyzeEndgames' is defined but never used.","use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","react/jsx-pascal-case","Imported JSX component Sunburst_ECO must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Barchart_Openings must be in PascalCase or SCREAMING_SNAKE_CASE","'ResponsiveSunburst' is defined but never used.","'customPalette' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'black', 'max', and 'white'. Either include them or remove the dependency array.","ArrayExpression",["387"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'defaultState'. Either include it or remove the dependency array.",["388"],"'ResponsiveScatterPlot' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'ResponsiveBar' is defined but never used.","'max' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tactics'. Either include it or remove the dependency array.",["389"],["390"],"'DataGrid' is defined but never used.","'DateFromGameSeconds' is defined but never used.",["391"],"React Hook useEffect has missing dependencies: 'Openings', 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["392"],"'AgGridColumn' is defined but never used.","'renderLink' is defined but never used.","React Hook useEffect has missing dependencies: 'blunder', 'inaccuracy', and 'mistake'. Either include them or remove the dependency array.",["393"],"React Hook useEffect has missing dependencies: 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["394"],"Imported JSX component Game_Pie_Loss must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Game_Pie_Results must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Game_Scatter_CAPS must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Game_Histogram_CAPS must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Move_Histogram_Ply must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Move_Histogram_Time must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Opening_Data must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Tactics_Barchart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Tactics_Barchart_Phases must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Game must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Move must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Openings must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Tactics must be in PascalCase or SCREAMING_SNAKE_CASE","'Portal' is defined but never used.","'React' is defined but never used.","'createPortal' is defined but never used.","React Hook useEffect has a missing dependency: 'modalID'. Either include it or remove the dependency array.",["395"],"'CreateURL' is defined but never used.","'GetURL' is defined but never used.","'UserProfileURL' is defined but never used.","'ChesscomMembership' is defined but never used.","'loggedIn' is assigned a value but never used.","'resetValidation' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"400","fix":"402"},{"desc":"400","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},"Update the dependencies array to be: [black, max, white]",{"range":"412","text":"413"},"Update the dependencies array to be: [data, defaultState]",{"range":"414","text":"415"},"Update the dependencies array to be: [tactics]",{"range":"416","text":"417"},{"range":"418","text":"417"},{"range":"419","text":"417"},"Update the dependencies array to be: [Games, Openings, blunders, inaccuracy, mistakes]",{"range":"420","text":"421"},"Update the dependencies array to be: [blunder, inaccuracy, mistake, openings]",{"range":"422","text":"423"},"Update the dependencies array to be: [blunders, inaccuracy, mistakes]",{"range":"424","text":"425"},"Update the dependencies array to be: [modalID]",{"range":"426","text":"427"},[2203,2205],"[black, max, white]",[1150,1156],"[data, defaultState]",[1604,1606],"[tactics]",[1458,1460],[1471,1473],[1749,1756],"[Games, Openings, blunders, inaccuracy, mistakes]",[2377,2387],"[blunder, inaccuracy, mistake, openings]",[3329,3331],"[blunders, inaccuracy, mistakes]",[1946,1948],"[modalID]"]