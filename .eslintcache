[{"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js":"1","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js":"2","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js":"3","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js":"4","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js":"5","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js":"6","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js":"7","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js":"8","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js":"9","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js":"10","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js":"11","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js":"12","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js":"13","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js":"14","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js":"15","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js":"16","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js":"17","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js":"18","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js":"19","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js":"20","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js":"21","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js":"22","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js":"23","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js":"24","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js":"25","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js":"26","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js":"27","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js":"28","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js":"29","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js":"30","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js":"31","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js":"32","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js":"33","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js":"34","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js":"35","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js":"36","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js":"37","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js":"38","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js":"39","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js":"40","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js":"41","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js":"42","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js":"43","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js":"44","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js":"45","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\wdyr.js":"46","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\ResourcesTab.js":"47","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\miscellaneous.js":"48","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\endgames.js":"49","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\tactics.js":"50","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\openings.js":"51","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\strategy.js":"52","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\disclosurePolicy.js":"53","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\oneClickCheckout.js":"54","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\thankYou.js":"55"},{"size":234,"mtime":1610499362249,"results":"56","hashOfConfig":"57"},{"size":1442,"mtime":1611088924514,"results":"58","hashOfConfig":"57"},{"size":4953,"mtime":1611096861967,"results":"59","hashOfConfig":"57"},{"size":3694,"mtime":1611098848612,"results":"60","hashOfConfig":"57"},{"size":758,"mtime":1610944620273,"results":"61","hashOfConfig":"57"},{"size":3772,"mtime":1611026060644,"results":"62","hashOfConfig":"57"},{"size":450,"mtime":1607486841061,"results":"63","hashOfConfig":"64"},{"size":1176,"mtime":1610945972825,"results":"65","hashOfConfig":"57"},{"size":10124,"mtime":1611026015230,"results":"66","hashOfConfig":"57"},{"size":11750,"mtime":1611096837795,"results":"67","hashOfConfig":"57"},{"size":3411,"mtime":1610560469299,"results":"68","hashOfConfig":"57"},{"size":692,"mtime":1607886954037,"results":"69","hashOfConfig":"57"},{"size":2852,"mtime":1611025697764,"results":"70","hashOfConfig":"57"},{"size":3812,"mtime":1611096992715,"results":"71","hashOfConfig":"57"},{"size":3111,"mtime":1611025693351,"results":"72","hashOfConfig":"57"},{"size":5910,"mtime":1610059606947,"results":"73","hashOfConfig":"57"},{"size":385,"mtime":1610052200729,"results":"74","hashOfConfig":"57"},{"size":5100,"mtime":1611096994578,"results":"75","hashOfConfig":"57"},{"size":1916,"mtime":1611025804102,"results":"76","hashOfConfig":"57"},{"size":3183,"mtime":1610060064988,"results":"77","hashOfConfig":"57"},{"size":4580,"mtime":1611025822905,"results":"78","hashOfConfig":"57"},{"size":1368,"mtime":1611025842082,"results":"79","hashOfConfig":"57"},{"size":3903,"mtime":1610065953389,"results":"80","hashOfConfig":"57"},{"size":2854,"mtime":1611030803493,"results":"81","hashOfConfig":"57"},{"size":3042,"mtime":1611025776387,"results":"82","hashOfConfig":"57"},{"size":4515,"mtime":1611025622522,"results":"83","hashOfConfig":"57"},{"size":4394,"mtime":1611025621134,"results":"84","hashOfConfig":"57"},{"size":1510,"mtime":1611024462689,"results":"85","hashOfConfig":"57"},{"size":1938,"mtime":1611026411288,"results":"86","hashOfConfig":"57"},{"size":2456,"mtime":1610052150248,"results":"87","hashOfConfig":"57"},{"size":2564,"mtime":1611024533445,"results":"88","hashOfConfig":"57"},{"size":4239,"mtime":1611025164047,"results":"89","hashOfConfig":"57"},{"size":1425,"mtime":1610052178588,"results":"90","hashOfConfig":"57"},{"size":3854,"mtime":1611025513224,"results":"91","hashOfConfig":"57"},{"size":7235,"mtime":1610069494398,"results":"92","hashOfConfig":"57"},{"size":581,"mtime":1610052175384,"results":"93","hashOfConfig":"57"},{"size":788,"mtime":1610052171697,"results":"94","hashOfConfig":"57"},{"size":7372,"mtime":1611096711021,"results":"95","hashOfConfig":"57"},{"size":2846,"mtime":1610560442434,"results":"96","hashOfConfig":"57"},{"size":345,"mtime":1610560443830,"results":"97","hashOfConfig":"57"},{"size":4383,"mtime":1610944204987,"results":"98","hashOfConfig":"57"},{"size":2355,"mtime":1610905898793,"results":"99","hashOfConfig":"57"},{"size":3421,"mtime":1611025432850,"results":"100","hashOfConfig":"57"},{"size":3054,"mtime":1610560547603,"results":"101","hashOfConfig":"57"},{"size":3461,"mtime":1611093278982,"results":"102","hashOfConfig":"57"},{"size":196,"mtime":1610051899609,"results":"103","hashOfConfig":"64"},{"size":790,"mtime":1610944607050,"results":"104","hashOfConfig":"57"},{"size":277,"mtime":1609876424664,"results":"105","hashOfConfig":"64"},{"size":2773,"mtime":1609872790180,"results":"106","hashOfConfig":"57"},{"size":4121,"mtime":1611097458516,"results":"107","hashOfConfig":"57"},{"size":3489,"mtime":1610560183513,"results":"108","hashOfConfig":"57"},{"size":2585,"mtime":1610078545942,"results":"109","hashOfConfig":"57"},{"size":623,"mtime":1609970452591,"results":"110","hashOfConfig":"57"},{"size":373,"mtime":1609883271683,"results":"111","hashOfConfig":"64"},{"size":426,"mtime":1609884167681,"results":"112","hashOfConfig":"57"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"zsp0m",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"115"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},"gju65z",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"115"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"115"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"115"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"115"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"115"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"115"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"115"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"115"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"115"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"115"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"115"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"115"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js",[],["240","241"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js",["242"],"import { GameStore, GenericStore } from '../State/store';\r\nimport { ArchiveURL } from './urls';\r\nimport { \r\n\tColorfromGame, \r\n\tCreateURL, \r\n\tGetURL, \r\n\tIDfromURL, \r\n\tResultFromGame, \r\n\tTimeControlFromGame, \r\n\tTimeClassFromGame,\r\n\tDateFromGameSeconds,\r\n\tgetOpponentfromGame,\r\n\t// addLogSelector, \r\n\taddLog } from './helpers';\r\nimport { AnalyzeGame } from '../BusinessLogic/Analyze';\r\n\r\nexport const timeout = (ms = 5000) => { \r\n\treturn new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const initializeState = () => {\r\n\r\n\taddLog(\"Starting Analysis\")\r\n\tGenericStore.getState().setAnalysisStarted();\r\n\t\r\n\r\n\t// check if less then 100 games\r\n\tconst maxGamesAllowed = GenericStore.getState().maxGamesAllowed;\r\n\r\n\tif (GameStore.getState().Games.length < maxGamesAllowed) {\r\n\t\t// console.log(\"hellow?\")\r\n\t\taddLog(\"Collecting game IDs\")\r\n\t\taddLog(\"Requesting game archive\")\r\n\r\n        GetURL(CreateURL(ArchiveURL, GenericStore.getState().UserName))\r\n\t\t\t.then((res, err) => {\r\n\t\t\t\t\t// primitive error handling\r\n\t\t\t\t\tif(err) { \r\n\t\t\t\t\t\t// console.warn(err);\r\n\t\t\t\t\t\taddLog(`[ERROR] Failed to retrieve game archive for ${GenericStore.getState().UserName}`)\r\n\t\t\t\t\t\treturn; \r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(res.data.status === 404) return;\r\n\r\n\t\t\t\t\tGameStore.getState().setGameArchives(res.data.archives)\t\t// think a synchronous call to update Archives\r\n\t\t\t\t\t// console.log(store.getState().GameArchive)\t\t\t\t// prints out updated state\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn GameIDfromArchive().catch(err => console.log(err));\r\n\t\t\t})\r\n\t\t\t.then(async () => {\r\n\t\t\t\tGenericStore.getState().setAnalysisPart(2) // set part to \"getting analysis data\"\r\n\t\t\t\tconst alreadyAnalyzed = GameStore.getState().receivedGameID;\r\n\r\n\t\t\t\t// console.log(maxGamesAllowed)\r\n\r\n\t\t\t\tfor(let i = 0; i < maxGamesAllowed; i++) {\r\n\t\t\t\t\t// console.log(i)\r\n\t\t\t\t\t// This check will prevent duplicate analyses of games\r\n\t\t\t\t\tif(!alreadyAnalyzed.includes(GameStore.getState().Games[i].id)) {\r\n\t\t\t\t\t\tAnalyzeGame(GameStore.getState().Games[i])\r\n\t\t\t\t\t\t\t\t\t.catch(err => console.log(err));\r\n\t\t\t\t\t\taddLog(`[REQUEST] Data for Game ${GameStore.getState()?.Games?.[i]?.id}`)\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tawait timeout(1000);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t).then(() => {\r\n\t\t\t\t// console.log(JSON.stringify(tacticsObj, null, '  '))\r\n\t\t\t\taddLog(`Finished loading games`)\r\n\t\t\t\t\r\n\t\t\t\tGenericStore.getState().setLoadingFalse();\r\n\r\n\t\t\t\t// store.getState().setAnalysisPart(3) // set part to \"Finished!\"\r\n\t\t\t\tGenericStore.getState().setAnalysisEnded();\r\n\r\n\t\t\t}).catch(err => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * @description Adds the GameIDs to GameID array from the archive\r\n * @returns {void} A promise  \r\n * @todo don't hardcode # of games\r\n */\r\nconst GameIDfromArchive = async () => {\r\n\t\t// const addLog = store(state => state.setDebugLogs)\r\n\r\n\t\tGenericStore.getState().setAnalysisPart(1)\r\n\t\taddLog(`Extracting game id from archive`)\r\n\r\n\r\n\t\t// console.log(\"Current Store: \", store.getState())\r\n\t\tconst maxGamesAllowed = GenericStore.getState().maxGamesAllowed;\r\n\t\tlet archives = GameStore.getState().GameArchive;\r\n\t\tlet i = archives.length - 1;\r\n\t\tlet gamenum = GameStore.getState().Games.length;\r\n\t\tlet games;\r\n\r\n\t\t// TESTS\r\n\t\t// 1. <100 games\r\n\t\t// 2. >100 games\r\n\t\t// 3. multiple archives\r\n\t\twhile(archives[i] && i >= 0 && gamenum <= maxGamesAllowed) { \r\n\t\t\t// console.log(\"GM top loop: \", gamenum)\t\r\n\t\t\t\r\n\t\t\t// console.log(archives[i])\r\n\r\n\t\t\tawait GetURL(archives[i])\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\t//  console.log(res.data)\r\n\t\t\t\t\tgames = res.data.games\r\n\r\n\t\t\t\t\t//  console.log(games.length)\r\n\r\n\t\t\t\t\tfor(let j = games.length - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t// validation\r\n\t\t\t\t\t\tif(gamenum > maxGamesAllowed) {\tbreak;\t}\t// break if exceed limit. In future not hardcode\r\n\t\t\t\t\t\tif(games[j].rules !== \"chess\") { continue; } // check if rules are chess or variant\r\n\r\n\t\t\t\t\t\tconst id = IDfromURL(games[j].url);\r\n\r\n\t\t\t\t\t\tif (!GameStore.getState().Games.filter(obj => obj.id === id).length > 0) {\r\n\t\t\t\t\t\t\t// console.log('added')\r\n\t\t\t\t\t\t\tconst color = ColorfromGame(games[j], GenericStore.getState().UserName);\r\n\t\t\t\t\t\t\tconst result = ResultFromGame(games[j], color);\r\n\t\t\t\t\t\t\tconst tc = TimeControlFromGame(games[j]);\r\n\t\t\t\t\t\t\tconst tclass = TimeClassFromGame(games[j]);\r\n\t\t\t\t\t\t\tconst date = DateFromGameSeconds(games[j].end_time, true);\r\n\t\t\t\t\t\t\tconst opp = getOpponentfromGame(games[j], color)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// FIX ME - this will not actually prevent duplicates b/c it's in an object form\r\n\t\t\t\t\t\t// if (!GameStore.getState().Games.filter(obj => obj.id === id).length > 0) { \t// could implement binarysearch in the future\r\n\t\t\t\t\t\t\tGameStore.getState().AddGame(id, color, result, tc, tclass, date, opp);\r\n\t\t\t\t\t\t\tgamenum += 1;\r\n\t\t\t\t\t\t\tGenericStore.getState().SetNeedAnalysis();\t// performance optim: only do once\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log(\"GN in loop: \", gamenum)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => console.log(err))\r\n\t\t\ti--;\t\r\n\t\t}\r\n\t\t\r\n\t\taddLog(`Finished extracting games`)\r\n\t\t\t// console.log(\"gameids state: \", store.getState().Games)\r\n\r\n\t\t// Analyze();\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js",["243"],"import React, { useState } from 'react';\r\nimport { store } from '../State/store';\r\n\r\nconst LoadForm = () => {\r\n    const [uname, setUname] = useState(\"\");\r\n\r\n    <form>\r\n        <input \r\n            type=\"text\" \r\n            value={uname} \r\n            onChange ={(e) => setUname(e.targe.value)} \r\n            placeholder=\"Player Name\" \r\n            name=\"username\"></input>\r\n        <button>Submit</button>\r\n\t</form>\r\n}\r\n\r\nexport default LoadForm;\r\n",["244","245"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js",[],["246","247"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js",["248"],"import React, { memo, useMemo, useCallback, } from 'react'\r\nimport { Sunburst } from '@nivo/sunburst'\r\nimport { useTheme } from '@nivo/core'\r\nimport seedrandom from 'seedrandom'\r\n\r\n// place these out here so it's not recreated\r\n// const layers =\r\nconst margin = { top: 60, right: 130, bottom: 30, left: 60 }\r\nconst defs = []\r\n\r\nconst Sunburst_ECO = ({white, black, width, height}) => {\r\n    const data = useMemo(() => {\r\n        return {\r\n            name: \"Openings\",\r\n            children: [\r\n                {\r\n                    name: \"White\", \r\n                    color:\"#FFFFFF\", \r\n                    children:white, \r\n                    description: \"White\", \r\n                    total:white.reduce((a,b) => (a+b.value), 0), \r\n                    won:white.reduce((a,b) => (a+b.won), 0),\r\n                    loss:white.reduce((a,b) => (a+b.loss), 0)\r\n                },\r\n                {\r\n                    name: \"Black\", \r\n                    color:\"#000000\", \r\n                    children:black, \r\n                    description: \"Black\", \r\n                    total:black.reduce((a,b)=> (a+b.value), 0), \r\n                    won:black.reduce((a,b) => (a+b.won), 0),\r\n                    loss:black.reduce((a,b) => (a+b.loss), 0)\r\n                }\r\n            ]\r\n        }\r\n    }, [white.length, black.length])\r\n\r\n    const rng = seedrandom('generate_number')\r\n    const childColor = () => pickCustomPalette(customPalette2, rng)\r\n    const colors = useCallback(({ id }) => pickWhiteBlack(id), [])\r\n\r\n    const Title = (data) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold', fontSize: '19px'}\r\n\r\n        // console.log(width, height)\r\n        return (\r\n            <text \r\n                x={data.centerX + 20}\r\n                y={-20}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Black & White Openings (Hover)\r\n            </text>\r\n        )\r\n    } \r\n    \r\n    // console.log(data)\r\n    return (\r\n        <Sunburst\r\n            data={data}\r\n            id=\"description\"\r\n            value=\"value\"\r\n            width={width}\r\n            height={height}\r\n            margin={margin}\r\n            cornerRadius={4}\r\n            borderWidth={2}\r\n            borderColor= \"black\"\r\n            colors={colors}\r\n            childColor={childColor}\r\n            animate={false}\r\n            motionConfig=\"gentle\"\r\n            isInteractive={true}\r\n            tooltip={CustomTooltip}\r\n            layers={ ['sliceLabels', 'slices', Title]}\r\n            defs={defs}\r\n        />\r\n    )\r\n}\r\n\r\n// Sunburst_ECO.whyDidYouRender = true\r\n\r\nexport default memo(Sunburst_ECO);\r\n\r\n// const customPalette = [\"#E8C1A0\",\"#F47560\",\"#F1E15B\",\"#E8A838\",\"#61CDBB\",\"#97E3D5\"]\r\nconst customPalette2 = [\"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\", \"#fb9a99\", \"#e31a1c\", \"#fdbf6f\", \"#ff7f00\", \"#cab2d6\", \"#6a3d9a\", \"#ffff99\", \"#b15928\"]\r\n\r\nconst pickCustomPalette = (palette, rng) => {\r\n    const i = Math.floor(rng()*palette.length)\r\n    const color = palette[i]\r\n    // console.log(i, color)\r\n\r\n    return color;\r\n}\r\n\r\nconst pickWhiteBlack = (id) => {\r\n    if(id === \"White\") { \r\n        // return \"#fff1d9\" \r\n        return \"#FFFFFF\"\r\n    }\r\n\r\n    return \"#000000\" \r\n}\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    const theme = useTheme()\r\n    // console.log(theme)\r\n    return (\r\n        <div style={{ ...theme.tooltip.container, position: 'absolute', width: '200px'}}>\r\n            <strong>Name:</strong> {data.description} <br />\r\n            <strong>ECO:</strong> {data.name} <br />\r\n            <strong>Played:</strong> {value} ({(value / data.total * 100).toFixed(1)}%) <br />\r\n            <strong>Won:</strong> {data.won}   <br />\r\n            <strong>Lost:</strong> {data.loss}\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js",["249"],"import React, { useState, useEffect } from 'react'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    // console.log(nameLookUp)\r\n    return (\r\n        <div style={{width: '300px',maxHeight:'200px'}}>\r\n            <strong>ECO:</strong> {data.eco} <br />\r\n            <strong>Name:</strong>\r\n                {data.name[0]}\r\n            <br />\r\n            <strong>Won:</strong> {data.Won || 0}   <br />\r\n            <strong>Lost:</strong> {data.Lost || 0}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst Barchart_Openings = ({ white, black, width, height }) => {\r\n    \r\n    const [loading, setLoading] = useState(true)\r\n    const [data, setData] = useState({})\r\n    const [max, setMax] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const d = {}\r\n\r\n        white.forEach(e => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += e.won || 0;\r\n                d[o].Lost += e.loss || 0;\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description);\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:e.won || 0, Lost:e.loss || 0}\r\n            }\r\n        })\r\n\r\n        black.forEach(e => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += (e.won || 0);\r\n                d[o].Lost += (e.loss || 0);\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description)\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:(e.won || 0), Lost:(e.loss || 0)}\r\n            }\r\n        })\r\n        \r\n        const final = Object.values(d)\r\n        let maxValue = max;\r\n        final.forEach(e => {\r\n            if((e.Won || 0) + (e.Lost || 0) > maxValue)  {\r\n                maxValue = (e.Won || 0) + (e.Lost || 0);\r\n            }\r\n        })\r\n        \r\n        // console.log(maxValue)\r\n        // console.log(d)\r\n        setData(() => Object.values(d))\r\n        setMax(() => maxValue)\r\n\r\n        // console.log(Object.values(d))\r\n        setLoading(() => false)\r\n    },[]);\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold', fontSize: '18px'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Results by Openings\r\n            </text>\r\n        )\r\n    } \r\n\r\n    if(!loading) {\r\n        return (\r\n            <Bar\r\n                data={data.sort((a, b) => b.Won === a.Won ? b.Won + b.Lost - (a.Won + a.Lost) : b.Won - a.Won)}\r\n                width={width}\r\n                height={height}\r\n                keys={[ 'Won', 'Lost']}\r\n                indexBy=\"eco\"\r\n                margin={{ top: 40, right: (width > 600) ? 130 : 80, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                valueScale={{ type: 'linear' }}\r\n                indexScale={{ type: 'band', round: true }}\r\n                colors={{ scheme: 'nivo' }}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    // tickPadding: 5,\r\n                    tickRotation: -30,\r\n                    legend: 'ECO Codes',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 40,\r\n                    size: 40\r\n                }}\r\n                enableGridX\r\n                layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n                axisLeft={{\r\n                    tickValues:[...Array(max + 1).keys()],\r\n                    legend: 'Count',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -30,\r\n                }}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: '#000000', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                tooltip={CustomTooltip}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                theme={{\r\n                    axis: {\r\n                        ticks: {\r\n                            text: {\r\n                                fontSize: '12px',\r\n                            }\r\n                        },\r\n                        legend: {\r\n                            text: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                color: 'black'\r\n                            }\r\n                        }\r\n                    },\r\n                    legends: {\r\n                        text: {\r\n                            fontSize: '12px',\r\n                        }\r\n                    },\r\n                    textColor: 'black'\r\n\r\n                }}\r\n\r\n                animate={false}\r\n            />\r\n        )\r\n    } \r\n    \r\n    return null\r\n \r\n}\r\n\r\n// Barchart_Openings.whyDidYouRender = true\r\n\r\nexport default Barchart_Openings;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js",["250"],"import { useState, useEffect } from 'react'\r\nimport { GameStore } from \"../../State/store\";\r\nimport ResponsiveHistogram from \"../ResponsiveHistogram\";\r\nimport { XAxis, YAxis, BarSeries } from \"@data-ui/histogram\";\r\nimport { baseLabel } from '@data-ui/theme/lib/svgLabel'\r\n\r\nconst Histogram_CAPS = ({ height, width }) => {\r\n  \r\n  const [meanCAPS, setMeanCAPS] = useState(0)\r\n  \r\n  const games = GameStore((state) => state.Games);\r\n  \r\n  useEffect(() => {\r\n    const reducer = (value, currObj) => value + (currObj.CAPS || 0)\r\n\r\n    const total = games.reduce(reducer, 0)\r\n    const count = games.length\r\n\r\n    // console.log(total, count)\r\n    setMeanCAPS(total / count)\r\n\r\n  }, [games.length])\r\n  \r\n\tconsole.log(meanCAPS)\r\n  return (\r\n    <ResponsiveHistogram\r\n      ariaLabel=\"Histogram of Chess.com CAPS % Score\"\r\n      height={height}\r\n      width={width}\r\n      orientation=\"vertical\"\r\n      cumulative={false}\r\n      binCount={10}\r\n      binType=\"numeric\"\r\n      valueAccessor={datum => datum?.CAPS || 50}\r\n      limits={[0, 100]}\r\n      renderTooltip={({ event, datum, data, color }) => {\r\n        // console.log(data)\r\n        return (\r\n        <div>\r\n          <strong style={{ color }}>\r\n            {datum.bin0} to {datum.bin1}\r\n          </strong>\r\n          <div>\r\n            <strong>count </strong>\r\n            {datum.count}\r\n          </div>\r\n          <div>\r\n            <strong>cumulative </strong>\r\n            {datum.cumulative}\r\n          </div>\r\n          <div>\r\n            <strong>density </strong>\r\n            {datum.density}\r\n          </div>\r\n          <div>\r\n            <strong>MEAN: </strong>\r\n            {meanCAPS.toFixed(1)}\r\n          </div>\r\n        </div>\r\n      )\r\n    }}\r\n    >\r\n      <BarSeries animated rawData={games} fill=\"red\" />\r\n      {/* <DensitySeries\r\n          stroke=\"#e64980\"\r\n          showArea={true}\r\n          smoothing={0.01}\r\n          kernel=\"gaussian\"\r\n          rawData={blunders}\r\n          fill=\"red\"\r\n      /> */}\r\n\r\n      <XAxis\r\n        label=\"Chess.com CAPS Score\"\r\n        axisStyles = {{\r\n          label: {\r\n            'bottom': {\r\n              // ...xAxisStyles,\r\n              ...baseLabel,\r\n              fontSize: '18px',\r\n              fill: 'black',\r\n              y: '46'\r\n            },\r\n          }\r\n        }}\r\n        // labelProps={{\r\n        //   // ...xAxisStyles,\r\n        //   fontSize: \"100px\"\r\n        // }}\r\n      />\r\n      <YAxis \r\n        label=\"Count\"\r\n        stroke=\"black\"\r\n        axisStyles = {{\r\n          label: {\r\n            'left': {\r\n              // ...xAxisStyles,\r\n              ...baseLabel,\r\n              fontSize: '18px',\r\n              fill: 'black',\r\n              y: -35\r\n            },\r\n          }\r\n        }}\r\n      />\r\n    </ResponsiveHistogram>\r\n  );\r\n};\r\n\r\n// Histogram_CAPS.whyDidYouRender = true;\r\n\r\nexport default Histogram_CAPS;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js",["251"],"import React, { useState, useEffect } from 'react'\r\nimport { DataStore } from '../../State/store'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst Barchart_Tactics = ({ width, height }) => {\r\n\r\n    const tactics = DataStore(state => {\r\n        return {\r\n            \"Win the Exchange\":state.winningExchange,\r\n            \"Underdefended Piece\":state.underdefended,\r\n            \"Trapped piece\":state.trapped,\r\n            \"Hanging Piece\":state.hanging,\r\n            \"Relative Pin\":state.relativePin,\r\n            \"Absolute Pin\":state.absolutePin,\r\n            Skewer:state.skewer,\r\n            Fork:state.fork,\r\n            \"Mate\":state.mate,\r\n        }\r\n    })\r\n\r\n    const [the_data, setThe_data] = useState([])\r\n    // const [max, setMax] = useState(0)\r\n\r\n    \r\n    useEffect(() => {\r\n        setThe_data(() => [])\r\n\r\n        const d = Object.keys(tactics).map((e) => {\r\n            return {\r\n                \"tactic\": e,\r\n                \"Blundered\": tactics[e].filter((obj) => obj.class === \"blunders\").length || null,\r\n                \"Missed\": tactics[e].filter((obj) => obj.class === \"missed\").length || null,\r\n                \"Got\": tactics[e].filter((obj) => obj.class === \"got\").length || null\r\n            }\r\n        })\r\n        d.sort((a, b) => {\r\n            const result =  ((b.Blundered || 0) + (b.Missed || 0) + (b.Got || 0)) - ((a.Blundered || 0) + (a.Missed || 0) + (a.Got || 0))\r\n            // console.log(result)\r\n            return result\r\n        })\r\n        // console.log(d)\r\n\r\n        // setMax(() => d[0].Blundered + d[0].Missed + d[0].Got)\r\n        setThe_data(() => d)\r\n\r\n    }, [])\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics by Category\r\n            </text>\r\n        )\r\n    } \r\n\r\n    return (\r\n        <>\r\n        { the_data.reduce((sum, obj) => sum + obj.Blundered + obj.Missed + obj.Got, 0) === 0 ?\r\n            <p className=\"no-data-message\">No tactics data available. Coming soon!</p> :\r\n        <Bar\r\n            data={\r\n                the_data.filter(obj => ((obj.Blundered || 0) + (obj.Missed || 0) + (obj.Got || 0) !== 0))\r\n            }\r\n            keys={['Blundered','Missed', 'Got']}\r\n            indexBy=\"tactic\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 40, right: 130, bottom: 80, left: 60 }}\r\n            // groupMode=\"grouped\"\r\n            axisLeft={{\r\n                tickValues: 5,\r\n                legend: 'Count',\r\n                legendPosition: 'middle',\r\n                legendOffset: -30,\r\n            }}\r\n            axisBottom={{\r\n                tickSize: 8,\r\n                tickPadding: 5,\r\n                tickRotation: -20,\r\n                legend: 'Tactic',\r\n                legendPosition: 'middle',\r\n                legendOffset: 55\r\n            }}\r\n            labelSkipHeight={10}\r\n            padding={0.25}\r\n            enableGridX\r\n            layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n            theme={{\r\n\t\t\t\taxis: {\r\n\t\t\t\t\tticks: {\r\n\t\t\t\t\t\ttext: {\r\n\t\t\t\t\t\t\tfontSize: '12px',\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\ttext: {\r\n\t\t\t\t\t\t\tfontSize: '16px',\r\n\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t\tcolor: 'black'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tlegends: {\r\n\t\t\t\t\ttext: {\r\n\t\t\t\t\t\tfontSize: '12px',\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\ttextColor: 'black'\r\n\r\n\t\t\t}}\r\n        />\r\n        }\r\n        </>\r\n    )\r\n        \r\n}\r\n\r\n// Barchart_Tactics.whyDidYouRender = true\r\n\r\nexport default Barchart_Tactics","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js",["252"],"import React, { useState, useEffect } from 'react'\r\nimport { DataStore } from '../../State/store'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst Barchart_TacticsPhases = ({ width, height }) => {\r\n\r\n    const [the_data, setThe_data] = useState([])\r\n    const [the_keys, setKeys] = useState([])\r\n\r\n    const tactics = DataStore((state) => {\r\n        return {\r\n            \"Win the Exchange\":state.winningExchange,\r\n            \"Underdefended Piece\":state.underdefended,\r\n            \"Trapped piece\":state.trapped,\r\n            \"Hanging Piece\":state.hanging,\r\n            \"Relative Pin\":state.relativePin,\r\n            \"Absolute Pin\":state.absolutePin,\r\n            Skewer:state.skewer,\r\n            Fork:state.fork,\r\n            \"Mate\":state.mate,\r\n        }\r\n    })\r\n\r\n    \r\n    useEffect(() => {\r\n        const d = [{phase: \"Opening\"}, {phase: \"Middlegame\"}, {phase: \"Endgame\"}];\r\n        const k = [] \r\n\r\n        Object.keys(tactics).forEach((e) => {\r\n            const opening = tactics[e].filter((obj) => obj.phase === \"open\").length\r\n            const middle = tactics[e].filter((obj) => obj.phase === \"middle\").length\r\n            const end = tactics[e].filter((obj) => obj.phase === \"end\").length\r\n\r\n            d[0][e] = opening\r\n            d[1][e] = middle\r\n            d[2][e] = end\r\n\r\n            if(opening + middle + end !== 0) k.push(e)\r\n        })\r\n\r\n        // console.log(d)\r\n\r\n        setThe_data(() => d)\r\n        setKeys(() => k)\r\n\r\n    }, [])\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics vs. Game Phases\r\n            </text>\r\n        )\r\n    } \r\n    // console.log(the_data)\r\n    return (\r\n        <>\r\n        { (the_data.reduce((sum, obj) => sum + Object.keys(obj).map(tactic => obj[tactic]).reduce((a, b) => a + (Number(b) || 0), 0), 0) === 0) ?\r\n           <p className=\"no-data-message\">No tactics data available. Coming soon!</p> :\r\n        <Bar\r\n            data={\r\n                the_data\r\n            }\r\n            keys={the_keys}\r\n            indexBy=\"phase\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 40, right: 130, bottom: 80, left: 60 }}\r\n            colors={{ scheme: 'set1' }}\r\n            // groupMode=\"grouped\"\r\n            layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n            axisLeft={{\r\n                tickValues: 5,\r\n                legend: 'Count',\r\n                legendPosition: 'middle',\r\n                legendOffset: -30,\r\n            }}\r\n            axisBottom={{\r\n                tickSize: 8,\r\n                tickPadding: 5,\r\n                // tickRotation: -20,\r\n                legend: 'Tactic',\r\n                legendPosition: 'middle',\r\n                legendOffset: 50\r\n            }}\r\n            labelSkipHeight={20}\r\n            padding={0.25}\r\n            enableGridX\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n            theme={{\r\n\t\t\t\taxis: {\r\n\t\t\t\t\tticks: {\r\n\t\t\t\t\t\ttext: {\r\n\t\t\t\t\t\t\tfontSize: '12px',\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\ttext: {\r\n\t\t\t\t\t\t\tfontSize: '16px',\r\n\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t\tcolor: 'black'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tlegends: {\r\n\t\t\t\t\ttext: {\r\n\t\t\t\t\t\tfontSize: '12px',\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\ttextColor: 'black'\r\n\r\n\t\t\t}}\r\n        />\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\n// Barchart_TacticsPhases.whyDidYouRender = true\r\n\r\nexport default Barchart_TacticsPhases","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js",["253"],"import React, {useState, useEffect} from 'react'\r\nimport { DataStore } from \"../State/store\"\r\nimport 'react-data-grid/dist/react-data-grid.css'\r\nimport Table from './Table'\r\n\r\nconst TacticsTable = () => {\r\n\r\n    const [rows, setRows] = useState([])\r\n    const tactics = DataStore((state) => {\r\n        return [\r\n            ...state.winningExchange,\r\n            ...state.underdefended,\r\n            ...state.trapped,\r\n            ...state.hanging,\r\n            ...state.relativePin,\r\n            ...state.absolutePin,\r\n            ...state.skewer,\r\n            ...state.fork,\r\n            ...state.mate,\r\n        ]\r\n    })\r\n\r\n    useEffect(() => {\r\n        // console.log(tactics)\r\n        const t = tactics.map((e, i) => {\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                name: e.type.name,\r\n                phase: e.phase,\r\n                move: Math.ceil(e.ply / 2),\r\n                ply: e.ply,\r\n                timeLeft: e?.timeToThink?.toFixed(1),\r\n                timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                result: e.won ? \"Won\" : \"Lost\",\r\n                eco:e.eco,\r\n                color:e.color,\r\n                opponent: e.opponent,\r\n                class: e.class,\r\n                caps: e.CAPS.toFixed(1)\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table data={rows} />\r\n    )\r\n\r\n}\r\n\r\n// TacticsTable.whyDidYouRender = true\r\n\r\nexport default TacticsTable","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js",["254"],"import React, { useState, useEffect } from 'react'\r\nimport { DataStore, GameStore } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n    {field: 'blunders', headerName: 'Blunders'},\r\n    {field: 'mistakes', headerName: 'Mistakes'},\r\n    {field: 'inaccuracies', headerName: 'Inaccuracies'}\r\n]\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const Games = GameStore(state => state.Games)\r\n    const Openings = DataStore(state => state.opening)\r\n    const blunders = DataStore(state => state.blunder)\r\n    const mistakes = DataStore(state => state.mistake)\r\n    const inaccuracy = DataStore(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        // console.log(Openings)\r\n        const t = Games.map((e, i) => {\r\n            // console.log(Openings.filter(obj => obj.id === e.id))\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                result: e.result === \"win\" ? \"Won\" : \"Lost\",\r\n                opponent: e.opponent,\r\n                color:e.color,\r\n                eco: Openings.filter(obj => obj.id === e.id)?.[0]?.eco,\r\n                caps: e?.CAPS?.toFixed(1),\r\n                blunders: blunders.filter(obj => obj.id === e.id).length,\r\n                mistakes: mistakes.filter(obj => obj.id === e.id).length,\r\n                inaccuracies: inaccuracy.filter(obj => obj.id === e.id).length\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [Games])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\n// Table_Game.whyDidYouRender = true\r\n\r\nexport default Table_Game","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js",["255"],"import React, { useState, useEffect } from 'react'\r\nimport { DataStore } from '../State/store'\r\nimport Table from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'won',headerName:\"Won\",},\r\n    {field: 'lost',headerName:\"Lost\",},\r\n    // {field: 'count',headerName:\"Total\",filter: true,},\r\n    {field: 'aveCaps',headerName:\"Average CAPS\", width:108},\r\n    {field: 'blunders',headerName:\"Blunders\",},\r\n    {field: 'mistakes',headerName:\"Mistakes\",},\r\n    {field: 'inaccuracy',headerName:\"Inaccuracies\",},\r\n]\r\nconst Table_Opening = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const openings = DataStore(state => state.opening)\r\n    const blunder = DataStore(state => state.blunder)\r\n    const mistake = DataStore(state => state.mistake)\r\n    const inaccuracy = DataStore(state => state.inaccuracy)\r\n\r\n    // console.log(openings)\r\n\r\n    useEffect(() => {\r\n        // console.log('hi')\r\n        const data = {};\r\n        \r\n        openings.forEach((e, i) => {\r\n            if(!data[e.eco]) {\r\n                data[e.eco] = {\r\n                    eco: e.eco,\r\n                    count: 1,\r\n                    won: 0,\r\n                    lost: 0,\r\n                    aveCaps: e.caps,\r\n                    blunders: blunder.filter(obj => obj.id === e.id).length,\r\n                    mistakes: mistake.filter(obj => obj.id === e.id).length,\r\n                    inaccuracy: inaccuracy.filter(obj => obj.id === e.id).length\r\n                };\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n            }\r\n            else {\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n                data[e.eco].aveCaps = (data[e.eco].aveCaps * data[e.eco].count + e.caps) / (data[e.eco].count + 1);\r\n                data[e.eco].count += 1;\r\n                data[e.eco].blunders += blunder.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].mistakes += mistake.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].inaccuracy += inaccuracy.filter(obj => obj.id === e.id).length;\r\n            }\r\n        })\r\n        \r\n        Object.keys(data).forEach(e => {\r\n            data[e].aveCaps = data[e].aveCaps.toFixed(1)\r\n        })\r\n        setRows(() => Object.values(data))\r\n        // console.log(data)\r\n        // console.log(Object.values(data))\r\n    }, [openings])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} width={720} />\r\n    )\r\n}\r\n\r\n// Table_Opening.whyDidYouRender = true\r\n\r\nexport default Table_Opening","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js",["256"],"import React, { useState, useEffect } from 'react'\r\nimport { DataStore } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'type'},\r\n    {field: 'phase', filter: 'Phase'},\r\n    {field: 'move', filter: 'Move'},\r\n    {field: 'ply', filter: 'Move'},\r\n    {field: 'timeLeft', filter: 'Time Left (s)'},\r\n    {field: 'timeLeftPercent', filter: 'Time Left (%)'},\r\n    {field: 'fen', width: 190},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n]\r\n\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    // const Games = store(state => state.Games)\r\n    const blunders = DataStore(state => state.blunder)\r\n    const mistakes = DataStore(state => state.mistake)\r\n    const inaccuracy = DataStore(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        // console.log(blunders)\r\n        const t = []\r\n\r\n        blunders.forEach(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Blunder',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        mistakes.forEach(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Mistake',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        inaccuracy.forEach(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Inaccuracy',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\n// Table_Game.whyDidYouRender = true\r\n\r\nexport default Table_Game\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//     console.log(tactics)\r\n//     const t = tactics.map((e, i) => {\r\n//         return {\r\n//             date: e.date.split(\" \")[0],\r\n//             name: e.type.name,\r\n//             phase: e.phase,\r\n//             move: Math.ceil(e.ply / 2),\r\n//             ply: e.ply,\r\n//             timeLeft: e.timeToThink.toFixed(1),\r\n//             timeLeftPercent: e.timeToThinkPercent.toFixed(1),\r\n//             gameID: e.id,\r\n//             result: e.won ? \"Won\" : \"Lost\",\r\n//             eco:e.eco,\r\n//             color:e.color,\r\n//             opponent: e.opponent,\r\n//             class: e.class,\r\n//             caps: e.CAPS.toFixed(1)\r\n//         }\r\n//     })\r\n\r\n//     setRows(() => t)\r\n// }, [])","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js",["257"],"import { useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * Creates DOM element to be used as React root.\r\n * @returns {HTMLElement}\r\n */\r\nconst createRootElement = (id) => {\r\n    const rootContainer = document.createElement(\"div\");\r\n    rootContainer.setAttribute(\"id\", id);\r\n    return rootContainer;\r\n};\r\n\r\n/**\r\n * Appends element as last child of body.\r\n * @param {HTMLElement} rootElem\r\n */\r\nconst addRootElement = (rootElem) => {\r\n    document.body.insertBefore(\r\n        rootElem,\r\n        document.body.lastElementChild.nextElementSibling\r\n    );\r\n};\r\n\r\n/**\r\n * Hook to create a React Portal.\r\n * Automatically handles creating and tearing-down the root elements (no SRR\r\n * makes this trivial), so there is no need to ensure the parent target already\r\n * exists.\r\n * @example\r\n * const target = usePortal(id, [id]);\r\n * return createPortal(children, target);\r\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\r\n * @returns {HTMLElement} The DOM node to use as the Portal target.\r\n */\r\nfunction usePortal(rootRefID, modalID = 'modal') {\r\n    const rootElemRef = useRef(null);\r\n\r\n    useEffect(function setupElement() {\r\n        // Look for existing target dom element to append to\r\n        const existingParent = document.getElementById(modalID);\r\n        // Parent is either a new root or the existing dom element\r\n        const parentElem = existingParent || createRootElement(modalID);\r\n\r\n        // If there is no existing DOM element, add a new one.\r\n        if (!existingParent) {\r\n            addRootElement(parentElem);\r\n        }\r\n\r\n        // Add the detached element to the parent\r\n        parentElem.appendChild(rootElemRef.current);\r\n\r\n        return function removeElement() {\r\n            rootElemRef.current.remove();\r\n            if (parentElem.childNodes.length === -1) {\r\n                parentElem.remove();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    /**\r\n    *  It's important we evaluate this lazily:\r\n    * - We need first render to contain the DOM element, so it shouldn't happen\r\n    *   in useEffect. We would normally put this in the constructor().\r\n    * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\r\n    *   since this will run every single render (that's a lot).\r\n    * - We want the ref to consistently point to the same DOM element and only\r\n    *   ever run once.\r\n    * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\r\n    */\r\n    function getRootElem() {\r\n        if (rootElemRef.current === null) {\r\n            // console.log(rootElemRef, \"created div\")\r\n            rootElemRef.current = document.createElement(\"div\");\r\n            rootElemRef.current.setAttribute(\"class\", rootRefID);\r\n\r\n        }\r\n        return rootElemRef.current;\r\n    }\r\n\r\n    return getRootElem();\r\n}\r\n\r\nexport default usePortal;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js",["258","259"],"import React, { useEffect, useState, useRef, memo } from 'react'\r\nimport Portal from '../Portal'\r\nimport PacmanLoader from 'react-spinners/PacmanLoader'\r\nimport { GenericStore, GameStore } from '../State/store'\r\n\r\nconst AnalysisProgress = () => {\r\n\r\n    useEffect(() => {\r\n        const root = document.querySelector('.ci-dashboard-grp')\r\n        root.classList.add(\"inactivated\")\r\n\r\n        return () => root.classList.remove(\"inactivated\") \r\n    }, [])\r\n\r\n    const receivedGameData = GameStore(state => state.receivedGameID.length)\r\n    const failedGameData = GameStore(state => state.failedGameID.length)\r\n    const maxGames = GenericStore(state => state.maxGamesAllowed)\r\n\r\n    return (\r\n        <Portal rootRefID=\"modal-analysis-progress\">\r\n            <h1>Analysis in Progress</h1>\r\n            <div className=\"loadingSpinner\">\r\n                <PacmanLoader color=\"#4A90E2\"/>\r\n            </div>\r\n\r\n            <ProgressBar \r\n                receivedGameData={receivedGameData} \r\n                failedGameData={failedGameData}\r\n                maxGames={maxGames}\r\n                // numGameIDs={numGameIDs}\r\n            />\r\n            <DebuggingLogs />\r\n        </Portal>\r\n    )\r\n}\r\n\r\n// AnalysisProgress.whyDidYouRender = true\r\n\r\n\r\nexport default AnalysisProgress;\r\n\r\nconst ProgressBar = memo(({ receivedGameData, failedGameData, maxGames }) => {\r\n    const analysisPart = GenericStore(state => state.analysisPart)\r\n    const analysisSteps = GenericStore(state => state.analysisSteps)\r\n\r\n\r\n    // const maxGames = GenericStore(state => state.maxGamesAllowed)\r\n    // const numGameIDs = GameStore(state => state.Games.length)\r\n\r\n    // const receivedGameData = GameStore(state => state.receivedGameID.length)\r\n    // const failedGameData = GameStore(state => state.failedGameID.length)\r\n    // const numGameIDs = GameStore(state => state.Games.length)\r\n\r\n    useEffect(() => {\r\n        if(receivedGameData + failedGameData === maxGames) {\r\n            GenericStore.getState().setAnalysisPart(4);\r\n            // console.log(receivedGameData, failedGameData, maxGames)\r\n\r\n        }\r\n        // console.log(receivedGameData, failedGameData, maxGames)\r\n\r\n    }, [receivedGameData, failedGameData])\r\n\r\n    // console.log(maxGames, receivedGameData, failedGameData)\r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <progress max={maxGames} value={receivedGameData + failedGameData} />\r\n            <span>\r\n                { analysisPart === 1 ?\r\n                    `${analysisSteps[1]}` :\r\n                  analysisPart === 2 ?\r\n                    `${analysisSteps[2]}` : \r\n                  analysisPart === 3 ?\r\n                    `${analysisSteps[3]}` : \r\n                  analysisPart === 4 ?\r\n                    `${analysisSteps[4]}` : null\r\n                }\r\n            </span>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst DebuggingLogs = () => {\r\n\r\n    const logs = GenericStore(state => state.debugLogs)\r\n    const [value, setValue] = useState('');\r\n    const textAreaRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        \r\n        if(logs.length !== 0) {\r\n            setValue((e) => e + logs[logs.length - 1] + '\\n')\r\n\r\n            // update the scroll top of the textarea\r\n            textAreaRef.current.scrollTop = textAreaRef.current.scrollHeight;\r\n        }\r\n    }, [logs.length])\r\n\r\n\r\n    return (\r\n        <textarea readOnly={true} id=\"debug-logs\" ref={textAreaRef} className=\"debugging-logs\" value= {value} />\r\n    )\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\wdyr.js",["260"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\ResourcesTab.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\miscellaneous.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\endgames.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\tactics.js",["261","262","263","264"],"const tacticsResources = () => {\r\n  return (\r\n    <div className=\"resources-section\">\r\n      <h2>Tactics</h2>\r\n      <p>\r\n        Tactics are the building blocks of higher-level chess mastery. Once you\r\n        can easily spot a fork, pin, skewer, etc., in your sleep, you can start\r\n        combining them into spectacular combinations and deadly checkmating\r\n        attacks. Practicing tactics is one of the <strong>fastest</strong> ways\r\n        to improve because it radically increases your knowledge base and\r\n        improves your pattern recognition (\r\n        <a\r\n          href=\"https://chessintellect.com/tactics-checkmates-epic-combos/pattern-recognition/\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer noopener\"\r\n        >\r\n          4 Tips to Improve Pattern Recognition in Chess\r\n        </a>\r\n        ).\r\n      </p>\r\n\r\n      <figure className=\"resource-figure\">\r\n        <h3>Best Free Resources</h3>\r\n        <ul>\r\n          <li>\r\n            <a\r\n              href=\"https://www.chess.com/puzzles/rated?ref_id=9730606\"\r\n              rel=\"noreferrer noopener\"\r\n              target=\"_blank\"\r\n            >\r\n              Chess.com Tactics\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"https://chesspuzzle.net/\"\r\n              rel=\"noreferrer noopener\"\r\n              target=\"_blank\"\r\n            >\r\n              ChessPuzzle.net\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </figure>\r\n\r\n      <h3>Top 4 Recommendations</h3>\r\n      <iframe\r\n        className=\"amazon-product\"\r\n        style={{ width: \"120px\", height: \"240px\" }}\r\n        marginWidth=\"0\"\r\n        marginHeight=\"0\"\r\n        scrolling=\"no\"\r\n        frameBorder=\"0\"\r\n        src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=tf_til&ad_type=product_link&tracking_id=chessintellec-20&marketplace=amazon&amp;region=US&placement=0553263153&asins=0553263153&linkId=70267ae8f2b27ee7f209932585da6422&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\"\r\n      ></iframe>\r\n      <iframe\r\n        className=\"amazon-product\"\r\n        style={{ width: \"120px\", height: \"240px\" }}\r\n        marginWidth=\"0\"\r\n        marginHeight=\"0\"\r\n        scrolling=\"no\"\r\n        frameBorder=\"0\"\r\n        src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=tf_til&ad_type=product_link&tracking_id=chessintellec-20&marketplace=amazon&amp;region=US&placement=1901983056&asins=1901983056&linkId=ca1e86ae6499f22179dd99f38022158c&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\"\r\n      ></iframe>\r\n      <iframe\r\n        className=\"amazon-product\"\r\n        style={{ width: \"120px\", height: \"240px\" }}\r\n        marginWidth=\"0\"\r\n        marginHeight=\"0\"\r\n        scrolling=\"no\"\r\n        frameBorder=\"0\"\r\n        src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=tf_til&ad_type=product_link&tracking_id=chessintellec-20&marketplace=amazon&amp;region=US&placement=1901983994&asins=1901983994&linkId=37d74a821cfcdeb986e269336104b7bc&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\"\r\n      ></iframe>\r\n      <iframe\r\n        className=\"amazon-product\"\r\n        style={{width:\"120px\",height:\"240px\"}}\r\n        marginWidth=\"0\"\r\n        marginHeight=\"0\"\r\n        scrolling=\"no\"\r\n        src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=tf_til&amp;ad_type=product_link&amp;tracking_id=chessintellec-20&amp;marketplace=amazon&amp;region=US&amp;placement=1857444000&amp;asins=1857444000&amp;linkId=b870d78f625e1adf8c0f468806903d35&amp;show_border=true&amp;link_opens_in_new_window=true&amp;price_color=333333&amp;title_color=0066c0&amp;bg_color=ffffff\"\r\n        frameBorder=\"0\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default tacticsResources;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\openings.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\strategy.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\disclosurePolicy.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\oneClickCheckout.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\thankYou.js",[],{"ruleId":"265","replacedBy":"266"},{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","severity":1,"message":"270","line":112,"column":11,"nodeType":"271","messageId":"272","endLine":142,"endColumn":6},{"ruleId":"273","severity":1,"message":"274","line":2,"column":10,"nodeType":"275","messageId":"276","endLine":2,"endColumn":15},{"ruleId":"265","replacedBy":"277"},{"ruleId":"267","replacedBy":"278"},{"ruleId":"265","replacedBy":"279"},{"ruleId":"267","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":36,"column":8,"nodeType":"283","endLine":36,"endColumn":36,"suggestions":"284"},{"ruleId":"281","severity":1,"message":"285","line":68,"column":7,"nodeType":"283","endLine":68,"endColumn":9,"suggestions":"286"},{"ruleId":"281","severity":1,"message":"287","line":22,"column":6,"nodeType":"283","endLine":22,"endColumn":20,"suggestions":"288"},{"ruleId":"281","severity":1,"message":"289","line":46,"column":8,"nodeType":"283","endLine":46,"endColumn":10,"suggestions":"290"},{"ruleId":"281","severity":1,"message":"289","line":46,"column":8,"nodeType":"283","endLine":46,"endColumn":10,"suggestions":"291"},{"ruleId":"281","severity":1,"message":"289","line":45,"column":8,"nodeType":"283","endLine":45,"endColumn":10,"suggestions":"292"},{"ruleId":"281","severity":1,"message":"293","line":45,"column":8,"nodeType":"283","endLine":45,"endColumn":15,"suggestions":"294"},{"ruleId":"281","severity":1,"message":"295","line":59,"column":8,"nodeType":"283","endLine":59,"endColumn":18,"suggestions":"296"},{"ruleId":"281","severity":1,"message":"297","line":98,"column":8,"nodeType":"283","endLine":98,"endColumn":10,"suggestions":"298"},{"ruleId":"281","severity":1,"message":"299","line":58,"column":8,"nodeType":"283","endLine":58,"endColumn":10,"suggestions":"300"},{"ruleId":"281","severity":1,"message":"301","line":62,"column":8,"nodeType":"283","endLine":62,"endColumn":42,"suggestions":"302"},{"ruleId":"281","severity":1,"message":"303","line":98,"column":8,"nodeType":"283","endLine":98,"endColumn":21,"suggestions":"304"},{"ruleId":"273","severity":1,"message":"305","line":1,"column":8,"nodeType":"275","messageId":"276","endLine":1,"endColumn":13},{"ruleId":"306","severity":1,"message":"307","line":47,"column":7,"nodeType":"308","endLine":55,"endColumn":8},{"ruleId":"306","severity":1,"message":"307","line":56,"column":7,"nodeType":"308","endLine":64,"endColumn":8},{"ruleId":"306","severity":1,"message":"307","line":65,"column":7,"nodeType":"308","endLine":73,"endColumn":8},{"ruleId":"306","severity":1,"message":"307","line":74,"column":7,"nodeType":"308","endLine":82,"endColumn":8},"no-native-reassign",["309"],"no-negated-in-lhs",["310"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'games', 'games', 'gamenum', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'gamenum'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'store' is defined but never used.","Identifier","unusedVar",["309"],["310"],["309"],["310"],"react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'black' and 'white'. Either include them or remove the dependency array.","ArrayExpression",["311"],"React Hook useEffect has missing dependencies: 'black', 'max', and 'white'. Either include them or remove the dependency array.",["312"],"React Hook useEffect has a missing dependency: 'games'. Either include it or remove the dependency array.",["313"],"React Hook useEffect has a missing dependency: 'tactics'. Either include it or remove the dependency array.",["314"],["315"],["316"],"React Hook useEffect has missing dependencies: 'Openings', 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["317"],"React Hook useEffect has missing dependencies: 'blunder', 'inaccuracy', and 'mistake'. Either include them or remove the dependency array.",["318"],"React Hook useEffect has missing dependencies: 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'modalID'. Either include it or remove the dependency array.",["320"],"React Hook useEffect has a missing dependency: 'maxGames'. Either include it or remove the dependency array.",["321"],"React Hook useEffect has a missing dependency: 'logs'. Either include it or remove the dependency array.",["322"],"'React' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"329","fix":"331"},{"desc":"329","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},"Update the dependencies array to be: [white, black]",{"range":"345","text":"346"},"Update the dependencies array to be: [black, max, white]",{"range":"347","text":"348"},"Update the dependencies array to be: [games, games.length]",{"range":"349","text":"350"},"Update the dependencies array to be: [tactics]",{"range":"351","text":"352"},{"range":"353","text":"352"},{"range":"354","text":"352"},"Update the dependencies array to be: [Games, Openings, blunders, inaccuracy, mistakes]",{"range":"355","text":"356"},"Update the dependencies array to be: [blunder, inaccuracy, mistake, openings]",{"range":"357","text":"358"},"Update the dependencies array to be: [blunders, inaccuracy, mistakes]",{"range":"359","text":"360"},"Update the dependencies array to be: [modalID]",{"range":"361","text":"362"},"Update the dependencies array to be: [receivedGameData, failedGameData, maxGames]",{"range":"363","text":"364"},"Update the dependencies array to be: [logs, logs.length]",{"range":"365","text":"366"},[1304,1332],"[white, black]",[2209,2211],"[black, max, white]",[677,691],"[games, games.length]",[1601,1603],"[tactics]",[1455,1457],[1375,1377],[1784,1791],"[Games, Openings, blunders, inaccuracy, mistakes]",[2389,2399],"[blunder, inaccuracy, mistake, openings]",[3360,3362],"[blunders, inaccuracy, mistakes]",[1896,1898],"[modalID]",[2170,2204],"[receivedGameData, failedGameData, maxGames]",[3305,3318],"[logs, logs.length]"]