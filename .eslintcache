[{"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js":"1","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js":"2","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js":"3","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js":"4","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js":"5","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js":"6","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js":"7","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js":"8","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js":"9","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js":"10","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js":"11","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js":"12","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js":"13","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js":"14","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js":"15","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js":"16","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js":"17","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js":"18","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js":"19","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js":"20","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js":"21","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js":"22","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js":"23","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js":"24","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js":"25","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js":"26","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js":"27","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js":"28","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js":"29","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js":"30","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js":"31","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js":"32","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js":"33","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js":"34","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js":"35","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js":"36","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js":"37","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js":"38","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js":"39","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js":"40","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js":"41","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js":"42","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js":"43","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js":"44","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js":"45","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\wdyr.js":"46","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\ResourcesTab.js":"47","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\miscellaneous.js":"48","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\endgames.js":"49","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\tactics.js":"50","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\openings.js":"51","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\strategy.js":"52","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\disclosurePolicy.js":"53","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\oneClickCheckout.js":"54","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\thankYou.js":"55"},{"size":222,"mtime":1610052233537,"results":"56","hashOfConfig":"57"},{"size":880,"mtime":1610052202003,"results":"58","hashOfConfig":"57"},{"size":4408,"mtime":1609804245513,"results":"59","hashOfConfig":"57"},{"size":3916,"mtime":1609546127339,"results":"60","hashOfConfig":"57"},{"size":777,"mtime":1610043532898,"results":"61","hashOfConfig":"57"},{"size":3758,"mtime":1610057769035,"results":"62","hashOfConfig":"57"},{"size":450,"mtime":1607486841061,"results":"63","hashOfConfig":"57"},{"size":1103,"mtime":1609528850153,"results":"64","hashOfConfig":"57"},{"size":9686,"mtime":1609537169105,"results":"65","hashOfConfig":"57"},{"size":11653,"mtime":1609528839959,"results":"66","hashOfConfig":"57"},{"size":3408,"mtime":1608145525206,"results":"67","hashOfConfig":"57"},{"size":692,"mtime":1607886954037,"results":"68","hashOfConfig":"57"},{"size":2881,"mtime":1610065581887,"results":"69","hashOfConfig":"57"},{"size":3832,"mtime":1610077141960,"results":"70","hashOfConfig":"57"},{"size":2993,"mtime":1610058529962,"results":"71","hashOfConfig":"57"},{"size":5910,"mtime":1610059606947,"results":"72","hashOfConfig":"57"},{"size":385,"mtime":1610052200729,"results":"73","hashOfConfig":"57"},{"size":317,"mtime":1610052172796,"results":"74","hashOfConfig":"57"},{"size":1908,"mtime":1610057281324,"results":"75","hashOfConfig":"57"},{"size":3183,"mtime":1610060064988,"results":"76","hashOfConfig":"57"},{"size":4566,"mtime":1610057996651,"results":"77","hashOfConfig":"57"},{"size":1362,"mtime":1610059972232,"results":"78","hashOfConfig":"57"},{"size":3903,"mtime":1610065953389,"results":"79","hashOfConfig":"57"},{"size":2822,"mtime":1610075848383,"results":"80","hashOfConfig":"57"},{"size":2909,"mtime":1610058549956,"results":"81","hashOfConfig":"57"},{"size":4509,"mtime":1610066031439,"results":"82","hashOfConfig":"57"},{"size":4383,"mtime":1610066304528,"results":"83","hashOfConfig":"57"},{"size":1502,"mtime":1610052152969,"results":"84","hashOfConfig":"57"},{"size":1903,"mtime":1610052157924,"results":"85","hashOfConfig":"57"},{"size":2456,"mtime":1610052150248,"results":"86","hashOfConfig":"57"},{"size":2544,"mtime":1610052154840,"results":"87","hashOfConfig":"57"},{"size":4220,"mtime":1610052156363,"results":"88","hashOfConfig":"57"},{"size":1425,"mtime":1610052178588,"results":"89","hashOfConfig":"57"},{"size":3833,"mtime":1610057870606,"results":"90","hashOfConfig":"57"},{"size":7235,"mtime":1610069494398,"results":"91","hashOfConfig":"57"},{"size":581,"mtime":1610052175384,"results":"92","hashOfConfig":"57"},{"size":788,"mtime":1610052171697,"results":"93","hashOfConfig":"57"},{"size":5509,"mtime":1610052163549,"results":"94","hashOfConfig":"57"},{"size":2843,"mtime":1609536718637,"results":"95","hashOfConfig":"57"},{"size":342,"mtime":1609540907536,"results":"96","hashOfConfig":"57"},{"size":4265,"mtime":1610052168712,"results":"97","hashOfConfig":"57"},{"size":3041,"mtime":1610052167124,"results":"98","hashOfConfig":"57"},{"size":3407,"mtime":1610052162549,"results":"99","hashOfConfig":"57"},{"size":3051,"mtime":1610052164836,"results":"100","hashOfConfig":"57"},{"size":2774,"mtime":1610052170162,"results":"101","hashOfConfig":"57"},{"size":196,"mtime":1610051899609,"results":"102","hashOfConfig":"57"},{"size":787,"mtime":1609887679612,"results":"103","hashOfConfig":"57"},{"size":277,"mtime":1609876424664,"results":"104","hashOfConfig":"57"},{"size":2773,"mtime":1609872790180,"results":"105","hashOfConfig":"57"},{"size":3920,"mtime":1610077498279,"results":"106","hashOfConfig":"57"},{"size":3972,"mtime":1610077446540,"results":"107","hashOfConfig":"57"},{"size":2585,"mtime":1610077487036,"results":"108","hashOfConfig":"57"},{"size":623,"mtime":1609970452591,"results":"109","hashOfConfig":"57"},{"size":373,"mtime":1609883271683,"results":"110","hashOfConfig":"57"},{"size":426,"mtime":1609884167681,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"gju65z",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"114"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"114"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"114"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"114"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"114"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"114"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"114"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"114"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js",[],["241","242"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js",["243"],"import { store } from '../State/store';\r\nimport { ArchiveURL } from './urls';\r\nimport { \r\n\tColorfromGame, \r\n\tCreateURL, \r\n\tGetURL, \r\n\tIDfromURL, \r\n\tResultFromGame, \r\n\tTimeControlFromGame, \r\n\tTimeClassFromGame,\r\n\tDateFromGameSeconds,\r\n\tgetOpponentfromGame,\r\n\t// addLogSelector, \r\n\taddLog } from './helpers';\r\nimport { AnalyzeGame } from '../BusinessLogic/Analyze';\r\n\r\nexport const timeout = (ms = 5000) => { \r\n\treturn new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const initializeState = () => {\r\n\r\n\taddLog(\"Starting Analysis\")\r\n\tstore.getState().setAnalysisStarted();\r\n\t\r\n\r\n\t// check if less then 100 games\r\n\tconst maxGamesAllowed = store.getState().maxGamesAllowed;\r\n\r\n\tif (store.getState().Games.length < maxGamesAllowed) {\r\n\t\t// console.log(\"hellow?\")\r\n\t\taddLog(\"Collecting game IDs\")\r\n\t\taddLog(\"Requesting game archive\")\r\n\r\n        GetURL(CreateURL(ArchiveURL, store.getState().UserName))\r\n\t\t\t.then((res, err) => {\r\n\t\t\t\t\t// primitive error handling\r\n\t\t\t\t\tif(err) { \r\n\t\t\t\t\t\tconsole.warn(err);\r\n\t\t\t\t\t\taddLog(`[ERROR] Failed to retrieve game archive for ${store.getState().UserName}`)\r\n\t\t\t\t\t\treturn; \r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(res.data.status === 404) return;\r\n\r\n\t\t\t\t\tstore.getState().setGameArchives(res.data.archives)\t\t// think a synchronous call to update Archives\r\n\t\t\t\t\tconsole.log(store.getState().GameArchive)\t\t\t\t// prints out updated state\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn GameIDfromArchive();\r\n\t\t\t})\r\n\t\t\t.then(async () => {\r\n\t\t\t\tstore.getState().setAnalysisPart(2) // set part to \"getting analysis data\"\r\n\r\n\t\t\t\tfor(let i = 0; i < maxGamesAllowed; i++) {\r\n\t\t\t\t\tAnalyzeGame(store.getState().Games[i]);\r\n\t\t\t\t\tconsole.log(`Request data Game ${i}`)\r\n\t\t\t\t\taddLog(`[REQUEST] Data for Game ${store.getState()?.Games?.[i]?.id}`)\r\n\t\t\t\t\t\r\n\t\t\t\t\tawait timeout(1000);\r\n\t\t\t\t}\r\n\t\t\t}).then(() => {\r\n\t\t\t\t// console.log(JSON.stringify(tacticsObj, null, '  '))\r\n\t\t\t\taddLog(`Finished loading games`)\r\n\t\t\t\t\r\n\t\t\t\tstore.getState().setLoadingFalse();\r\n\r\n\t\t\t\t// store.getState().setAnalysisPart(3) // set part to \"Finished!\"\r\n\t\t\t\tstore.getState().setAnalysisEnded();\r\n\r\n\t\t\t}).catch(err => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * @description Adds the GameIDs to GameID array from the archive\r\n * @returns {void} A promise  \r\n * @todo don't hardcode # of games\r\n */\r\nconst GameIDfromArchive = async () => {\r\n\t\t// const addLog = store(state => state.setDebugLogs)\r\n\r\n\t\tstore.getState().setAnalysisPart(1)\r\n\t\taddLog(`Extracting game id from archive`)\r\n\r\n\r\n\t\t// console.log(\"Current Store: \", store.getState())\r\n\t\tconst maxGamesAllowed = store.getState().maxGamesAllowed;\r\n\t\tlet archives = store.getState().GameArchive;\r\n\t\tlet i = archives.length - 1;\r\n\t\tlet gamenum = store.getState().Games.length;\r\n\t\tlet games;\r\n\r\n\t\t// TESTS\r\n\t\t// 1. <100 games\r\n\t\t// 2. >100 games\r\n\t\t// 3. multiple archives\r\n\t\t// (async _ => {\r\n\t\t\twhile(archives[i] && i >= 0 && gamenum <= maxGamesAllowed) { \r\n\t\t\t\tconsole.log(\"GM top loop: \", gamenum)\t\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(archives[i])\r\n\r\n\t\t\t\tawait GetURL(archives[i])\r\n\t\t\t\t\t.then(res => {\r\n\t\t\t\t\t\t//  console.log(res.data)\r\n\t\t\t\t\t\tgames = res.data.games\r\n\r\n\t\t\t\t\t\t//  console.log(games.length)\r\n\r\n\t\t\t\t\t\tfor(let j = games.length - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\t// validation\r\n\t\t\t\t\t\t\tif(gamenum > maxGamesAllowed) {\tbreak;\t}\t// break if exceed limit. In future not hardcode\r\n\t\t\t\t\t\t\tif(games[j].rules !== \"chess\") { continue; } // check if rules are chess or variant\r\n\r\n\t\t\t\t\t\t\tconst id = IDfromURL(games[j].url);\r\n\t\t\t\t\t\t\tconst color = ColorfromGame(games[j], store.getState().UserName);\r\n\t\t\t\t\t\t\tconst result = ResultFromGame(games[j], color);\r\n\t\t\t\t\t\t\tconst tc = TimeControlFromGame(games[j]);\r\n\t\t\t\t\t\t\tconst tclass = TimeClassFromGame(games[j]);\r\n\t\t\t\t\t\t\tconst date = DateFromGameSeconds(games[j].end_time, true);\r\n\t\t\t\t\t\t\tconst opp = getOpponentfromGame(games[j], color)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// FIX ME - this will not actually prevent duplicates b/c it's in an object form\r\n\t\t\t\t\t\t\tif (!store.getState().Games.includes(id)) { \t// could implement binarysearch in the future\r\n\t\t\t\t\t\t\t\tstore.getState().AddGame(id, color, result, tc, tclass, date, opp);\r\n\t\t\t\t\t\t\t\tgamenum += 1;\r\n\t\t\t\t\t\t\t\tstore.getState().SetNeedAnalysis();\t// performance optim: only do once\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// console.log(\"GN in loop: \", gamenum)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(err => console.log(err))\r\n\t\t\t\ti--;\t\r\n\t\t\t}\r\n\t\t\r\n\t\taddLog(`Finished extracting games`)\r\n\t\t\t// console.log(\"gameids state: \", store.getState().Games)\r\n\r\n\t\t// Analyze();\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js",["244"],"import axios from 'axios'\r\n// axios.defaults.headers.common['User-Agent'] = 'Chess Intellect (chessintellect.com)'\r\n// axios.defaults.headers.common['Accept'] = 'application/json, text/plain, */*'\r\n\r\n\r\nexport const ArchiveURL = 'https://api.chess.com/pub/player/{}/games/archives';\r\nexport const NewAnalysisURL = 'https://www.chess.com/analysis/game/live/{}?tab=report'\r\nexport const GetAnalysisURL = 'https://www.chess.com/callback/analysis/game/live/{}/all'\r\nexport const UserProfileURL = 'https://api.chess.com/pub/player/{}'\r\nexport const CorsProxy = 'https://mysterious-harbor-28403.herokuapp.com/'\r\nexport const ChesscomMembership = 'https://www.chess.com/membership?ref_id=9730606'\r\nexport const ChesscomLoginURL = 'https://www.chess.com/login_and_go?ref_id=9730606'\r\n\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js",["245"],"import React, { useState } from 'react';\r\nimport { store } from '../State/store';\r\n\r\nconst LoadForm = () => {\r\n    const [uname, setUname] = useState(\"\");\r\n\r\n    <form>\r\n        <input \r\n            type=\"text\" \r\n            value={uname} \r\n            onChange ={(e) => setUname(e.targe.value)} \r\n            placeholder=\"Player Name\" \r\n            name=\"username\"></input>\r\n        <button>Submit</button>\r\n\t</form>\r\n}\r\n\r\nexport default LoadForm;\r\n",["246","247"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js",["248"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js",["249","250","251"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js",["252"],"import React from 'react'\r\nimport { XAxis,YAxis,BarSeries,DensitySeries } from '@data-ui/histogram'\r\nimport { baseLabel } from '@data-ui/theme/lib/svgLabel'\r\nimport { store } from '../../State/store'\r\nimport ResponsiveHistogram from '../ResponsiveHistogram'\r\n\r\nconst Histogram_MovePly = ({ type = \"blunder\", x = \"value\", width, height }) => {\r\n\r\n    const MoveData = {\r\n        blunder: store(state => state.blunder),\r\n        mistake: store(state => state.mistake),\r\n        inaccuracy: store(state => state.inaccuracy)\r\n    }\r\n\r\n    const Fill = {\r\n        blunder: \"#CA3432\",\r\n        mistake: \"#E58F2A\",\r\n        inaccuracy: \"#6650D1\" // \"#5c533b\"\r\n    }\r\n\r\n    // this is only unique thing - might be able to extract\r\n    const DataAccessor = {\r\n        percent: datum => datum?.plyPercent,\r\n        value: datum => datum?.ply\r\n    }\r\n\r\n\r\n    // console.log(width, height)\r\n    // console.log(DataAccessor[x])\r\n    // console.log(MoveData)\r\n    return (\r\n        <ResponsiveHistogram\r\n            ariaLabel=\"\"\r\n            height={height}\r\n            width={width}\r\n            orientation=\"vertical\"\r\n            cumulative={false}\r\n            binCount={20}\r\n            binType=\"numeric\"\r\n            valueAccessor={DataAccessor[x]}\r\n            renderTooltip={({ event, datum, data, color }) => (\r\n                <div>\r\n                  <strong style={{ color }}>{datum.bin0} to {datum.bin1}</strong>\r\n                  <div><strong>count </strong>{datum.count}</div>\r\n                  <div><strong>cumulative </strong>{datum.cumulative}</div>\r\n                  <div><strong>density </strong>{datum.density}</div>\r\n                </div>\r\n            )}\r\n        >\r\n            <BarSeries animated rawData={MoveData[type]} fill={Fill[type]}/>\r\n            {/* <DensitySeries\r\n                stroke=\"black\"\r\n                showArea={false}\r\n                smoothing={0.01}\r\n                kernel=\"gaussian\"\r\n                rawData={MoveData[type]}\r\n                fill={Fill[type]}\r\n            /> */}\r\n\r\n            <XAxis \r\n                label={x === \"percent\" ? \"Move Ply % of Total Game\" : \"Move Ply\" }\r\n                axisStyles = {{\r\n                    label: {\r\n                        'bottom': {\r\n                            ...baseLabel,\r\n                            fontSize: '18px',\r\n                            fill: 'black',\r\n                            y: '46'\r\n                        },\r\n                    }\r\n                }}\r\n            />\r\n            <YAxis \r\n                label=\"Count\"\r\n                axisStyles = {{\r\n                    label: {\r\n                    'left': {\r\n                        ...baseLabel,\r\n                        fontSize: '18px',\r\n                        fill: 'black',\r\n                        y: -35\r\n                    },\r\n                    }\r\n                }}\r\n            />\r\n        </ResponsiveHistogram>\r\n    )\r\n}\r\n\r\n// Histogram_MovePly.whyDidYouRender = true\r\n\r\nexport default Histogram_MovePly","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js",["253"],"import React, { useState, useEffect } from 'react'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    // console.log(nameLookUp)\r\n    return (\r\n        <div style={{width: '300px',maxHeight:'200px'}}>\r\n            <strong>ECO:</strong> {data.eco} <br />\r\n            <strong>Name:</strong>\r\n                {data.name[0]}\r\n            <br />\r\n            <strong>Won:</strong> {data.Won || 0}   <br />\r\n            <strong>Lost:</strong> {data.Lost || 0}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst Barchart_Openings = ({ white, black, width, height }) => {\r\n    \r\n    const [loading, setLoading] = useState(true)\r\n    const [data, setData] = useState({})\r\n    const [max, setMax] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const d = {}\r\n\r\n        white.forEach(e => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += e.won || 0;\r\n                d[o].Lost += e.loss || 0;\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description);\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:e.won || 0, Lost:e.loss || 0}\r\n            }\r\n        })\r\n\r\n        black.forEach(e => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += (e.won || 0);\r\n                d[o].Lost += (e.loss || 0);\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description)\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:(e.won || 0), Lost:(e.loss || 0)}\r\n            }\r\n        })\r\n        \r\n        const final = Object.values(d)\r\n        let maxValue = max;\r\n        final.forEach(e => {\r\n            if((e.Won || 0) + (e.Lost || 0) > maxValue)  {\r\n                maxValue = (e.Won || 0) + (e.Lost || 0);\r\n            }\r\n        })\r\n        \r\n        // console.log(maxValue)\r\n        // console.log(d)\r\n        setData(() => Object.values(d))\r\n        setMax(() => maxValue)\r\n\r\n        // console.log(Object.values(d))\r\n        setLoading(() => false)\r\n    },[]);\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold', fontSize: '18px'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Results by Openings\r\n            </text>\r\n        )\r\n    } \r\n\r\n    if(!loading) {\r\n        return (\r\n            <Bar\r\n                data={data.sort((a, b) => b.Won === a.Won ? b.Won + b.Lost - (a.Won + a.Lost) : b.Won - a.Won)}\r\n                width={width}\r\n                height={height}\r\n                keys={[ 'Won', 'Lost']}\r\n                indexBy=\"eco\"\r\n                margin={{ top: 40, right: (width > 600) ? 130 : 80, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                valueScale={{ type: 'linear' }}\r\n                indexScale={{ type: 'band', round: true }}\r\n                colors={{ scheme: 'nivo' }}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    // tickPadding: 5,\r\n                    tickRotation: -30,\r\n                    legend: 'ECO Codes',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 40,\r\n                    size: 40\r\n                }}\r\n                enableGridX\r\n                layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n                axisLeft={{\r\n                    tickValues:[...Array(max + 1).keys()],\r\n                    legend: 'Count',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -30,\r\n                }}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: '#000000', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                tooltip={CustomTooltip}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                theme={{\r\n                    axis: {\r\n                        ticks: {\r\n                            text: {\r\n                                fontSize: '12px',\r\n                            }\r\n                        },\r\n                        legend: {\r\n                            text: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                color: 'black'\r\n                            }\r\n                        }\r\n                    },\r\n                    legends: {\r\n                        text: {\r\n                            fontSize: '12px',\r\n                        }\r\n                    },\r\n                    textColor: 'black'\r\n\r\n                }}\r\n\r\n                animate={false}\r\n            />\r\n        )\r\n    } \r\n    \r\n    return null\r\n \r\n}\r\n\r\n// Barchart_Openings.whyDidYouRender = true\r\n\r\nexport default Barchart_Openings;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js",["254"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport Pie from '../ResponsivePie'\r\nimport { mapTermToGameResult } from '../../BusinessLogic/helpers'\r\n\r\nconst defaultState = {\"win\":0,\"draw\":0,\"loss\":0}\r\n\r\nconst Pie_Results = ({ width, height }) => {\r\n    // console.log(store.getState().Games)\r\n    \r\n    const data = store(state => state.Games)\r\n    const [loading, setLoading] = useState(true)\r\n    const [reason, setReason] = useState({\"win\":0,\"draw\":0,\"loss\":0})\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        setReason(() => { return {\"win\":0,\"draw\":0,\"loss\":0}})\r\n\r\n        for(let i = 0; i < data.length; i++) {\r\n            const type = mapTermToGameResult(data[i].result);\r\n            // console.log(type)\r\n\r\n            if(type === \"win\") {\r\n                setReason((e) => {\r\n                    return {...e, \"win\": e.win + 1}\r\n                })\r\n            } else if (type === \"draw\") {\r\n                setReason((e) => {\r\n                    return {...e, \"draw\": e.draw + 1}\r\n                })   \r\n            } else {\r\n                setReason((e) => {\r\n                    return {...e, \"loss\": e.loss + 1}\r\n                })\r\n            }\r\n        }\r\n\r\n        setLoading(() => false)\r\n        // console.log(data, reason)\r\n    }, [data]);\r\n\r\n    if(!loading) {\r\n        const data = Object.keys(reason).map((e) => { \r\n            return {id: e, label: e, value: reason[e]}\r\n        })\r\n        console.log(data)\r\n\r\n        return (\r\n            <Pie data={data} width={width} height={height} title=\"Game Results\" />\r\n        )\r\n    }\r\n\r\n    return null; // default return\r\n}\r\n\r\n// Pie_Results.whyDidYouRender = true\r\n\r\nexport default Pie_Results;\r\n\r\n\r\n/*\r\n\r\n            <ResponsivePie \r\n                data={ data }\r\n                margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n                padAngle={3}\r\n                cornerRadius={2}\r\n                innerRadius={0.5}\r\n                sortByValue={true}\r\n                enableRadialLabels={true}\r\n                radialLabelsSkipAngle={10}\r\n                radialLabelsLinkHorizontalLength={8}\r\n                sliceLabelsSkipAngle={10}\r\n                sliceLabelsSkipAngle={10}\r\n                borderWidth={1}\r\n                borderColor=\"#a17a5b\"\r\n                theme={{\r\n                    fontSize: \"16px\",\r\n                    fontWeight: 'bold'\r\n                }}\r\n                borderColor={{ from: 'color', modifiers: [ [ 'darker', '1.4' ] ] }}\r\n                defs={[\r\n                    {\r\n                        id: 'dots',\r\n                        type: 'patternDots',\r\n                        background: 'inherit',\r\n                        color: 'rgba(255, 255, 255, 0.3)',\r\n                        size: 4,\r\n                        padding: 1,\r\n                        stagger: true\r\n                    },\r\n                    {\r\n                        id: 'lines',\r\n                        type: 'patternLines',\r\n                        background: 'inherit',\r\n                        color: 'rgba(255, 255, 255, 0.3)',\r\n                        rotation: -45,\r\n                        lineWidth: 6,\r\n                        spacing: 10\r\n                    }\r\n                ]}\r\n                fill={\r\n                    Object.keys(data).map((e) => {\r\n                        console.log(e)\r\n                        return {match: { id: data[e].id}, id: (e % 2 === 0) ? 'lines' : 'dots'}\r\n                    })\r\n                }\r\n                legends={[\r\n                    {\r\n                        anchor: 'right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 65,\r\n                        translateY: 0,\r\n                        itemsSpacing: 5,\r\n                        itemWidth: 100,\r\n                        itemHeight: 18,\r\n                        itemTextColor: '#999',\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 1,\r\n                        symbolSize: 18,\r\n                        symbolShape: 'square',\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemTextColor: '#000',\r\n                                    backgroundColor: '#FFFF00'\r\n                                }\r\n                            }\r\n                        ]\r\n                    }]}\r\n            />\r\n*/","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js",["255"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js",["256"],"import React from 'react'\r\nimport { XAxis,YAxis,BarSeries,DensitySeries } from '@data-ui/histogram'\r\nimport { baseLabel } from '@data-ui/theme/lib/svgLabel'\r\nimport { store } from '../../State/store'\r\nimport ResponsiveHistogram from '../ResponsiveHistogram'\r\n\r\n\r\nconst Histogram_MoveTime = ({ type = \"blunder\", x = \"percent\", width, height }) => {\r\n\r\n    const MoveData = {\r\n        blunder: store(state => state.blunder),\r\n        mistake: store(state => state.mistake),\r\n        inaccuracy: store(state => state.inaccuracy)\r\n    }\r\n\r\n    const Fill = {\r\n        blunder: \"#CA3432\",\r\n        mistake: \"#E58F2A\",\r\n        inaccuracy: \"#6650D1\" // \"#5c533b\"\r\n    }\r\n\r\n    const DataAccessor = {\r\n        percent: datum => datum?.timeToThinkPercent,\r\n        value: datum => datum?.timeToThink\r\n    }\r\n\r\n    // console.log(blunders, mistakes)\r\n    return (\r\n        // <ResponsiveHistogram\r\n        <ResponsiveHistogram\r\n            ariaLabel=\"\"\r\n            height={height}\r\n            width={width}\r\n            orientation=\"vertical\"\r\n            cumulative={false}\r\n            binCount={20}\r\n            binType=\"numeric\"\r\n            valueAccessor={DataAccessor[x]}\r\n            renderTooltip={({ event, datum, data, color }) => (\r\n                <div>\r\n                  <strong style={{ color }}>{datum.bin0} to {datum.bin1}</strong>\r\n                  <div><strong>count </strong>{datum.count}</div>\r\n                  <div><strong>cumulative </strong>{datum.cumulative}</div>\r\n                  <div><strong>density </strong>{datum.density}</div>\r\n                </div>\r\n            )}\r\n        >\r\n            <BarSeries animated rawData={MoveData[type]} fill={Fill[type]}/>\r\n            {/* <DensitySeries\r\n                stroke=\"black\"\r\n                showArea={false}\r\n                smoothing={0.01}\r\n                kernel=\"gaussian\"\r\n                rawData={MoveData[type]}\r\n                fill={Fill[type]}\r\n            /> */}\r\n\r\n            <XAxis \r\n                label= {x === \"percent\" ? \"Time Left % of Total Game\" : \"Time Left (s)\" }\r\n                axisStyles = {{\r\n                    label: {\r\n                    'bottom': {\r\n                        ...baseLabel,\r\n                        fontSize: '18px',\r\n                        fill: 'black',\r\n                        y: '46'\r\n                    },\r\n                    }\r\n                }}\r\n            />\r\n\r\n            <YAxis \r\n                label=\"Count\"\r\n                axisStyles = {{\r\n                    label: {\r\n                    'left': {\r\n                        ...baseLabel,\r\n                        fontSize: '18px',\r\n                        fill: 'black',\r\n                        y: -35\r\n                    },\r\n                    }\r\n                }}\r\n            />\r\n        </ResponsiveHistogram>\r\n    )\r\n}\r\n\r\n// Histogram_MoveTime.whyDidYouRender = true\r\n\r\nexport default Histogram_MoveTime","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js",["257"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js",["258"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js",["259"],"import React, {useState, useEffect} from 'react'\r\nimport { store } from \"../State/store\"\r\nimport 'react-data-grid/dist/react-data-grid.css'\r\nimport Table from './Table'\r\n\r\nconst TacticsTable = () => {\r\n\r\n    const [rows, setRows] = useState([])\r\n    const tactics = store((state) => {\r\n        return [\r\n            ...state.winningExchange,\r\n            ...state.underdefended,\r\n            ...state.trapped,\r\n            ...state.hanging,\r\n            ...state.relativePin,\r\n            ...state.absolutePin,\r\n            ...state.skewer,\r\n            ...state.fork,\r\n            ...state.mate,\r\n        ]\r\n    })\r\n\r\n    useEffect(() => {\r\n        // console.log(tactics)\r\n        const t = tactics.map((e, i) => {\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                name: e.type.name,\r\n                phase: e.phase,\r\n                move: Math.ceil(e.ply / 2),\r\n                ply: e.ply,\r\n                timeLeft: e?.timeToThink?.toFixed(1),\r\n                timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                result: e.won ? \"Won\" : \"Lost\",\r\n                eco:e.eco,\r\n                color:e.color,\r\n                opponent: e.opponent,\r\n                class: e.class,\r\n                caps: e.CAPS.toFixed(1)\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table data={rows} />\r\n    )\r\n\r\n}\r\n\r\n// TacticsTable.whyDidYouRender = true\r\n\r\nexport default TacticsTable","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js",["260"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n    {field: 'blunders', headerName: 'Blunders'},\r\n    {field: 'mistakes', headerName: 'Mistakes'},\r\n    {field: 'inaccuracies', headerName: 'Inaccuracies'}\r\n]\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const Games = store(state => state.Games)\r\n    const Openings = store(state => state.opening)\r\n    const blunders = store(state => state.blunder)\r\n    const mistakes = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        // console.log(Openings)\r\n        const t = Games.map((e, i) => {\r\n            // console.log(Openings.filter(obj => obj.id === e.id))\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                result: e.result === \"win\" ? \"Won\" : \"Lost\",\r\n                opponent: e.opponent,\r\n                color:e.color,\r\n                eco: Openings.filter(obj => obj.id === e.id)?.[0]?.eco,\r\n                caps: e?.CAPS?.toFixed(1),\r\n                blunders: blunders.filter(obj => obj.id === e.id).length,\r\n                mistakes: mistakes.filter(obj => obj.id === e.id).length,\r\n                inaccuracies: inaccuracy.filter(obj => obj.id === e.id).length\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [Games])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\n// Table_Game.whyDidYouRender = true\r\n\r\nexport default Table_Game","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js",["261"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'won',headerName:\"Won\",},\r\n    {field: 'lost',headerName:\"Lost\",},\r\n    // {field: 'count',headerName:\"Total\",filter: true,},\r\n    {field: 'aveCaps',headerName:\"Average CAPS\", width:108},\r\n    {field: 'blunders',headerName:\"Blunders\",},\r\n    {field: 'mistakes',headerName:\"Mistakes\",},\r\n    {field: 'inaccuracy',headerName:\"Inaccuracies\",},\r\n]\r\nconst Table_Opening = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const openings = store(state => state.opening)\r\n    const blunder = store(state => state.blunder)\r\n    const mistake = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    // console.log(openings)\r\n\r\n    useEffect(() => {\r\n        // console.log('hi')\r\n        const data = {};\r\n        \r\n        openings.forEach((e, i) => {\r\n            if(!data[e.eco]) {\r\n                data[e.eco] = {\r\n                    eco: e.eco,\r\n                    count: 1,\r\n                    won: 0,\r\n                    lost: 0,\r\n                    aveCaps: e.caps,\r\n                    blunders: blunder.filter(obj => obj.id === e.id).length,\r\n                    mistakes: mistake.filter(obj => obj.id === e.id).length,\r\n                    inaccuracy: inaccuracy.filter(obj => obj.id === e.id).length\r\n                };\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n            }\r\n            else {\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n                data[e.eco].aveCaps = (data[e.eco].aveCaps * data[e.eco].count + e.caps) / (data[e.eco].count + 1);\r\n                data[e.eco].count += 1;\r\n                data[e.eco].blunders += blunder.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].mistakes += mistake.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].inaccuracy += inaccuracy.filter(obj => obj.id === e.id).length;\r\n            }\r\n        })\r\n        \r\n        Object.keys(data).forEach(e => {\r\n            data[e].aveCaps = data[e].aveCaps.toFixed(1)\r\n        })\r\n        setRows(() => Object.values(data))\r\n        // console.log(data)\r\n        // console.log(Object.values(data))\r\n    }, [openings])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} width={720} />\r\n    )\r\n}\r\n\r\n// Table_Opening.whyDidYouRender = true\r\n\r\nexport default Table_Opening","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js",["262"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'type'},\r\n    {field: 'phase', filter: 'Phase'},\r\n    {field: 'move', filter: 'Move'},\r\n    {field: 'ply', filter: 'Move'},\r\n    {field: 'timeLeft', filter: 'Time Left (s)'},\r\n    {field: 'timeLeftPercent', filter: 'Time Left (%)'},\r\n    {field: 'fen', width: 190},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n]\r\n\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    // const Games = store(state => state.Games)\r\n    const blunders = store(state => state.blunder)\r\n    const mistakes = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        console.log(blunders)\r\n        const t = []\r\n\r\n        blunders.forEach(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Blunder',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        mistakes.forEach(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Mistake',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        inaccuracy.forEach(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Inaccuracy',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\n// Table_Game.whyDidYouRender = true\r\n\r\nexport default Table_Game\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//     console.log(tactics)\r\n//     const t = tactics.map((e, i) => {\r\n//         return {\r\n//             date: e.date.split(\" \")[0],\r\n//             name: e.type.name,\r\n//             phase: e.phase,\r\n//             move: Math.ceil(e.ply / 2),\r\n//             ply: e.ply,\r\n//             timeLeft: e.timeToThink.toFixed(1),\r\n//             timeLeftPercent: e.timeToThinkPercent.toFixed(1),\r\n//             gameID: e.id,\r\n//             result: e.won ? \"Won\" : \"Lost\",\r\n//             eco:e.eco,\r\n//             color:e.color,\r\n//             opponent: e.opponent,\r\n//             class: e.class,\r\n//             caps: e.CAPS.toFixed(1)\r\n//         }\r\n//     })\r\n\r\n//     setRows(() => t)\r\n// }, [])","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js",["263"],"import React, { useState } from 'react';\r\nimport { CreateURL, GetURL } from '../BusinessLogic/helpers';\r\nimport { UserProfileURL } from '../BusinessLogic/urls';\r\nimport { store } from '../State/store'\r\nimport { ChesscomMembership } from '../BusinessLogic/urls'\r\n\r\nconst UsernameForm = ({ setPage }) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [valid, setValid] = useState(null)\r\n    const [premium, setPremium] = useState(null)\r\n\r\n    const resetValidation = () => {\r\n        setValid(null);\r\n        setPremium(null);\r\n    }\r\n\r\n    const handleKeyPress = (e) => {\r\n        setValid(null);\r\n        setPremium(null);\r\n\r\n        if(e.keyCode === 32) {\r\n            e.preventDefault()\r\n        }\r\n\r\n        if(e.code === 'Enter' || e.code === \"NumpadEnter\") {\r\n            validateUsername(e.target.value);\r\n            console.log(e)\r\n        }\r\n    }\r\n    const handleSetUsername = (e) => {\r\n        if (e.target.value.includes(\" \")) {\r\n            const data = e.target.value.replace(/\\s/g, \"\");\r\n            setUsername(data)    \r\n        }\r\n        setUsername(e.target.value)\r\n    }\r\n\r\n    const validateUsername = async (username) => {\r\n        let v = false; // v for valid\r\n\r\n        const data = await GetURL(CreateURL(UserProfileURL, username))\r\n                .then((res) => {\r\n                    if(res.data.player_id) {\r\n                        v = true\r\n                    }\r\n                    return res.data;\r\n                })\r\n                .catch(err => console.warn(err));\r\n\r\n        if(data?.status === \"premium\") {\r\n            console.log(\"premium: \", true)\r\n            setPremium(true)\r\n        }\r\n        else if(v === true) {\r\n            setPremium(false)\r\n        }\r\n\r\n        setValid(v)\r\n\r\n        console.log(false)\r\n        return false;\r\n    }\r\n\r\n    const chooseBackgroundColor = (premium, valid) => {\r\n        console.log(premium, valid)\r\n        if(premium === true) {\r\n            return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n        }\r\n        else if(premium === false || valid === false) {\r\n            return {backgroundColor: \"#e03131\"}\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"username-form\">\r\n            <p className=\"username-form-instructions\" style={chooseBackgroundColor(premium, valid)}>{\r\n                (premium === true) ? `Hello ${username}! Click to proceed` :\r\n                (premium === false) ? `Only premium Chess.com members allowed.` :\r\n                (valid === false) ? `That is not a valid username. Please try again` : \"Please Enter Your Chess.com Username\"\r\n            }</p>\r\n            { (premium === false) ?\r\n                <p className=\"form-message\">\r\n                    Sadly you must be a premium member (<span title=\"The Vision Dashboard \r\n                    aggregates and analyzes the data that Chess.com stores from the analysis \r\n                    of your games. However, Chess.com only saves the analysis of premium members.\">Why?</span>). \r\n                    Never fear! You can start a <b>free trial</b> and renew for as low as $2.42/month.\r\n                    Alternatively, check out: <strong><a href=\"https://chessintellect.com/product-reviews/is-premium-chesscom-membership-worth-it/\" target=\"_blank\">Is a Premium Chess.com Membership Worth it? [2021]</a></strong>\r\n                </p> : null\r\n            }\r\n            {(premium !== true && premium !== false && valid !== false) ?\r\n                <input \r\n                    onChange={handleSetUsername} \r\n                    onKeyDown={e => handleKeyPress(e)}\r\n                    value={username}\r\n                    placeholder=\"Chess.com username\" \r\n                    type=\"text\"\r\n                    className=\"username-form-input\"\r\n                /> : null\r\n            }\r\n\r\n            <UsernameFormButtons \r\n                username={username}\r\n                resetValidation={resetValidation}\r\n                validateUsername={validateUsername}\r\n                setPage={setPage}\r\n                premium={premium} \r\n                valid={valid}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UsernameFormButtons = ({ setPage, username, resetValidation, validateUsername, premium, valid  }) => {\r\n    const setUsername = store(state => state.setUsername)\r\n    const username_zustand = store(state => state.UserName)\r\n\r\n    const nextPage = (u) => {\r\n        setPage(page => page + 1)\r\n        console.log(username_zustand)\r\n        setUsername(u)\r\n        console.log(username_zustand)\r\n    }\r\n\r\n    return (\r\n        <div className=\"username-form-buttons\">\r\n            {\r\n                (valid === false || premium === false) ? \r\n                    <button onClick={() => resetValidation()} className=\"grey-button\">Retry</button> : null\r\n            }\r\n            {\r\n                (valid === null && premium === null) ?\r\n                <button onClick={() => validateUsername(username)} className=\"orange-button\">Validate</button> : null\r\n            }\r\n            {\r\n                (valid === true && premium === false) ? \r\n                <button onClick={() => window.open(ChesscomMembership, '_blank')} className=\"green-button\">Free Trial</button> : null\r\n            }\r\n            {\r\n                (premium === true) ? <button onClick={() => nextPage(username)} className=\"orange-button\">Proceed</button> : null\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n// UsernameForm.whyDidYouRender = true\r\n\r\nexport default UsernameForm;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js",["264"],"import { useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * Creates DOM element to be used as React root.\r\n * @returns {HTMLElement}\r\n */\r\nconst createRootElement = (id) => {\r\n    const rootContainer = document.createElement(\"div\");\r\n    rootContainer.setAttribute(\"id\", id);\r\n    return rootContainer;\r\n};\r\n\r\n/**\r\n * Appends element as last child of body.\r\n * @param {HTMLElement} rootElem\r\n */\r\nconst addRootElement = (rootElem) => {\r\n    document.body.insertBefore(\r\n        rootElem,\r\n        document.body.lastElementChild.nextElementSibling\r\n    );\r\n};\r\n\r\n/**\r\n * Hook to create a React Portal.\r\n * Automatically handles creating and tearing-down the root elements (no SRR\r\n * makes this trivial), so there is no need to ensure the parent target already\r\n * exists.\r\n * @example\r\n * const target = usePortal(id, [id]);\r\n * return createPortal(children, target);\r\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\r\n * @returns {HTMLElement} The DOM node to use as the Portal target.\r\n */\r\nfunction usePortal(rootRefID, modalID = 'modal') {\r\n    const rootElemRef = useRef(null);\r\n\r\n    useEffect(function setupElement() {\r\n        // Look for existing target dom element to append to\r\n        const existingParent = document.getElementById(modalID);\r\n        // Parent is either a new root or the existing dom element\r\n        const parentElem = existingParent || createRootElement(modalID);\r\n\r\n        // If there is no existing DOM element, add a new one.\r\n        if (!existingParent) {\r\n            addRootElement(parentElem);\r\n        }\r\n\r\n        // Add the detached element to the parent\r\n        parentElem.appendChild(rootElemRef.current);\r\n\r\n        return function removeElement() {\r\n            rootElemRef.current.remove();\r\n            if (parentElem.childNodes.length === -1) {\r\n                parentElem.remove();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    /**\r\n    *  It's important we evaluate this lazily:\r\n    * - We need first render to contain the DOM element, so it shouldn't happen\r\n    *   in useEffect. We would normally put this in the constructor().\r\n    * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\r\n    *   since this will run every single render (that's a lot).\r\n    * - We want the ref to consistently point to the same DOM element and only\r\n    *   ever run once.\r\n    * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\r\n    */\r\n    function getRootElem() {\r\n        if (rootElemRef.current === null) {\r\n            console.log(rootElemRef, \"created div\")\r\n            rootElemRef.current = document.createElement(\"div\");\r\n            rootElemRef.current.setAttribute(\"class\", rootRefID);\r\n\r\n        }\r\n        return rootElemRef.current;\r\n    }\r\n\r\n    return getRootElem();\r\n}\r\n\r\nexport default usePortal;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js",["265","266"],"import React, { useState } from 'react';\r\nimport { GetURL } from '../BusinessLogic/helpers';\r\nimport { ChesscomLoginURL, CorsProxy } from '../BusinessLogic/urls'\r\n\r\nconst chooseBackgroundColor = (loggedIn) => {\r\n    if(loggedIn === true) {\r\n        return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n    }\r\n    else if(loggedIn === false) {\r\n        return {backgroundColor: \"#e03131\"}\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst ChesscomLogin = ({ setPage }) => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(null)\r\n\r\n    // const resetValidation = () => {\r\n    //     setLoggedIn(null);\r\n    // }\r\n\r\n\r\n    return (\r\n            <div className=\"username-form\">\r\n                <p className=\"chesscom-login-instructions\" style={chooseBackgroundColor(loggedIn)}>{\r\n                    (loggedIn === true) ? `Click to proceed.` :\r\n                    \"Click below and log into Chess.com.\"\r\n                }</p>\r\n                <p className=\"form-content\">\r\n                    <span title=\"Chess Intellect does NOT request any passwords. You must log in because Chess.com only lets logged-in members request new game analyses be created.\">Why? </span>\r\n                    <span title=\"You must be logged into Chess.com on the SAME browser window as the current Chessintellect.com tab. Don't login on a different browser window. Either open a new tab or click the button below to login.\"> Help!</span>\r\n                </p>\r\n                <p className=\"form-message\">\r\n                    You must sign in to Chess.com in the <b>same</b> browser window but a different tab. You must check this manually. You're good to go if you click the button below and are already logged in to your account. Otherwise, please login.\r\n                </p>\r\n                \r\n                <div className=\"username-form-buttons\">\r\n                    <button onClick={() => setPage(page => page - 1)} className=\"grey-button\">Back</button>\r\n                    {loggedIn === true ? <button onClick={() => setPage(page => page + 1)} className=\"orange-button\">Proceed</button> :\r\n                        <button onClick={() => { setLoggedIn(true); window.open(ChesscomLoginURL, '_blank');}} className=\"orange-button\">Log In</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n// const testLoggedIn = async () => {\r\n//     let loggedIn = false;\r\n\r\n//     await GetURL(CorsProxy + 'https://www.chess.com/analysis/game/live/5687380484?tab=report')\r\n//           .then(res => {\r\n//               if(res.data.includes(\"Upgrade to Save\") || res.data.includes(\"locked-message\")) {\r\n//                   loggedIn = false;\r\n//               }\r\n//               else if(res.data.includes(\"Key Moments\") || res.data.includes(\"Saved Analysis\")) {\r\n//                   loggedIn = true\r\n//               }\r\n//               console.log(res.data)\r\n//           }).catch(err => {\r\n//               console.warn(err)\r\n//           })\r\n\r\n//     return loggedIn;\r\n// }\r\n\r\n// ChesscomLogin.whyDidYouRender = true\r\nexport default ChesscomLogin;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js",["267"],"import React, { useState, useEffect } from 'react';\r\nimport { initializeState } from \"../BusinessLogic/Initialize\";\r\nimport { store } from '../State/store'\r\n\r\nconst chooseBackgroundColor = (agreed) => {\r\n    if(agreed === true) {\r\n        return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst TermsForm = ({ setPage }) => {\r\n\r\n    const [agreed, setAgreed] = useState(false)\r\n    const [button1, setButton1] = useState(false)\r\n    const [button2, setButton2] = useState(false)\r\n    const [button3, setButton3] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log(\"in here\", button1, button2)\r\n        if(button1 === true && button2 === true && button3 === true) {\r\n            console.log(\"in double here\")\r\n            setAgreed(true)\r\n        }\r\n        else {\r\n            setAgreed(false)\r\n        }\r\n    }, [button1, button2])\r\n\r\n    console.log(\"agreed: \", agreed)\r\n    return (\r\n            <div className=\"username-form\">\r\n                <p className=\"username-form-instructions\" style={chooseBackgroundColor(agreed)}>{\r\n                    (agreed !== true) ? `Please agree to the Terms & Conditions.` :\r\n                    \"Start! Allow 3-6 min per 50 games\"\r\n                }</p>\r\n                { agreed !== true ?\r\n                    <div className=\"terms-conditions\">\r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"access\" checked={button1} onChange={() => setButton1(prev => !prev)} />\r\n                            <label htmlFor=\"access\">You allow Chess Intellect access to your Chess.com games and analysis reports.</label>\r\n                        </div>\r\n                        <div>\r\n                            <input id=\"gameAnalysis\" type=\"checkbox\" checked={button2} onChange={() => setButton2(prev => !prev)} ></input>\r\n                            <label htmlFor=\"gameAnalysis\">If a game isn't previously analyzed, you want Chess Intellect to request that Chess.com analyzes that game on your behalf.</label>\r\n                        </div>      \r\n                        <div>\r\n                            <input id=\"data-to-collect\" type=\"checkbox\" checked={button3} onChange={() => setButton3(prev => !prev)} ></input>\r\n                            <label htmlFor=\"data-to-collect\">Chess Intellect will securely collect the following data: your username, time started, & debugging logs.</label>\r\n                        </div>\r\n                    </div> : null\r\n                }\r\n                \r\n                \r\n                {(agreed === true) ?\r\n                    <p className=\"form-message\">\r\n                        We recommend you close all background programs/tabs to speed up the analysis. Chess Intellect may open a lot of windows - please do <b>NOT</b> close them manually. Thank you for using Game Report Pro! Please share your feedback :).\r\n                    </p> : null\r\n                }\r\n                \r\n                <div className=\"username-form-buttons\">\r\n                    <button onClick={() => setPage(page => page - 1)} className=\"grey-button\">Back</button>\r\n                    {agreed === true ? <button onClick={() => {store.getState().setLoadingFalse(); initializeState();}} className=\"orange-button\">Proceed</button> : null  }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n// TermsForm.whyDidYouRender = true\r\n\r\nexport default TermsForm;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js",["268","269"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport Portal from '../Portal'\r\nimport PacmanLoader from 'react-spinners/PacmanLoader'\r\nimport { store } from '../State/store'\r\n\r\nconst AnalysisProgress = () => {\r\n\r\n    useEffect(() => {\r\n        const root = document.getElementById('root')\r\n        root.classList.add(\"inactivated\")\r\n\r\n        return () => root.classList.remove(\"inactivated\") \r\n    }, [])\r\n\r\n    return (\r\n        <Portal rootRefID=\"modal-analysis-progress\">\r\n            <h1>Analysis in Progress</h1>\r\n            <div className=\"loadingSpinner\">\r\n                <PacmanLoader color=\"#4A90E2\"/>\r\n            </div>\r\n\r\n            <ProgressBar />\r\n            <DebuggingLogs />\r\n        </Portal>\r\n    )\r\n}\r\n\r\n// AnalysisProgress.whyDidYouRender = true\r\n\r\n\r\nexport default AnalysisProgress;\r\n\r\nconst ProgressBar = () => {\r\n    const analysisPart = store(state => state.analysisPart)\r\n    const analysisSteps = store(state => state.analysisSteps)\r\n\r\n\r\n    const maxGames = store(state => state.maxGamesAllowed)\r\n    const numGameIDs = store(state => state.Games)\r\n\r\n    const receivedGameData = store(state => state.receivedGameID.length)\r\n    const failedGameData = store(state => state.failedGameID.length)\r\n\r\n    useEffect(() => {\r\n        if(receivedGameData + failedGameData === maxGames) {\r\n            store.getState().setAnalysisPart(4);\r\n            console.log(receivedGameData, failedGameData, maxGames)\r\n\r\n        }\r\n        console.log(receivedGameData, failedGameData, maxGames)\r\n\r\n    }, [receivedGameData, failedGameData])\r\n\r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <progress max={maxGames} value={receivedGameData + failedGameData} />\r\n            <span>\r\n                { analysisPart === 1 ?\r\n                    `${analysisSteps[1]}: ${numGameIDs.length}` :\r\n                  analysisPart === 2 ?\r\n                    `${analysisSteps[2]}` : \r\n                  analysisPart === 3 ?\r\n                    `${analysisSteps[3]}` : \r\n                  analysisPart === 4 ?\r\n                    `${analysisSteps[4]}` : null\r\n                }\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DebuggingLogs = () => {\r\n\r\n    const logs = store(state => state.debugLogs)\r\n    const [value, setValue] = useState('');\r\n    const textAreaRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        \r\n        if(logs.length !== 0) {\r\n            setValue((e) => e + logs[logs.length - 1] + '\\n')\r\n\r\n            // update the scroll top of the textarea\r\n            textAreaRef.current.scrollTop = textAreaRef.current.scrollHeight;\r\n        }\r\n    }, [logs.length])\r\n\r\n\r\n    return (\r\n        <textarea readOnly=\"true\" id=\"debug-logs\" ref={textAreaRef} className=\"debugging-logs\" value= {value} />\r\n    )\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\wdyr.js",["270"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\ResourcesTab.js",["271"],"import React from 'react'\r\nimport TacticsResources from './tactics'\r\n// import MiscResources from './miscellaneous'\r\nimport DisclosurePolicy from './disclosurePolicy'\r\nimport EndgameResources from './endgames'\r\nimport StrategyResources from './strategy'\r\nimport OpeningResources from './openings'\r\n// import OneClickBuyAll from './oneClickCheckout'\r\nimport ThankYou from './thankYou'\r\n\r\nconst Resources = () => {\r\n\r\n    return (\r\n        <div className=\"resources-page\"> \r\n            <DisclosurePolicy />\r\n            {/* <OneClickBuyAll /> */}\r\n            <TacticsResources />\r\n            <EndgameResources />\r\n            <StrategyResources />\r\n            <OpeningResources />\r\n            {/* <MiscResources /> */}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resources\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\miscellaneous.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\endgames.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\tactics.js",["272","273","274","275","276"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\openings.js",["277","278"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\strategy.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\disclosurePolicy.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\oneClickCheckout.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Resources\\thankYou.js",[],{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","severity":1,"message":"284","line":105,"column":12,"nodeType":"285","messageId":"286","endLine":132,"endColumn":7},{"ruleId":"287","severity":1,"message":"288","line":1,"column":8,"nodeType":"289","messageId":"290","endLine":1,"endColumn":13},{"ruleId":"287","severity":1,"message":"291","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":15},{"ruleId":"279","replacedBy":"292"},{"ruleId":"281","replacedBy":"293"},{"ruleId":"287","severity":1,"message":"294","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":18},{"ruleId":"287","severity":1,"message":"295","line":1,"column":45,"nodeType":"289","messageId":"290","endLine":1,"endColumn":54},{"ruleId":"287","severity":1,"message":"296","line":1,"column":56,"nodeType":"289","messageId":"290","endLine":1,"endColumn":64},{"ruleId":"297","severity":1,"message":"298","line":36,"column":8,"nodeType":"299","endLine":36,"endColumn":36,"suggestions":"300"},{"ruleId":"287","severity":1,"message":"301","line":2,"column":32,"nodeType":"289","messageId":"290","endLine":2,"endColumn":45},{"ruleId":"297","severity":1,"message":"302","line":68,"column":7,"nodeType":"299","endLine":68,"endColumn":9,"suggestions":"303"},{"ruleId":"287","severity":1,"message":"304","line":6,"column":7,"nodeType":"289","messageId":"290","endLine":6,"endColumn":19},{"ruleId":"297","severity":1,"message":"305","line":22,"column":6,"nodeType":"299","endLine":22,"endColumn":20,"suggestions":"306"},{"ruleId":"287","severity":1,"message":"301","line":2,"column":32,"nodeType":"289","messageId":"290","endLine":2,"endColumn":45},{"ruleId":"297","severity":1,"message":"307","line":46,"column":8,"nodeType":"299","endLine":46,"endColumn":10,"suggestions":"308"},{"ruleId":"297","severity":1,"message":"307","line":46,"column":8,"nodeType":"299","endLine":46,"endColumn":10,"suggestions":"309"},{"ruleId":"297","severity":1,"message":"307","line":45,"column":8,"nodeType":"299","endLine":45,"endColumn":10,"suggestions":"310"},{"ruleId":"297","severity":1,"message":"311","line":45,"column":8,"nodeType":"299","endLine":45,"endColumn":15,"suggestions":"312"},{"ruleId":"297","severity":1,"message":"313","line":59,"column":8,"nodeType":"299","endLine":59,"endColumn":18,"suggestions":"314"},{"ruleId":"297","severity":1,"message":"315","line":98,"column":8,"nodeType":"299","endLine":98,"endColumn":10,"suggestions":"316"},{"ruleId":"317","severity":1,"message":"318","line":90,"column":149,"nodeType":"319","endLine":90,"endColumn":164},{"ruleId":"297","severity":1,"message":"320","line":58,"column":8,"nodeType":"299","endLine":58,"endColumn":10,"suggestions":"321"},{"ruleId":"287","severity":1,"message":"322","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":16},{"ruleId":"287","severity":1,"message":"323","line":3,"column":28,"nodeType":"289","messageId":"290","endLine":3,"endColumn":37},{"ruleId":"297","severity":1,"message":"324","line":29,"column":8,"nodeType":"299","endLine":29,"endColumn":26,"suggestions":"325"},{"ruleId":"297","severity":1,"message":"326","line":52,"column":8,"nodeType":"299","endLine":52,"endColumn":42,"suggestions":"327"},{"ruleId":"297","severity":1,"message":"328","line":87,"column":8,"nodeType":"299","endLine":87,"endColumn":21,"suggestions":"329"},{"ruleId":"287","severity":1,"message":"330","line":1,"column":8,"nodeType":"289","messageId":"290","endLine":1,"endColumn":13},{"ruleId":"287","severity":1,"message":"331","line":9,"column":8,"nodeType":"289","messageId":"290","endLine":9,"endColumn":16},{"ruleId":"287","severity":1,"message":"332","line":1,"column":8,"nodeType":"289","messageId":"290","endLine":1,"endColumn":16},{"ruleId":"287","severity":1,"message":"333","line":3,"column":7,"nodeType":"289","messageId":"290","endLine":3,"endColumn":17},{"ruleId":"334","severity":1,"message":"335","line":69,"column":7,"nodeType":"336","endLine":77,"endColumn":8},{"ruleId":"334","severity":1,"message":"335","line":78,"column":7,"nodeType":"336","endLine":86,"endColumn":8},{"ruleId":"334","severity":1,"message":"335","line":87,"column":7,"nodeType":"336","endLine":95,"endColumn":8},{"ruleId":"287","severity":1,"message":"332","line":1,"column":8,"nodeType":"289","messageId":"290","endLine":1,"endColumn":16},{"ruleId":"287","severity":1,"message":"333","line":3,"column":7,"nodeType":"289","messageId":"290","endLine":3,"endColumn":17},"no-native-reassign",["337"],"no-negated-in-lhs",["338"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'games', 'games', 'gamenum', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'gamenum'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.",["337"],["338"],"'seedrandom' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'black' and 'white'. Either include them or remove the dependency array.","ArrayExpression",["339"],"'DensitySeries' is defined but never used.","React Hook useEffect has missing dependencies: 'black', 'max', and 'white'. Either include them or remove the dependency array.",["340"],"'defaultState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'games'. Either include it or remove the dependency array.",["341"],"React Hook useEffect has a missing dependency: 'tactics'. Either include it or remove the dependency array.",["342"],["343"],["344"],"React Hook useEffect has missing dependencies: 'Openings', 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["345"],"React Hook useEffect has missing dependencies: 'blunder', 'inaccuracy', and 'mistake'. Either include them or remove the dependency array.",["346"],"React Hook useEffect has missing dependencies: 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["347"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has a missing dependency: 'modalID'. Either include it or remove the dependency array.",["348"],"'GetURL' is defined but never used.","'CorsProxy' is defined but never used.","React Hook useEffect has a missing dependency: 'button3'. Either include it or remove the dependency array.",["349"],"React Hook useEffect has a missing dependency: 'maxGames'. Either include it or remove the dependency array.",["350"],"React Hook useEffect has a missing dependency: 'logs'. Either include it or remove the dependency array.",["351"],"'React' is defined but never used.","'ThankYou' is defined but never used.","'Carousel' is defined but never used.","'responsive' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"358","fix":"360"},{"desc":"358","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},"Update the dependencies array to be: [white, black]",{"range":"376","text":"377"},"Update the dependencies array to be: [black, max, white]",{"range":"378","text":"379"},"Update the dependencies array to be: [games, games.length]",{"range":"380","text":"381"},"Update the dependencies array to be: [tactics]",{"range":"382","text":"383"},{"range":"384","text":"383"},{"range":"385","text":"383"},"Update the dependencies array to be: [Games, Openings, blunders, inaccuracy, mistakes]",{"range":"386","text":"387"},"Update the dependencies array to be: [blunder, inaccuracy, mistake, openings]",{"range":"388","text":"389"},"Update the dependencies array to be: [blunders, inaccuracy, mistakes]",{"range":"390","text":"391"},"Update the dependencies array to be: [modalID]",{"range":"392","text":"393"},"Update the dependencies array to be: [button1, button2, button3]",{"range":"394","text":"395"},"Update the dependencies array to be: [receivedGameData, failedGameData, maxGames]",{"range":"396","text":"397"},"Update the dependencies array to be: [logs, logs.length]",{"range":"398","text":"399"},[1324,1352],"[white, black]",[2209,2211],"[black, max, white]",[669,683],"[games, games.length]",[1595,1597],"[tactics]",[1447,1449],[1367,1369],[1749,1756],"[Games, Openings, blunders, inaccuracy, mistakes]",[2369,2379],"[blunder, inaccuracy, mistake, openings]",[3341,3343],"[blunders, inaccuracy, mistakes]",[1896,1898],"[modalID]",[853,871],"[button1, button2, button3]",[1533,1567],"[receivedGameData, failedGameData, maxGames]",[2618,2631],"[logs, logs.length]"]