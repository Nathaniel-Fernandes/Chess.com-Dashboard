[{"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js":"1","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js":"2","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js":"3","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js":"4","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js":"5","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js":"6","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js":"7","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js":"8","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js":"9","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js":"10","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js":"11","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js":"12","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js":"13","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js":"14","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js":"15","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js":"16","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js":"17","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js":"18","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js":"19","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js":"20","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js":"21","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js":"22","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js":"23","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js":"24","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js":"25","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js":"26","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js":"27","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js":"28","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js":"29","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js":"30","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js":"31","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js":"32","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js":"33","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js":"34","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js":"35","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js":"36","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js":"37","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js":"38","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js":"39","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js":"40","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js":"41","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js":"42","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js":"43","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js":"44","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js":"45"},{"size":202,"mtime":1608225211824,"results":"46","hashOfConfig":"47"},{"size":823,"mtime":1609527485641,"results":"48","hashOfConfig":"47"},{"size":4335,"mtime":1609526969051,"results":"49","hashOfConfig":"47"},{"size":3894,"mtime":1609526551156,"results":"50","hashOfConfig":"47"},{"size":732,"mtime":1608786280962,"results":"51","hashOfConfig":"47"},{"size":3204,"mtime":1609462219677,"results":"52","hashOfConfig":"47"},{"size":450,"mtime":1607486841061,"results":"53","hashOfConfig":"47"},{"size":1158,"mtime":1608567207851,"results":"54","hashOfConfig":"47"},{"size":9434,"mtime":1609527100869,"results":"55","hashOfConfig":"47"},{"size":11625,"mtime":1608352671298,"results":"56","hashOfConfig":"47"},{"size":3408,"mtime":1608145525206,"results":"57","hashOfConfig":"47"},{"size":692,"mtime":1607886954037,"results":"58","hashOfConfig":"47"},{"size":2489,"mtime":1608306646465,"results":"59","hashOfConfig":"47"},{"size":2990,"mtime":1608420196947,"results":"60","hashOfConfig":"47"},{"size":2083,"mtime":1608269245262,"results":"61","hashOfConfig":"47"},{"size":5041,"mtime":1608338990526,"results":"62","hashOfConfig":"47"},{"size":336,"mtime":1608268494627,"results":"63","hashOfConfig":"47"},{"size":277,"mtime":1608430818909,"results":"64","hashOfConfig":"47"},{"size":1412,"mtime":1608228102644,"results":"65","hashOfConfig":"47"},{"size":2698,"mtime":1608352664908,"results":"66","hashOfConfig":"47"},{"size":4333,"mtime":1608352594460,"results":"67","hashOfConfig":"47"},{"size":1277,"mtime":1608250714219,"results":"68","hashOfConfig":"47"},{"size":2406,"mtime":1608356624280,"results":"69","hashOfConfig":"47"},{"size":1303,"mtime":1608250626871,"results":"70","hashOfConfig":"47"},{"size":2011,"mtime":1608250701948,"results":"71","hashOfConfig":"47"},{"size":3894,"mtime":1608357560600,"results":"72","hashOfConfig":"47"},{"size":3541,"mtime":1608403876469,"results":"73","hashOfConfig":"47"},{"size":1564,"mtime":1608568806559,"results":"74","hashOfConfig":"47"},{"size":1863,"mtime":1608567786308,"results":"75","hashOfConfig":"47"},{"size":2433,"mtime":1608430535562,"results":"76","hashOfConfig":"47"},{"size":2509,"mtime":1608352647053,"results":"77","hashOfConfig":"47"},{"size":4168,"mtime":1608568773852,"results":"78","hashOfConfig":"47"},{"size":833,"mtime":1608569564085,"results":"79","hashOfConfig":"47"},{"size":3201,"mtime":1608429847652,"results":"80","hashOfConfig":"47"},{"size":3849,"mtime":1608429947063,"results":"81","hashOfConfig":"47"},{"size":534,"mtime":1608567500155,"results":"82","hashOfConfig":"47"},{"size":744,"mtime":1608430686427,"results":"83","hashOfConfig":"47"},{"size":5062,"mtime":1608846730031,"results":"84","hashOfConfig":"47"},{"size":2893,"mtime":1608674380737,"results":"85","hashOfConfig":"47"},{"size":369,"mtime":1608674276612,"results":"86","hashOfConfig":"47"},{"size":4174,"mtime":1609527773852,"results":"87","hashOfConfig":"47"},{"size":3069,"mtime":1608838862442,"results":"88","hashOfConfig":"47"},{"size":3162,"mtime":1609446299817,"results":"89","hashOfConfig":"47"},{"size":2977,"mtime":1609445116145,"results":"90","hashOfConfig":"47"},{"size":2636,"mtime":1609527690484,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"gju65z",{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"94"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"94"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"94"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"94"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"94"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"94"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\index.js",[],["209","210"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\App.js",["211","212"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Initialize.js",["213","214"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\State\\store.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\urls.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\helpers.js",["215","216","217"],"import axios from \"axios\";\r\nimport { store } from '../State/store'\r\n\r\n// export const addLogSelector = state => state.setDebugLogs\r\nexport const addLog = store.getState().setDebugLogs\r\n\r\n/**\r\n * @param {string} url the incomplete url\r\n * @param {string | number} replacement the replacement to fill the url\r\n * @returns {string} the completed url\r\n */\r\nexport const CreateURL = (url, replacement) => {\r\n\treturn url.replace(\"{}\", replacement);\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} url The URL to get a response from\r\n * @returns {promise} Promise with requested url\r\n */\r\nexport const GetURL = async (url) => {\r\n\treturn axios.get(url);\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} url The URL with a Game ID in it \r\n * @returns {number} The game id\r\n * @throws Error if too many matches (!= 1)\r\n */\r\nexport const IDfromURL = (url) => {\r\n\tconst id = url.match(/\\d{1,13}/g)\r\n\r\n\tif(id.length !== 1) {\r\n\t\tthrow {\r\n\t\t\tmessage: \"IDfromURL to many matches\",\r\n\t\t\tobj: id\r\n\t\t} \r\n\t}\r\n\r\n\treturn Number(id[0])\r\n}\r\n\r\nexport const getOpponentfromGame = (gameObj, color) => {\r\n\tif(color === \"white\") {\r\n\t\treturn gameObj?.black?.username;\r\n\t}\r\n\r\n\treturn gameObj?.white?.username\r\n}\r\n\r\n/**\r\n * @param {string} username the players username\r\n * @param {object} gameObj The game object of a game\r\n */\r\nexport const ColorfromGame = (gameObj, uname) => {\r\n\tif(uname === gameObj.white.username) {\r\n\t\treturn \"white\";\r\n\t}\r\n\r\n\telse if(uname === gameObj.black.username) {\r\n\t\treturn \"black\";\r\n\t}\r\n\r\n\telse {\r\n\t\tthrow {\r\n\t\t\tmessage: \"Cannot find username in game. Perhaps this is the wrong game ID\",\r\n\t\t\tusername: uname,\r\n\t\t\twhite: gameObj.white.username,\r\n\t\t\tblack: gameObj.black.username\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const TimeControlFromGame = (gameObj) => {\r\n\treturn gameObj.time_control;\r\n}\r\n\r\nexport const TimeClassFromGame = (gameObj) => {\r\n\treturn gameObj.time_class;\r\n}\r\n\r\nconst dateWithTimeZone = (seconds) => {\r\n\tconst date = new Date(1970,0,1);\r\n\t\tdate.setSeconds(seconds)\r\n\t\r\n\tconst timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone\r\n\tif(timeZone === undefined || timeZone === null || !timeZone) {\r\n\t\treturn date;\r\n\t}\r\n\r\n\tconst utcDate = new Date(date.toLocaleString('en-US', { timeZone: \"UTC\" }));\r\n\tconst tzDate = new Date(date.toLocaleString('en-US', { timeZone: timeZone }));\r\n\tconst offset = utcDate.getTime() - tzDate.getTime();\r\n\r\n\tdate.setTime( date.getTime() - offset );\r\n  \r\n\treturn date;\r\n};\r\n\r\nexport const DateFromGameSeconds = (seconds, humanReadable = true) => {\r\n\t\r\n\tconst d = dateWithTimeZone(seconds)\r\n\r\n\tif(humanReadable) {\r\n\t\treturn `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n\t}\r\n\r\n\tconst formatted = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n\r\n\t// console.log(formatted);\r\n\treturn formatted;\r\n\t// return gameObj.end_time;\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} gameObj the game object of a game\r\n * @param {string} color the player's color\r\n */\r\nexport const ResultFromGame = (gameObj, color) => {\r\n\t// console.log(color)\r\n\tif(color !== \"white\" && color !== \"black\") {\r\n\t\tthrow {\r\n\t\t\tmessage: \"Not a valid color\",\r\n\t\t\tcolor: color\r\n\t\t}\r\n\t}\r\n\r\n\treturn gameObj[color].result;\r\n}\r\n\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\LoadForm.js",["218"],"import React, { useState } from 'react';\r\nimport { store } from '../State/store';\r\n\r\nconst LoadForm = () => {\r\n    const [uname, setUname] = useState(\"\");\r\n\r\n    <form>\r\n        <input \r\n            type=\"text\" \r\n            value={uname} \r\n            onChange ={(e) => setUname(e.targe.value)} \r\n            placeholder=\"Player Name\" \r\n            name=\"username\"></input>\r\n        <button>Submit</button>\r\n\t</form>\r\n}\r\n\r\nexport default LoadForm;\r\n",["219","220"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\Analyze.js",["221","222","223","224","225"],"import { getGameData, phase, plyPercent, ValidGameID } from './AnalyzeHelpers';\r\nimport { store } from '../State/store';\r\nimport { \r\n    AnalyzeCastle, \r\n    AnalyzeClassification, \r\n    AnalyzeOpenings,\r\n    AnalyzeGamePatterns,\r\n    AnalyzeAllTactics,\r\n    AnalyzeEndgames,\r\n    AddCaps\r\n} from './AnalysisMetrics';\r\n\r\n/**\r\n * @description Analyzes the games\r\n * @param {string|number} id The id of the game to analyze\r\n */\r\nexport const AnalyzeGame = async (game) => {  \r\n    // function input validation\r\n    ValidGameID(game.id);\r\n\r\n    const data = await getGameData(game.id);\r\n    // console.log(\"game: \", game)\r\n\r\n    if(!data) {\r\n        throw {\r\n            message: `Data is undefined for ${game.id}`,\r\n            data: data,\r\n            game: game\r\n        }\r\n        // just get this to request another game\r\n    }\r\n\r\n    AddCaps(data, game);\r\n    AnalyzeCastle(data, game);\r\n    AnalyzeOpenings(data, game);\r\n    AnalyzeClassification(\"blunder\", data,game);\r\n    AnalyzeClassification(\"mistake\", data,game);\r\n    AnalyzeClassification(\"inaccuracy\", data,game);\r\n    AnalyzeGamePatterns(data,game);\r\n    AnalyzeAllTactics(data, game);\r\n\r\n}\r\n\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalyzeHelpers.js",["226","227","228","229","230","231","232","233","234","235","236","237","238"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\AnalysisMetrics.js",["239","240"],"import { store } from '../State/store';\r\nimport { phase, plyPercent, calculateClockTime, totalFromTC, SameTacticType, UpdateTacticsState, oppositeColor } from './AnalyzeHelpers';\r\nimport { GetCurrentFen } from './fen';\r\nimport { CreateRecordProto, CreateTacticRecord } from './RecordPrototypes';\r\n\r\nexport const AddCaps = (data, gameObj) => {\r\n    const caps = data?.CAPS?.[gameObj.color]?.all;\r\n    if(caps === undefined) {\r\n        console.warn(`data.CAPS is undefined for ${gameObj.id} ${gameObj.color}`);\r\n        return;\r\n    }\r\n\r\n    store.getState().AddCAPStoGame(gameObj.id, caps)\r\n    // console.log(store.getState().Games)\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} data The returned data object\r\n * @param {object} gameObj The game object\r\n */\r\n\r\nexport const AnalyzeCastle = ( data, gameObj ) => {\r\n\r\n    const record = CreateRecordProto(data, gameObj);\r\n    let plyCastled = data?.castled[gameObj.color];\r\n\r\n    if(plyCastled === undefined || plyCastled === null || !(typeof(plyCastled) === \"number\")) {\r\n        console.warn({\r\n            message: \"Ply castled is undefined (data.castled[gameObj.color])\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            plyCastled: plyCastled\r\n        })\r\n        return;\r\n    }\r\n\r\n    if(plyCastled != -1) { // -1 means did not castle\r\n        plyCastled++;   // correct for TRUE ply (data starts @ 0 when should start at 1)\r\n\r\n        record.castled = true;\r\n        record.ply = plyCastled;\r\n        record.plyPercent = plyPercent(plyCastled, data.totalPositions)\r\n        record.phase = phase(plyCastled, data.gamePhases);\r\n        \r\n        record.fen = GetCurrentFen(data, record.ply, record.id)\r\n    } else {\r\n        record.castled = false;\r\n    }\r\n\r\n    store.getState().addCastled(record);\r\n    // console.log(store.getState().castled);\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {string} type \"inaccuracy, mistake, blunder\"\r\n * @param {object} data the analysis object\r\n * @param {object} gameObj the game object\r\n */\r\nexport const AnalyzeClassification = (type, data, gameObj) => {\r\n    // constants\r\n\tconst allowed = [\"blunder\", \"mistake\", \"inaccuracy\"];\r\n    const p = data?.positions;\r\n    const totalType = data?.tallies?.report?.[gameObj.color]?.[type];\r\n    \r\n    // input validation\r\n    if(!allowed.includes(type)) {\r\n        throw {\r\n            message: \"invalid move type\",\r\n            type: type\r\n        }\r\n    }\r\n\r\n    if(p === undefined || p === null || !p) {\r\n        console.warn({\r\n            message: \"positions is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            p: p\r\n        })\r\n        return;\r\n    }\r\n    if(totalType === undefined || totalType === null || !(typeof(totalType) === \"number\")) {\r\n        console.warn({\r\n            message: \"totalType is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            totalType: totalType\r\n        })\r\n        return;\r\n    }\r\n    \r\n\r\n    let count = 0;\r\n    let i = (p[0].color === gameObj.color) ? 0 : 1;\r\n    const recordProto = CreateRecordProto(data, gameObj);\r\n\r\n    if(totalType !== 0) {\r\n\r\n        while(count < totalType && i <= data.totalPositions - 2) {\r\n            if(p[i].classificationName === type) {\r\n                let record = {...recordProto};\r\n\r\n                // console.log(\"index: \", i, p[i], record)\r\n                record.score = p[i].playedMove.score;\r\n                record.difference = p[i].difference;\r\n                record.scenarios = p[i].scenarios;\r\n\r\n                record.ply = i + 1; // starts @ 0 so increment\r\n                record.plyPercent = plyPercent(record.ply, data.totalPositions)\r\n                record.phase = phase(record.ply, data.gamePhases);\r\n\r\n                record.fen = GetCurrentFen(data, record.ply, record.id)\r\n\r\n                if(data.time) {\r\n                    // console.log(\"id: \", gameObj.id, data)\r\n                    record.timeSpent = data.time.moves[i] / 10;\r\n                    record.timeToThink = calculateClockTime(data.time.moves, i, gameObj.timecontrol);\r\n                    record.timeToThinkPercent = record.timeToThink / totalFromTC(gameObj.timecontrol) * 100\r\n                }\r\n                // **************************** COME BACK AND CHECK THIS\r\n                // record.takeaway = {\r\n                //     type: data.TEP.takeaways[i]?.[0].type, // need to check\r\n                // }\r\n\r\n                // console.log(record);\r\n                store.getState().addMoveType(type, record);\r\n                count++;\r\n            }\r\n            i += 2;\r\n        }\r\n    }\r\n\r\n    // console.log(store.getState()[type])\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} data The returned data object\r\n * @param {object} gameObj The game object\r\n */\r\nexport const AnalyzeOpenings = (data, gameObj) => {\r\n    if(data?.book === undefined) {\r\n        console.warn(`data.book undefined for ${gameObj.id} ${gameObj.color}`)\r\n    }\r\n    if(data?.bookPly === undefined) {\r\n        console.warn(`data.book undefined for ${gameObj.id} ${gameObj.color}`)\r\n    }\r\n\r\n    if(data?.CAPS?.[gameObj.color]?.all === undefined) {\r\n        console.warn(`data.CAPS is undefined for ${gameObj.id} ${gameObj.color}`)\r\n    }\r\n\r\n    const record = CreateRecordProto(data, gameObj);\r\n          record.caps = data?.CAPS?.[gameObj.color]?.all;\r\n          record.name = data?.book?.name;\r\n          record.bookPly = data?.bookPly;\r\n          record.lastBookFEN = GetCurrentFen(data, record.bookPly + 1, gameObj.id)\r\n\r\n    store.getState().addOpening(record);\r\n    // console.log(store.getState().opening);\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {object} data The analysis data\r\n * @param {object} gameObj the game object\r\n */\r\nexport const AnalyzeGamePatterns = (data, gameObj) => {\r\n\r\n    const record = CreateRecordProto(data, gameObj);\r\n    const d = data?.TEP?.moves?.[gameObj.color] // rename to make easier to work with\r\n\r\n    if(d === undefined || d === null || !d) {\r\n        console.warn({\r\n            message: \"data.TEP.moves[gameObj.color] is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color\r\n        })\r\n        return;\r\n    }\r\n\r\n    for(const i in d) {\r\n\r\n        let p = [];\r\n        for(const j of d[i]) {\r\n            let phs = phase(j, data.gamePhases);\r\n\r\n            if(!p.includes(phs)) { p.push(phs); }\r\n            if(p.length === 3) break;   // shortcircuit if already complete\r\n        }\r\n\r\n        record[i] = {\r\n            plyPresent: i.length,\r\n            PercentPresent: plyPercent(i.length, data.totalPositions),\r\n            phase: p\r\n        }\r\n    }\r\n\r\n    store.getState().addGamePattern(record)\r\n    // console.log(store.getState().gamePatterns)\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} data The data analysis object\r\n * @param {object} gameObj The game object\r\n */\r\nexport const AnalyzeAllTactics = (data, gameObj) => {\r\n    const KnownTacticsTypes = [\r\n        \"fork\", \"mate\",\"material left undefended\",\r\n        \"undefended material\",\"pin\",\"trapped piece\",\r\n        \"under-defended material\", \"winning exchange\",\r\n        \"skewer\"\r\n    ];\r\n\r\n    const p = data?.positions;\r\n    const t = data?.TEP?.takeaways;\r\n\r\n    if(p === undefined || p === null || !p) {\r\n        console.warn({\r\n            message: \"positions is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            p: p\r\n        })\r\n        return;\r\n    }\r\n\r\n    if(t === undefined || t === null || !t) {\r\n        console.warn({\r\n            message: \"takeaways is undefined\",\r\n            id: gameObj.id,\r\n            color: gameObj.color,\r\n            t: t\r\n        })\r\n        return;\r\n    }\r\n\r\n    for(let i in t) {\r\n        i = Number(i)\r\n\r\n        for(let j = 0; j < t[i].length; j++) {\r\n            const ele = t[i]?.[j]\r\n\r\n            // console.log(t, t.i, i, typeof(i), ele, ele?.color)\r\n            if (ele?.color === gameObj.color) {\r\n                // console.log(ele.type)\r\n\r\n                // warn if type is not in the known array\r\n                if(!KnownTacticsTypes.some((e) => SameTacticType(ele.type, e))) {\r\n                    console.warn(\"Not included\", ele.type, gameObj.id) // if gets here then it is a new type of tactic\r\n                }\r\n\r\n                else {\r\n                    console.warn(ele.type)\r\n\r\n                    const record = CreateTacticRecord(i-1,ele,p,data,gameObj)\r\n                    // console.log(record);\r\n                    \r\n                    UpdateTacticsState(ele.type, record);\r\n                }\r\n            } \r\n            // NEEDS a BUNCH of refactoring, but at least it works\r\n            else if(oppositeColor(ele?.color) === gameObj.color && ele.class === \"blunders\") {\r\n                // console.log(\"first\")\r\n                if(!t[i + 1] || t[i + 1].length === 0) {\r\n                    // console.log(\"second\")\r\n\r\n                    // validation\r\n                    if(p[i] === undefined) {\r\n                        console.warn({\r\n                            message: \"p[i] doesn't exist\",\r\n                            i: i,\r\n                            id: gameObj.id\r\n                        })\r\n                        return;\r\n                    }\r\n\r\n                    if(p[i].playedMove.moveLan !== ele.eval.pv[0]) {\r\n                        // console.log(\"third\")\r\n                        if(p[i].classificationName === \"blunder\" || p[i].classificationName === \"mistake\") {\r\n                            \r\n                                // console.log(\"final\")\r\n\r\n                                // passed all the checks so now add this \r\n                                // warn if type is not in the known array\r\n                                if(!KnownTacticsTypes.some((e) => SameTacticType(ele.type, e))) {\r\n                                    console.warn(\"Opp: Not included\", ele.type, gameObj.id) // if gets here then it is a new type of tactic\r\n                                }\r\n\r\n                                else {\r\n                                    // console.log(\"fourth\")\r\n                                    console.warn(\"opp: \", ele.type)\r\n                    \r\n                                    const record = CreateTacticRecord(i,ele,p,data,gameObj,\"missed\")\r\n                                    // console.log(record)\r\n\r\n                                    UpdateTacticsState(ele.type, record);\r\n                                } \r\n                        }\r\n        \r\n                    } else { // they are equal so you got the tactic\r\n                        // console.log(\"final\")\r\n\r\n                        // passed all the checks so now add this \r\n                        // warn if type is not in the known array\r\n                        if(!KnownTacticsTypes.some((e) => SameTacticType(ele.type, e))) {\r\n                            console.warn(\"Opp: Not included\", ele.type, gameObj.id) // if gets here then it is a new type of tactic\r\n                        }\r\n\r\n                        else {\r\n                            // console.log(\"fourth\")\r\n                            console.warn(\"opp: \", ele.type)\r\n            \r\n                            const record = CreateTacticRecord(i,ele,p,data,gameObj,\"got\")\r\n                            // console.log(record)\r\n\r\n                            UpdateTacticsState(ele.type, record);\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const AnalyzeEndgames = (data, gameObj) => {\r\n    // const record = CreateRecordProto(data, gameObj);\r\n    const d = data?.TEP?.endgames; // rename to make easier to work with\r\n\r\n    if(d.length > 0) {\r\n        console.warn(d)\r\n    }\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\RecordPrototypes.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\BusinessLogic\\fen.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\opening.js",["241","242","243","244"],"import React, { useState, useEffect } from 'react'\r\nimport Sunburst_ECO from './Sunburst_ECO'\r\nimport { store } from '../../State/store'\r\nimport Barchart_Openings from './Barchart_Openings'\r\n\r\n\r\nexport const Opening_Data = ({ type, width, height }) => {\r\n    // const defaultState = [{name:\"White\", children:[]}, {name:\"Black\",children:[]}]\r\n\r\n    const data = store(state => state.opening)\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [white, setWhite] = useState([])\r\n    const [black, setBlack] = useState([])\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const w = {};\r\n        const b = {};\r\n\r\n        // console.log(data)\r\n        data.filter((obj) => obj.color.toLowerCase() === \"white\").map((e, i, arr) => {\r\n            if(w?.[e.eco]) {\r\n                w[e.eco].value += 1\r\n            } else {\r\n                w[e.eco] = {\r\n                    name: e.eco,\r\n                    value: 1,\r\n                    description: e.name,\r\n                    total: arr.length,\r\n                    won: 0,\r\n                    loss: 0,\r\n                }\r\n            }\r\n\r\n            if(e.won) w[e.eco].won += 1;\r\n            else w[e.eco].loss += 1\r\n        })\r\n\r\n        data.filter((obj) => obj.color.toLowerCase() === \"black\").map((e, i, arr) => {\r\n            // console.log(this)\r\n            if(b?.[e.eco]) {\r\n                b[e.eco].value += 1\r\n            } else {\r\n                b[e.eco] = {\r\n                    name: e.eco,\r\n                    value: 1,\r\n                    description: e.name,\r\n                    total: arr.length,\r\n                    won: 0,\r\n                    loss: 0\r\n                }\r\n            }\r\n\r\n            if(e.won) b[e.eco].won += 1;\r\n            else b[e.eco].loss += 1\r\n        })\r\n\r\n        setWhite(() => Object.values(w).sort((a, b) => b.value - a.value))\r\n        setBlack(() => Object.values(b).sort((a, b) => a.value - b.value))\r\n        setLoading(() => false)\r\n    }, [data])\r\n\r\n\r\n    if(!loading) {\r\n        if(type.toLowerCase() === \"sunburst\") {\r\n            return (\r\n                <Sunburst_ECO white={white} black={black} width={width} height={height} />\r\n            )\r\n        } \r\n        else if(type.toLowerCase() === \"bar\" || type.toLowerCase() === 'barchart') {\r\n            return (\r\n                <Barchart_Openings white={white} black={black} width={width} height={height} />\r\n            )\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport default Opening_Data;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Sunburst_ECO.js",["245","246"],"import React, { memo } from 'react'\r\nimport { ResponsiveSunburst, Sunburst } from '@nivo/sunburst'\r\nimport { useTheme } from '@nivo/core'\r\n\r\nconst Sunburst_ECO = ({white, black, width, height}) => {\r\n    return (\r\n        <Sunburst\r\n            data={\r\n                {\r\n                    name: \"Openings\",\r\n                    children: [\r\n                        {\r\n                            name: \"White\", \r\n                            color:\"#FFFFFF\", \r\n                            children:white, \r\n                            description: \"White\", \r\n                            total:white.reduce((a,b) => (a+b.value), 0), \r\n                            won:white.reduce((a,b) => (a+b.won), 0),\r\n                            loss:white.reduce((a,b) => (a+b.loss), 0)\r\n                        },\r\n                        {\r\n                            name: \"Black\", \r\n                            color:\"#000000\", \r\n                            children:black, \r\n                            description: \"Black\", \r\n                            total:black.reduce((a,b)=> (a+b.value), 0), \r\n                            won:black.reduce((a,b) => (a+b.won), 0),\r\n                            loss:black.reduce((a,b) => (a+b.loss), 0)\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n            id=\"name\"\r\n            value=\"value\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 50, right: 130, bottom: 80, left: 60 }}\r\n            cornerRadius={4}\r\n            borderWidth={2}\r\n            colors={({ id }) => pickWhiteBlack(id)}\r\n            childColor={() => pickCustomPalette(customPalette2)}\r\n            animate={false}\r\n            motionConfig=\"gentle\"\r\n            isInteractive={true}\r\n            tooltip={CustomTooltip}\r\n            layers={['sliceLabels', 'slices']}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(Sunburst_ECO);\r\n\r\nconst customPalette = [\"#E8C1A0\",\"#F47560\",\"#F1E15B\",\"#E8A838\",\"#61CDBB\",\"#97E3D5\"]\r\nconst customPalette2 = [\"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\", \"#fb9a99\", \"#e31a1c\", \"#fdbf6f\", \"#ff7f00\", \"#cab2d6\", \"#6a3d9a\", \"#ffff99\", \"#b15928\"]\r\n\r\nconst pickCustomPalette = (palette) => {\r\n    const i = Math.floor(Math.random()*palette.length)\r\n    const color = palette[i]\r\n    // console.log(i, color)\r\n\r\n    return color;\r\n}\r\n\r\nconst pickWhiteBlack = (id) => {\r\n    if(id === \"White\") { \r\n        return \"#fff1d9\" \r\n    }\r\n\r\n    return \"#000000\" \r\n}\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    const theme = useTheme()\r\n    // console.log(nameLookUp)\r\n    return (\r\n        <div style={{ ...theme.tooltip.container}}>\r\n            <strong>Name:</strong> {data.description} <br />\r\n            <strong>ECO:</strong> {id} <br />\r\n            <strong>Played:</strong> {value} ({(value / data.total * 100).toFixed(1)}%) <br />\r\n            <strong>Won:</strong> {data.won}   <br />\r\n            <strong>Lost:</strong> {data.loss}\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MovePly.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Opening\\Barchart_Openings.js",["247","248","249","250"],"import React, { useState, useEffect } from 'react'\r\nimport { Bar } from '@nivo/bar'\r\n\r\nconst CustomTooltip = ({id, value, data}) => {\r\n    // console.log(nameLookUp)\r\n    return (\r\n        <div style={{width: '300px',maxHeight:'200px'}}>\r\n            <strong>ECO:</strong> {data.eco} <br />\r\n            <strong>Name:</strong>\r\n                {data.name[0]}\r\n            <br />\r\n            <strong>Won:</strong> {data.Won || 0}   <br />\r\n            <strong>Lost:</strong> {data.Lost || 0}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst Barchart_Openings = ({ white, black, width, height }) => {\r\n    \r\n    const [loading, setLoading] = useState(true)\r\n    const [data, setData] = useState({})\r\n    const [max, setMax] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        const d = {}\r\n\r\n        white.map((e) => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += e.won || 0;\r\n                d[o].Lost += e.loss || 0;\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description);\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:e.won || 0, Lost:e.loss || 0}\r\n            }\r\n        })\r\n\r\n        black.map((e) => {\r\n            // console.log(e)\r\n            const o = e.name.substring(0,2);\r\n            if(d[o]) {\r\n                d[o].Won += (e.won || 0);\r\n                d[o].Lost += (e.loss || 0);\r\n                if(d[o].name.indexOf(e.description) === -1) d[o].name.push(e.description)\r\n            } else {\r\n                d[o] = {eco: `${o}X`, name: [e.description], Won:(e.won || 0), Lost:(e.loss || 0)}\r\n            }\r\n        })\r\n        \r\n        const final = Object.values(d)\r\n        let maxValue = max;\r\n        final.map((e) => {\r\n            if((e.Won || 0) + (e.Lost || 0) > maxValue)  {\r\n                maxValue = (e.Won || 0) + (e.Lost || 0);\r\n            }\r\n        })\r\n        \r\n        // console.log(maxValue)\r\n        // console.log(d)\r\n        setData(() => Object.values(d))\r\n        setMax(() => maxValue)\r\n\r\n        // console.log(Object.values(d))\r\n        setLoading(() => false)\r\n    },[]);\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics vs. Game Phases\r\n            </text>\r\n        )\r\n    } \r\n\r\n    if(!loading) {\r\n        return (\r\n            <Bar\r\n                data={data.sort((a, b) => b.Won === a.Won ? b.Won + b.Lost - (a.Won + a.Lost) : b.Won - a.Won)}\r\n                width={width}\r\n                height={height}\r\n                keys={[ 'Won', 'Lost']}\r\n                indexBy=\"eco\"\r\n                margin={{ top: 50, right: (width > 600) ? 130 : 80, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                valueScale={{ type: 'linear' }}\r\n                indexScale={{ type: 'band', round: true }}\r\n                colors={{ scheme: 'nivo' }}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    // tickPadding: 5,\r\n                    tickRotation: -30,\r\n                    legend: 'Openings',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 40\r\n                }}\r\n                enableGridX\r\n                layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n                axisLeft={{\r\n                    tickValues:[...Array(max + 1).keys()],\r\n                    legend: 'Count',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -30\r\n                }}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: '#000000', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                tooltip={CustomTooltip}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                animate={false}\r\n            />\r\n        )\r\n    } \r\n    \r\n    return null\r\n \r\n}\r\n\r\nexport default Barchart_Openings;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveHistogram.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\NameHeader.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Loss.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsivePie.js",["251","252"],"import { Pie } from '@nivo/pie'\r\n\r\nconst PieChart = ({ data, width, height, marginDef = false }) => {\r\n    const margin = marginDef || { top: 40, right: 80, bottom: 80, left: (width < 520) ? 65 : 0 }\r\n\r\n    const theme = { fontSize: \"16px\", fontWeight: 'bold'  }\r\n    const borderColor = { from: 'color', modifiers: [ [ 'darker', '1.4' ] ] }\r\n    const patterns = [\r\n        {\r\n            id: 'dots',\r\n            type: 'patternDots',\r\n            background: 'inherit',\r\n            color: 'rgba(255, 255, 255, 0.3)',\r\n            size: 4,\r\n            padding: 1,\r\n            stagger: true\r\n        },\r\n        {\r\n            id: 'lines',\r\n            type: 'patternLines',\r\n            background: 'inherit',\r\n            color: 'rgba(255, 255, 255, 0.3)',\r\n            rotation: -45,\r\n            lineWidth: 6,\r\n            spacing: 10\r\n        }\r\n    ]\r\n\r\n    const legend = [\r\n        {\r\n            anchor: 'right',\r\n            direction: 'column',\r\n            justify: false,\r\n            translateX: (width > 600) ? (600 - width) / 3 + 65 : 65,\r\n            translateY: 0,\r\n            itemsSpacing: 5,\r\n            itemWidth: 100,\r\n            itemHeight: 18,\r\n            itemTextColor: '#999',\r\n            itemDirection: 'left-to-right',\r\n            itemOpacity: 1,\r\n            symbolSize: 18,\r\n            symbolShape: 'square',\r\n            effects: [\r\n                {\r\n                    on: 'hover',\r\n                    style: {\r\n                        itemTextColor: '#000',\r\n                        backgroundColor: '#FFFF00'\r\n                    }\r\n                }\r\n            ]\r\n        }]\r\n\r\n    // console.log(width, height)\r\n\r\n    return (\r\n        <Pie \r\n            data={data}\r\n            width={width}\r\n            height={height}\r\n            margin={margin}\r\n            padAngle={3}\r\n            cornerRadius={2}\r\n            innerRadius={0.5}\r\n            sortByValue={true}\r\n            enableRadialLabels={true}\r\n            radialLabelsSkipAngle={10}\r\n            radialLabelsLinkHorizontalLength={8}\r\n            radialLabelsLinkDiagonalLength={24}\r\n            sliceLabelsSkipAngle={10}\r\n            sliceLabelsSkipAngle={10}\r\n            borderWidth={1}\r\n            borderColor=\"#a17a5b\"\r\n            theme={theme}\r\n            borderColor={borderColor}\r\n            defs={patterns}\r\n            fill={\r\n                Object.keys(data).map((e) => {\r\n                    // console.log(e)\r\n                    return {match: { id: data[e].id}, id: (e % 2 === 0) ? 'lines' : 'dots'}\r\n                })\r\n            }\r\n            legends={(width > 550) ? legend : false }\r\n\t\t\tanimate={false}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport default PieChart;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Pie_Results.js",["253"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport Pie from '../ResponsivePie'\r\n\r\nconst Pie_Results = ({ width, height }) => {\r\n\r\n    const defaultState = {\"win\":0,\"draw\":0,\"loss\":0}\r\n    const data = store(state => state.Games)\r\n    const [loading, setLoading] = useState(true)\r\n    const [reason, setReason] = useState(defaultState)\r\n\r\n    useEffect(() => {\r\n        setLoading(() => true)\r\n        setReason(() => defaultState)\r\n\r\n        for(let i = 0; i < data.length; i++) {\r\n            const type = data[i].result;\r\n            // console.log(type)\r\n\r\n            if(type === \"win\") {\r\n                setReason((e) => {\r\n                    return {...e, \"win\": e.win + 1}\r\n                })\r\n            } else if (type === \"draw\") {\r\n                setReason((e) => {\r\n                    return {...e, \"draw\": e.draw + 1}\r\n                })   \r\n            } else {\r\n                setReason((e) => {\r\n                    return {...e, \"loss\": e.loss + 1}\r\n                })\r\n            }\r\n        }\r\n\r\n        setLoading(() => false)\r\n        // console.log(data, reason)\r\n    }, [data]);\r\n\r\n    if(!loading) {\r\n        const data = Object.keys(reason).map((e) => { \r\n            return {id: e, label: e, value: reason[e]}\r\n        })\r\n        // console.log(data)\r\n\r\n        return (\r\n            <Pie data={data} width={width} height={height} />\r\n        )\r\n    }\r\n\r\n    return null; // default return\r\n}\r\n\r\nexport default Pie_Results;\r\n\r\n\r\n/*\r\n\r\n            <ResponsivePie \r\n                data={ data }\r\n                margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n                padAngle={3}\r\n                cornerRadius={2}\r\n                innerRadius={0.5}\r\n                sortByValue={true}\r\n                enableRadialLabels={true}\r\n                radialLabelsSkipAngle={10}\r\n                radialLabelsLinkHorizontalLength={8}\r\n                sliceLabelsSkipAngle={10}\r\n                sliceLabelsSkipAngle={10}\r\n                borderWidth={1}\r\n                borderColor=\"#a17a5b\"\r\n                theme={{\r\n                    fontSize: \"16px\",\r\n                    fontWeight: 'bold'\r\n                }}\r\n                borderColor={{ from: 'color', modifiers: [ [ 'darker', '1.4' ] ] }}\r\n                defs={[\r\n                    {\r\n                        id: 'dots',\r\n                        type: 'patternDots',\r\n                        background: 'inherit',\r\n                        color: 'rgba(255, 255, 255, 0.3)',\r\n                        size: 4,\r\n                        padding: 1,\r\n                        stagger: true\r\n                    },\r\n                    {\r\n                        id: 'lines',\r\n                        type: 'patternLines',\r\n                        background: 'inherit',\r\n                        color: 'rgba(255, 255, 255, 0.3)',\r\n                        rotation: -45,\r\n                        lineWidth: 6,\r\n                        spacing: 10\r\n                    }\r\n                ]}\r\n                fill={\r\n                    Object.keys(data).map((e) => {\r\n                        console.log(e)\r\n                        return {match: { id: data[e].id}, id: (e % 2 === 0) ? 'lines' : 'dots'}\r\n                    })\r\n                }\r\n                legends={[\r\n                    {\r\n                        anchor: 'right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 65,\r\n                        translateY: 0,\r\n                        itemsSpacing: 5,\r\n                        itemWidth: 100,\r\n                        itemHeight: 18,\r\n                        itemTextColor: '#999',\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 1,\r\n                        symbolSize: 18,\r\n                        symbolShape: 'square',\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemTextColor: '#000',\r\n                                    backgroundColor: '#FFFF00'\r\n                                }\r\n                            }\r\n                        ]\r\n                    }]}\r\n            />\r\n*/","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Scatter_CAPS.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\ResponsiveScatterPlot.js",["254","255"],"import React from 'react'\r\nimport  { ResponsiveScatterPlot, ScatterPlot } from '@nivo/scatterplot'\r\n\r\nconst Scatter = ({ data, width, height }) => {\r\n\tconst margin = { top: 60, right: 140, bottom: 70, left: 90 };\r\n\tconst xScale = { type: \"time\", format: \"%m/%d/%Y %H:%M:%S\", precision: \"minute\" }\r\n\tconst yScale = { type: \"linear\", min: 0, max: 100 }\r\n\tconst axisBottom = {\r\n\t\torient: \"bottom\",\r\n\t\ttickSize: 5,\r\n\t\ttickPadding: 5,\r\n\t\ttickRotation: 0,\r\n\t\tformat: \"%b %d\",\r\n\t\ttickValues: 5,\r\n\t}\r\n\tconst axisLeft = {\r\n\t\torient: \"left\",\r\n\t\ttickSize: 5,\r\n\t\ttickPadding: 5,\r\n\t\ttickRotation: 0,\r\n\t\tlegend: \"CAPS Score\",\r\n\t\tlegendPosition: \"middle\",\r\n\t\tlegendOffset: -60,\r\n\t}\r\n\tconst legends = [\r\n\t\t{\r\n\t\t\tanchor: \"bottom-right\",\r\n\t\t\tdirection: \"column\",\r\n\t\t\tjustify: false,\r\n\t\t\ttranslateX: 130,\r\n\t\t\ttranslateY: 0,\r\n\t\t\titemWidth: 100,\r\n\t\t\titemHeight: 12,\r\n\t\t\titemsSpacing: 5,\r\n\t\t\titemDirection: \"left-to-right\",\r\n\t\t\tsymbolSize: 12,\r\n\t\t\tsymbolShape: \"circle\",\r\n\t\t\teffects: [\r\n\t\t\t{\r\n\t\t\t\ton: \"hover\",\r\n\t\t\t\tstyle: {\r\n\t\t\t\titemOpacity: 1,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t]\r\n\r\n  \treturn (\r\n\t\t<ScatterPlot\r\n\t\t\tdata={data}\r\n\t\t\twidth={width}\r\n\t\t\theight={height}\r\n\t\t\tmargin={margin}\r\n\t\t\txScale={xScale}\r\n\t\t\txFormat=\"time:%Y-%m-%d\"\r\n\t\t\tyScale={yScale}\r\n\t\t\tblendMode=\"normal\"\r\n\t\t\tcolors={{ scheme: 'nivo' }}\r\n\t\t\taxisTop={null}\r\n\t\t\taxisRight={null}\r\n\t\t\taxisBottom={axisBottom}\r\n\t\t\taxisLeft={axisLeft}\r\n\t\t\tlegends={legends}\r\n\t\t\tanimate={false}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default Scatter;\r\n\r\n\r\n{\r\n    /* <ScatterChart width={600} height={400}>\r\n  <CartesianGrid strokeDasharray=\"3 3\" />\r\n  <YAxis type=\"number\" dataKey=\"CAPS\" name=\"CAPS\"/>\r\n  <XAxis type=\"number\" domain={[\"dataMin\",\"dataMax\"]} dataKey=\"date\" name=\"Date\"/>\r\n  <Tooltip />\r\n  <Scatter name=\"White\" data={White} r={7} stroke=\"#000000\" legendType=\"circle\" fill=\"e5e4e2\"/>\r\n  <Scatter name=\"Black\" data={Black} fill= \"#33475b\" />\r\n  <Legend />\r\n  </ScatterChart> */\r\n  }\r\n  \r\n  // useEffect(() => {\r\n  //   setWhite(() => [])\r\n  //   setBlack(() => [])\r\n  //   for(let i = 0; i < data.length; i++) {\r\n  //     // console.log(i)\r\n  //     if(data[i].color === \"white\") {\r\n  //       setWhite((arr) => [...arr, data[i]])\r\n  //       console.log(White, data[i])\r\n  //     }\r\n  //     else {\r\n  //       setBlack((arr) => [...arr, data[i]])\r\n  //       console.log(Black, data[i])\r\n  //     }\r\n  //   }\r\n  //   console.log(White)\r\n  //   console.log(Black)\r\n  \r\n  // },[]);\r\n  ","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Game\\Histogram_CAPS.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Moves\\Histogram_MoveTime.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_Tactics.js",["256","257","258"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport { ResponsiveBar, Bar } from '@nivo/bar'\r\n\r\nconst Barchart_Tactics = ({ width, height }) => {\r\n\r\n    const tactics = store((state) => {\r\n        return {\r\n            \"Win the Exchange\":state.winningExchange,\r\n            \"Underdefended Piece\":state.underdefended,\r\n            \"Trapped piece\":state.trapped,\r\n            \"Hanging Piece\":state.hanging,\r\n            \"Relative Pin\":state.relativePin,\r\n            \"Absolute Pin\":state.absolutePin,\r\n            Skewer:state.skewer,\r\n            Fork:state.fork,\r\n            \"Mate\":state.mate,\r\n        }\r\n    })\r\n\r\n    const [the_data, setThe_data] = useState([])\r\n    const [max, setMax] = useState(0)\r\n\r\n    \r\n    useEffect(() => {\r\n        setThe_data(() => [])\r\n\r\n        const d = Object.keys(tactics).map((e) => {\r\n            return {\r\n                \"tactic\": e,\r\n                \"Blundered\": tactics[e].filter((obj) => obj.class === \"blunders\").length || null,\r\n                \"Missed\": tactics[e].filter((obj) => obj.class === \"missed\").length || null,\r\n                \"Got\": tactics[e].filter((obj) => obj.class === \"got\").length || null\r\n            }\r\n        })\r\n        d.sort((a, b) => {\r\n            const result =  ((b.Blundered || 0) + (b.Missed || 0) + (b.Got || 0)) - ((a.Blundered || 0) + (a.Missed || 0) + (a.Got || 0))\r\n            // console.log(result)\r\n            return result\r\n        })\r\n        // console.log(d)\r\n\r\n        setMax(() => d[0].Blundered + d[0].Missed + d[0].Got)\r\n        setThe_data(() => d)\r\n\r\n    }, [])\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics by Category\r\n            </text>\r\n        )\r\n    } \r\n\r\n    return (\r\n        <Bar\r\n            data={\r\n                the_data.filter(obj => ((obj.Blundered || 0) + (obj.Missed || 0) + (obj.Got || 0) !== 0))\r\n            }\r\n            keys={['Blundered','Missed', 'Got']}\r\n            indexBy=\"tactic\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 50, right: 130, bottom: 80, left: 60 }}\r\n            // groupMode=\"grouped\"\r\n            axisLeft={{\r\n                tickValues: 5,\r\n                legend: 'Count',\r\n                legendPosition: 'middle',\r\n                legendOffset: -30,\r\n            }}\r\n            axisBottom={{\r\n                tickSize: 8,\r\n                tickPadding: 5,\r\n                tickRotation: -20,\r\n                legend: 'Tactic',\r\n                legendPosition: 'middle',\r\n                legendOffset: 70\r\n            }}\r\n            labelSkipHeight={10}\r\n            padding={0.25}\r\n            enableGridX\r\n            layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Barchart_Tactics","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Charts\\Tactics\\Barchart_TacticsPhases.js",["259","260","261"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../../State/store'\r\nimport { ResponsiveBar, Bar } from '@nivo/bar'\r\n\r\nconst Barchart_TacticsPhases = ({ width, height }) => {\r\n\r\n    const [the_data, setThe_data] = useState([])\r\n    const [the_keys, setKeys] = useState([])\r\n\r\n    const tactics = store((state) => {\r\n        return {\r\n            \"Win the Exchange\":state.winningExchange,\r\n            \"Underdefended Piece\":state.underdefended,\r\n            \"Trapped piece\":state.trapped,\r\n            \"Hanging Piece\":state.hanging,\r\n            \"Relative Pin\":state.relativePin,\r\n            \"Absolute Pin\":state.absolutePin,\r\n            Skewer:state.skewer,\r\n            Fork:state.fork,\r\n            \"Mate\":state.mate,\r\n        }\r\n    })\r\n\r\n    \r\n    useEffect(() => {\r\n        const d = [{phase: \"Opening\"}, {phase: \"Middlegame\"}, {phase: \"Endgame\"}];\r\n        const k = [] \r\n\r\n        Object.keys(tactics).map((e) => {\r\n            const opening = tactics[e].filter((obj) => obj.phase === \"open\").length\r\n            const middle = tactics[e].filter((obj) => obj.phase === \"middle\").length\r\n            const end = tactics[e].filter((obj) => obj.phase === \"end\").length\r\n\r\n            d[0][e] = opening\r\n            d[1][e] = middle\r\n            d[2][e] = end\r\n\r\n            if(opening + middle + end !== 0) k.push(e)\r\n        })\r\n\r\n        // console.log(d)\r\n\r\n        setThe_data(() => d)\r\n        setKeys(() => k)\r\n\r\n    }, [])\r\n\r\n    const Title = ({ width, height }) => {\r\n        // console.log(data)\r\n        const style = {fontWeight: 'bold'}\r\n\r\n        return (\r\n            <text \r\n                x={width / 2}\r\n                y={-10}\r\n                textAnchor=\"middle\"\r\n                style={style}\r\n            >\r\n                Tactics vs. Game Phases\r\n            </text>\r\n        )\r\n    } \r\n    // console.log(the_data)\r\n    return (\r\n        <Bar\r\n            data={\r\n                the_data\r\n            }\r\n            keys={the_keys}\r\n            indexBy=\"phase\"\r\n            width={width}\r\n            height={height}\r\n            margin={{ top: 25, right: 160, bottom: 80, left: 30 }}\r\n            colors={{ scheme: 'set1' }}\r\n            // groupMode=\"grouped\"\r\n            layers={['grid', 'axes', 'bars', 'markers', 'legends', 'annotations',Title]}\r\n            axisBottom={{\r\n                tickSize: 8,\r\n                tickPadding: 5,\r\n                // tickRotation: -20,\r\n                legend: 'Tactic',\r\n                legendPosition: 'middle',\r\n                legendOffset: 50\r\n            }}\r\n            labelSkipHeight={20}\r\n            padding={0.25}\r\n            enableGridX\r\n            legends={[\r\n                {\r\n                    dataFrom: 'keys',\r\n                    anchor: 'bottom-right',\r\n                    direction: 'column',\r\n                    justify: false,\r\n                    translateX: 120,\r\n                    translateY: 0,\r\n                    itemsSpacing: 2,\r\n                    itemWidth: 100,\r\n                    itemHeight: 20,\r\n                    itemDirection: 'left-to-right',\r\n                    itemOpacity: 0.85,\r\n                    symbolSize: 20,\r\n                    effects: [\r\n                        {\r\n                            on: 'hover',\r\n                            style: {\r\n                                itemOpacity: 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Barchart_TacticsPhases","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Tactics.js",["262","263","264"],"import React, {useState, useEffect} from 'react'\r\nimport { store } from \"../State/store\"\r\nimport DataGrid from 'react-data-grid'\r\nimport 'react-data-grid/dist/react-data-grid.css'\r\nimport { DateFromGameSeconds } from '../BusinessLogic/helpers'\r\nimport Table from './Table'\r\n\r\nconst TacticsTable = () => {\r\n\r\n    const [rows, setRows] = useState([])\r\n    const tactics = store((state) => {\r\n        return [\r\n            ...state.winningExchange,\r\n            ...state.underdefended,\r\n            ...state.trapped,\r\n            ...state.hanging,\r\n            ...state.relativePin,\r\n            ...state.absolutePin,\r\n            ...state.skewer,\r\n            ...state.fork,\r\n            ...state.mate,\r\n        ]\r\n    })\r\n\r\n    useEffect(() => {\r\n        // console.log(tactics)\r\n        const t = tactics.map((e, i) => {\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                name: e.type.name,\r\n                phase: e.phase,\r\n                move: Math.ceil(e.ply / 2),\r\n                ply: e.ply,\r\n                timeLeft: e?.timeToThink?.toFixed(1),\r\n                timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                result: e.won ? \"Won\" : \"Lost\",\r\n                eco:e.eco,\r\n                color:e.color,\r\n                opponent: e.opponent,\r\n                class: e.class,\r\n                caps: e.CAPS.toFixed(1)\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table data={rows} />\r\n    )\r\n\r\n}\r\n\r\nexport default TacticsTable","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Game.js",["265"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n    {field: 'blunders', headerName: 'Blunders'},\r\n    {field: 'mistakes', headerName: 'Mistakes'},\r\n    {field: 'inaccuracies', headerName: 'Inaccuracies'}\r\n]\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const Games = store(state => state.Games)\r\n    const Openings = store(state => state.opening)\r\n    const blunders = store(state => state.blunder)\r\n    const mistakes = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        // console.log(Openings)\r\n        const t = Games.map((e, i) => {\r\n            // console.log(Openings.filter(obj => obj.id === e.id))\r\n            return {\r\n                date: e.date.split(\" \")[0],\r\n                gameID: e.id,\r\n                result: e.result === \"win\" ? \"Won\" : \"Lost\",\r\n                opponent: e.opponent,\r\n                color:e.color,\r\n                eco: Openings.filter(obj => obj.id === e.id)?.[0]?.eco,\r\n                caps: e?.CAPS?.toFixed(1),\r\n                blunders: blunders.filter(obj => obj.id === e.id).length,\r\n                mistakes: mistakes.filter(obj => obj.id === e.id).length,\r\n                inaccuracies: inaccuracy.filter(obj => obj.id === e.id).length\r\n            }\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [Games])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\nexport default Table_Game","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table.js",["266"],"import './table.css'\r\nimport { useState } from 'react'\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nexport const renderLink = (params) => {\r\n    // console.log(params);\r\n    return `<a href=\"https://www.chess.com/analysis/game/live/${params.value}\" target=\"_blank\">${params.value}</a>`\r\n}\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'name', filter: true, width: 120},\r\n    {field: 'class',filter: true,},\r\n    {field: 'phase',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'result',filter: true,},\r\n    {field: 'move'},\r\n    {field: 'ply'},\r\n    {field: 'timeLeft', headerName: 'Time Left (s)'},\r\n    {field: 'timeLeftPercent', headerName: 'Time Left (%)'},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n]\r\n\r\nconst defaultCol = {\r\n    sortable: true,\r\n    // floatingFilter: true,\r\n    resizable: true,\r\n    width: 100,\r\n    cellStyle: {\r\n        // border: '1px solid',\r\n        border: 'solid',\r\n        borderTopWidth: '0.5px',\r\n        borderRightWidth: '0.5px',\r\n        borderLeftWidth: '0.5px',\r\n        borderBottomWidth: '0.5px',\r\n        textAlign: \"center\"\r\n    },\r\n    cellClass: \"grid-cell-centered\"\r\n}\r\n\r\n\r\n\r\nconst Table = ({ data, customCol, width = '100%', height = 400, file = \"export.csv\"}) => {\r\n    \r\n    const [gridAPI, setGridAPI] = useState()\r\n\r\n    const gridOptions = {\r\n        defaultColDef: defaultCol,\r\n        // onFirstDataRendered: onFirstDataRendered,\r\n        columnDefs: customCol || columns,\r\n        onGridReady: (params) => setGridAPI(() => params.api)\r\n    }\r\n\r\n    function onBtnExportDataAsCsv(gridAPI, file = \"export.csv\") {\r\n        const params = {\r\n            allColumns: true,\r\n            fileName: file\r\n        }\r\n        gridAPI.exportDataAsCsv(params);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button className=\"export-data\" onClick={() => onBtnExportDataAsCsv(gridAPI, file)}>Export (CSV)</button>\r\n\r\n            <div className=\"ag-theme-balham\" style={{ height: height, maxWidth: width}}>\r\n                <AgGridReact rowData={data} gridOptions={gridOptions}>\r\n                </AgGridReact>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Openings.js",["267","268","269","270"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'won',headerName:\"Won\",},\r\n    {field: 'lost',headerName:\"Lost\",},\r\n    // {field: 'count',headerName:\"Total\",filter: true,},\r\n    {field: 'aveCaps',headerName:\"Average CAPS\", width:108},\r\n    {field: 'blunders',headerName:\"Blunders\",},\r\n    {field: 'mistakes',headerName:\"Mistakes\",},\r\n    {field: 'inaccuracy',headerName:\"Inaccuracies\",},\r\n]\r\nconst Table_Opening = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    const openings = store(state => state.opening)\r\n    const blunder = store(state => state.blunder)\r\n    const mistake = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    // console.log(openings)\r\n\r\n    useEffect(() => {\r\n        // console.log('hi')\r\n        const data = {};\r\n        \r\n        openings.map((e, i) => {\r\n            if(!data[e.eco]) {\r\n                data[e.eco] = {\r\n                    eco: e.eco,\r\n                    count: 1,\r\n                    won: 0,\r\n                    lost: 0,\r\n                    aveCaps: e.caps,\r\n                    blunders: blunder.filter(obj => obj.id === e.id).length,\r\n                    mistakes: mistake.filter(obj => obj.id === e.id).length,\r\n                    inaccuracy: inaccuracy.filter(obj => obj.id === e.id).length\r\n                };\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n            }\r\n            else {\r\n                (e.won) ? data[e.eco].won += 1 : data[e.eco].lost += 1;\r\n                data[e.eco].aveCaps = (data[e.eco].aveCaps * data[e.eco].count + e.caps) / (data[e.eco].count + 1);\r\n                data[e.eco].count += 1;\r\n                data[e.eco].blunders += blunder.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].mistakes += mistake.filter(obj => obj.id === e.id).length;\r\n                data[e.eco].inaccuracy += inaccuracy.filter(obj => obj.id === e.id).length;\r\n            }\r\n        })\r\n        \r\n        Object.keys(data).map(e => {\r\n            data[e].aveCaps = data[e].aveCaps.toFixed(1)\r\n        })\r\n        setRows(() => Object.values(data))\r\n        // console.log(data)\r\n        // console.log(Object.values(data))\r\n    }, [openings])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} width={720} />\r\n    )\r\n}\r\n\r\nexport default Table_Opening","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Tables\\Table_Move.js",["271","272","273","274"],"import React, { useState, useEffect } from 'react'\r\nimport { store } from '../State/store'\r\nimport Table, { renderLink } from './Table'\r\n\r\nconst columns = [    \r\n    {field: 'date'},\r\n    {field: 'gameID', cellRenderer: renderLink},\r\n    {field: 'type'},\r\n    {field: 'phase', filter: 'Phase'},\r\n    {field: 'move', filter: 'Move'},\r\n    {field: 'ply', filter: 'Move'},\r\n    {field: 'timeLeft', filter: 'Time Left (s)'},\r\n    {field: 'timeLeftPercent', filter: 'Time Left (%)'},\r\n    {field: 'fen', width: 190},\r\n    {field: 'result',filter: true,},\r\n    {field: 'opponent',filter: true,},\r\n    {field: 'color',filter: true,},\r\n    {field: 'eco',headerName:\"ECO\",filter: true,},\r\n    {field: 'caps', headerName:\"CAPS Score\"},\r\n]\r\n\r\nconst Table_Game = () => {\r\n    const [rows, setRows] = useState([])\r\n\r\n    // const Games = store(state => state.Games)\r\n    const blunders = store(state => state.blunder)\r\n    const mistakes = store(state => state.mistake)\r\n    const inaccuracy = store(state => state.inaccuracy)\r\n\r\n    useEffect(() => {\r\n        console.log(blunders)\r\n        const t = []\r\n\r\n        blunders.map(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Blunder',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        mistakes.map(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Mistake',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        inaccuracy.map(e => {\r\n            t.push(\r\n                {\r\n                    date: e.date.split(\" \")[0],\r\n                    type: 'Inaccuracy',\r\n                    fen: e.fen,\r\n                    phase: e.phase,\r\n                    move: Math.ceil(e.ply / 2),\r\n                    ply: e.ply,\r\n                    timeLeft: e?.timeToThink?.toFixed(1),\r\n                    timeLeftPercent: e?.timeToThinkPercent?.toFixed(1),\r\n                    gameID: e.id,\r\n                    result: e.won ? \"Won\" : \"Lost\",\r\n                    eco:e.eco,\r\n                    color:e.color,\r\n                    opponent: e.opponent,\r\n                    caps: e.CAPS.toFixed(1)\r\n                }\r\n            )\r\n        })\r\n\r\n        setRows(() => t)\r\n    }, [])\r\n\r\n    return (\r\n        <Table customCol={columns} data={rows} />\r\n    )\r\n}\r\n\r\nexport default Table_Game\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//     console.log(tactics)\r\n//     const t = tactics.map((e, i) => {\r\n//         return {\r\n//             date: e.date.split(\" \")[0],\r\n//             name: e.type.name,\r\n//             phase: e.phase,\r\n//             move: Math.ceil(e.ply / 2),\r\n//             ply: e.ply,\r\n//             timeLeft: e.timeToThink.toFixed(1),\r\n//             timeLeftPercent: e.timeToThinkPercent.toFixed(1),\r\n//             gameID: e.id,\r\n//             result: e.won ? \"Won\" : \"Lost\",\r\n//             eco:e.eco,\r\n//             color:e.color,\r\n//             opponent: e.opponent,\r\n//             class: e.class,\r\n//             caps: e.CAPS.toFixed(1)\r\n//         }\r\n//     })\r\n\r\n//     setRows(() => t)\r\n// }, [])","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartContainer.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Chart.js",["275","276","277","278","279","280","281","282","283","284","285","286","287","288"],"import React from 'react'\r\nimport AutoSizer from 'react-virtualized-auto-sizer'\r\nimport Game_Pie_Loss from '../Charts/Game/Pie_Loss'\r\nimport Game_Pie_Results from '../Charts/Game/Pie_Results'\r\nimport Game_Scatter_CAPS from '../Charts/Game/Scatter_CAPS'\r\nimport Game_Histogram_CAPS from '../Charts/Game/Histogram_CAPS'\r\nimport Move_Histogram_Ply from '../Charts/Moves/Histogram_MovePly'\r\nimport Move_Histogram_Time from '../Charts/Moves/Histogram_MoveTime'\r\nimport Opening_Data from '../Charts/Opening/opening'\r\nimport Tactics_Barchart from '../Charts/Tactics/Barchart_Tactics'\r\nimport Tactics_Barchart_Phases from '../Charts/Tactics/Barchart_TacticsPhases'\r\n\r\n/*\r\n    1. game_pie_loss, game_pie_results, game_scatter_caps, game_histogram_caps, \r\n    move_histogram_ply, move_histogram_time, opening_data_barchart, opening_data_sunburst, \r\n    tactics_barchart, tactics_barchart_phases\r\n*/\r\n\r\nconst Chart = ({ chart }) => {\r\n    const styles = {width: '100%'}\r\n\r\n    // console.log(chartObj[chart])\r\n    return (\r\n        <div className=\"main-chart\">\r\n            <AutoSizer style={styles}>\r\n                {\r\n                    ({height, width}) => {\r\n                        if(chart === \"game_pie_loss\") return <Game_Pie_Loss width={width} height={height} />;\r\n                        if(chart === \"game_pie_results\") return <Game_Pie_Results width={width} height={height} />\r\n                        if(chart === \"game_scatter_caps\") return <Game_Scatter_CAPS width={width} height={height} />\r\n                        if(chart === \"game_histogram_caps\") return <Game_Histogram_CAPS width={width} height={height} />\r\n                        if(chart === \"move_histogram_ply_blunder\") return <Move_Histogram_Ply width={width} height={height} type=\"blunder\" x=\"percent\"/>\r\n                        if(chart === \"move_histogram_ply_mistake\") return <Move_Histogram_Ply width={width} height={height} type=\"mistake\" x=\"percent\"/>\r\n                        if(chart === \"move_histogram_ply_inaccuracy\") return <Move_Histogram_Ply width={width} height={height} type=\"inaccuracy\" x=\"percent\"/>\r\n                        if(chart === \"move_histogram_time_blunder\") return <Move_Histogram_Time width={width} height={height} type=\"blunder\"/>\r\n                        if(chart === \"move_histogram_time_mistake\") return <Move_Histogram_Time width={width} height={height} type=\"mistake\"/>\r\n                        if(chart === \"move_histogram_time_inaccuracy\") return <Move_Histogram_Time width={width} height={height} type=\"inaccuracy\"/>\r\n                        if(chart === \"opening_data_barchart\") return <Opening_Data width={width} height={height} type=\"barchart\"  />\r\n                        if(chart === \"opening_data_sunburst\") return <Opening_Data width={width} height={height} type=\"sunburst\"  />\r\n                        if(chart === \"tactics_barchart\") return <Tactics_Barchart width={width} height={height} />\r\n                        if(chart === \"tactics_barchart_phases\") return <Tactics_Barchart_Phases width={width} height={height} />\r\n\r\n                        return null\r\n                    }\r\n                }\r\n             </AutoSizer> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartSidebar.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\ChartTabs.js",[],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\components\\Table.js",["289","290","291","292"],"import React from 'react';\r\nimport Table_Game from '../Tables/Table_Game'\r\nimport Table_Move from '../Tables/Table_Move'\r\nimport Table_Openings from '../Tables/Table_Openings'\r\nimport Table_Tactics from '../Tables/Table_Tactics'\r\n\r\nconst TableComponent = ({ chart }) => {\r\n    const type = chart.split(\"_\")[0].toLowerCase();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"table-list-label\">Corresponding Data</h3>\r\n            { \r\n                (type === \"game\") ? <Table_Game /> :\r\n                (type === \"move\") ? <Table_Move /> :\r\n                (type === \"opening\") ? <Table_Openings /> :\r\n                (type === \"tactics\") ? <Table_Tactics /> : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TableComponent;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\UsernameForm.js",["293"],"import React, { useState } from 'react';\r\nimport { CreateURL, GetURL } from '../BusinessLogic/helpers';\r\nimport { UserProfileURL } from '../BusinessLogic/urls';\r\nimport Portal from '../Portal'\r\nimport { store } from '../State/store'\r\nimport { ChesscomMembership } from '../BusinessLogic/urls'\r\n\r\nconst UsernameForm = ({ setPage }) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [valid, setValid] = useState(null)\r\n    const [premium, setPremium] = useState(null)\r\n\r\n    const resetValidation = () => {\r\n        setValid(null);\r\n        setPremium(null);\r\n    }\r\n\r\n    const handleKeyPress = (e) => {\r\n        setValid(null);\r\n        setPremium(null);\r\n\r\n        if(e.keyCode === 32) {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n    const handleSetUsername = (e) => {\r\n        if (e.target.value.includes(\" \")) {\r\n            const data = e.target.value.replace(/\\s/g, \"\");\r\n            setUsername(data)    \r\n        }\r\n        setUsername(e.target.value)\r\n    }\r\n\r\n    const validateUsername = async (username) => {\r\n        let v = false; // v for valid\r\n\r\n        const data = await GetURL(CreateURL(UserProfileURL, username))\r\n                .then((res) => {\r\n                    if(res.data.player_id) {\r\n                        v = true\r\n                    }\r\n                    return res.data;\r\n                })\r\n                .catch(err => console.warn(err));\r\n\r\n        if(data?.status === \"premium\") {\r\n            console.log(\"premium: \", true)\r\n            setPremium(true)\r\n        }\r\n        else if(v === true) {\r\n            setPremium(false)\r\n        }\r\n\r\n        setValid(v)\r\n\r\n        console.log(false)\r\n        return false;\r\n    }\r\n\r\n    const chooseBackgroundColor = (premium, valid) => {\r\n        console.log(premium, valid)\r\n        if(premium === true) {\r\n            return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n        }\r\n        else if(premium === false || valid === false) {\r\n            return {backgroundColor: \"#e03131\"}\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"username-form\">\r\n            <p className=\"username-form-instructions\" style={chooseBackgroundColor(premium, valid)}>{\r\n                (premium === true) ? `Hello ${username}! Click to proceed` :\r\n                (premium === false) ? `Only premium Chess.com members allowed.` :\r\n                (valid === false) ? `That is not a valid username. Please try again` : \"Please Enter Your Chess.com Username\"\r\n            }</p>\r\n            { (premium === false) ?\r\n                <p className=\"form-message\">\r\n                    Sadly you must be a premium member (<span title=\"The Vision Dashboard aggregates and analyzes the data that Chess.com stores from the analysis of your games. However, Chess.com only saves the analysis of premium members.\">Why?</span>). Never fear! You can start a <b>free trial</b> and renew for as low as $2.42/month.\r\n                </p> : null\r\n            }\r\n            {(premium !== true && premium !== false && valid !== false) ?\r\n                [<input \r\n                    onChange={handleSetUsername} \r\n                    onKeyDown={e => handleKeyPress(e)}\r\n                    value={username}\r\n                    placeholder=\"Chess.com username\" \r\n                    type=\"text\"\r\n                    className=\"username-form-input\"\r\n                />] : null\r\n            }\r\n\r\n            <UsernameFormButtons \r\n                username={username}\r\n                resetValidation={resetValidation}\r\n                validateUsername={validateUsername}\r\n                setPage={setPage}\r\n                premium={premium} \r\n                valid={valid}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UsernameFormButtons = ({ setPage, username, resetValidation, validateUsername, premium, valid  }) => {\r\n    const setUsername = store(state => state.setUsername)\r\n    const username_zustand = store(state => state.UserName)\r\n\r\n    const nextPage = (u) => {\r\n        setPage(page => page + 1)\r\n        console.log(username_zustand)\r\n        setUsername(u)\r\n        console.log(username_zustand)\r\n    }\r\n\r\n    return (\r\n        <div className=\"username-form-buttons\">\r\n            {\r\n                (valid === false || premium === false) ? \r\n                    [<button onClick={() => resetValidation()} className=\"grey-button\">Retry</button>] : null\r\n            }\r\n            {\r\n                (valid === null && premium === null) ?\r\n                [<button onClick={() => validateUsername(username)} className=\"orange-button\">Validate</button>] : null\r\n            }\r\n            {\r\n                (valid === true && premium === false) ? \r\n                [<button onClick={() => window.open(ChesscomMembership, '_blank')} className=\"green-button\">Free Trial</button>] : null\r\n            }\r\n            {\r\n                (premium === true) ? <button onClick={() => nextPage(username)} className=\"orange-button\">Proceed</button> : null\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsernameForm;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\usePortal.js",["294","295","296"],"import React, { useRef, useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\n/**\r\n * Creates DOM element to be used as React root.\r\n * @returns {HTMLElement}\r\n */\r\nconst createRootElement = (id) => {\r\n    const rootContainer = document.createElement(\"div\");\r\n    rootContainer.setAttribute(\"id\", id);\r\n    return rootContainer;\r\n};\r\n\r\n/**\r\n * Appends element as last child of body.\r\n * @param {HTMLElement} rootElem\r\n */\r\nconst addRootElement = (rootElem) => {\r\n    document.body.insertBefore(\r\n        rootElem,\r\n        document.body.lastElementChild.nextElementSibling\r\n    );\r\n};\r\n\r\n/**\r\n * Hook to create a React Portal.\r\n * Automatically handles creating and tearing-down the root elements (no SRR\r\n * makes this trivial), so there is no need to ensure the parent target already\r\n * exists.\r\n * @example\r\n * const target = usePortal(id, [id]);\r\n * return createPortal(children, target);\r\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\r\n * @returns {HTMLElement} The DOM node to use as the Portal target.\r\n */\r\nfunction usePortal(rootRefID, modalID = 'modal') {\r\n    const rootElemRef = useRef(null);\r\n\r\n    useEffect(function setupElement() {\r\n        // Look for existing target dom element to append to\r\n        const existingParent = document.getElementById(modalID);\r\n        // Parent is either a new root or the existing dom element\r\n        const parentElem = existingParent || createRootElement(modalID);\r\n\r\n        // If there is no existing DOM element, add a new one.\r\n        if (!existingParent) {\r\n            addRootElement(parentElem);\r\n        }\r\n\r\n        // Add the detached element to the parent\r\n        parentElem.appendChild(rootElemRef.current);\r\n\r\n        return function removeElement() {\r\n            rootElemRef.current.remove();\r\n            if (parentElem.childNodes.length === -1) {\r\n                parentElem.remove();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    /**\r\n    *  It's important we evaluate this lazily:\r\n    * - We need first render to contain the DOM element, so it shouldn't happen\r\n    *   in useEffect. We would normally put this in the constructor().\r\n    * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\r\n    *   since this will run every single render (that's a lot).\r\n    * - We want the ref to consistently point to the same DOM element and only\r\n    *   ever run once.\r\n    * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\r\n    */\r\n    function getRootElem() {\r\n        if (rootElemRef.current === null) {\r\n            console.log(rootElemRef, \"created div\")\r\n            rootElemRef.current = document.createElement(\"div\");\r\n            rootElemRef.current.setAttribute(\"class\", rootRefID);\r\n\r\n        }\r\n        return rootElemRef.current;\r\n    }\r\n\r\n    return getRootElem();\r\n}\r\n\r\nexport default usePortal;\r\n","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\Portal.js",["297"],"import React from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport usePortal from './usePortal'\r\n\r\nconst Portal = ({ rootRefID, children }) => {\r\n    console.log(rootRefID)\r\n    const target = usePortal(rootRefID)\r\n    // const target = document.getElementById(id)\r\n    return createPortal(\r\n        children,\r\n        target\r\n    )\r\n}\r\n\r\nexport default Portal","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\Card.js",["298","299"],"C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\ChesscomLogin.js",["300","301","302","303","304","305","306","307"],"import React, { useState } from 'react';\r\nimport { CreateURL, GetURL } from '../BusinessLogic/helpers';\r\nimport { UserProfileURL } from '../BusinessLogic/urls';\r\nimport Portal from '../Portal'\r\nimport { ChesscomMembership, ChesscomLoginURL, CorsProxy } from '../BusinessLogic/urls'\r\n\r\nconst chooseBackgroundColor = (loggedIn) => {\r\n    if(loggedIn === true) {\r\n        return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n    }\r\n    else if(loggedIn === false) {\r\n        return {backgroundColor: \"#e03131\"}\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst ChesscomLogin = ({ setPage }) => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(null)\r\n\r\n    const resetValidation = () => {\r\n        setLoggedIn(null);\r\n    }\r\n\r\n\r\n    return (\r\n            <div className=\"username-form\">\r\n                <p className=\"chesscom-login-instructions\" style={chooseBackgroundColor(loggedIn)}>{\r\n                    (loggedIn === true) ? `Click to proceed.` :\r\n                    \"Click below and log into Chess.com.\"\r\n                }</p>\r\n                <p className=\"form-content\">\r\n                    <span title=\"Chess Intellect does NOT request any passwords. You must log in because Chess.com only lets logged-in members request new game analyses be created.\">Why? </span>\r\n                    <span title=\"You must be logged into Chess.com on the SAME browser window as the current Chessintellect.com tab. Don't login on a different browser window. Either open a new tab or click the button below to login.\"> Help!</span>\r\n                </p>\r\n                <p className=\"form-message\">\r\n                    You must sign in to Chess.com in the <b>same</b> browser window but a different tab. You must check this manually. You're good to go if you click the button below and are already logged in to your account. Otherwise, please login.\r\n                </p>\r\n                \r\n                <div className=\"username-form-buttons\">\r\n                    <button onClick={() => setPage(page => page - 1)} className=\"grey-button\">Back</button>\r\n                    {loggedIn === true ? <button onClick={() => setPage(page => page + 1)} className=\"orange-button\">Proceed</button> :\r\n                        [<button onClick={() => { setLoggedIn(true); window.open(ChesscomLoginURL, '_blank');}} className=\"orange-button\">Log In</button>]\r\n                    }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nconst testLoggedIn = async () => {\r\n    const loggedIn = false;\r\n\r\n    await GetURL(CorsProxy + 'https://www.chess.com/analysis/game/live/5687380484?tab=report')\r\n          .then(res => {\r\n              if(res.data.includes(\"Upgrade to Save\") || res.data.includes(\"locked-message\")) {\r\n                  loggedIn = false;\r\n              }\r\n              else if(res.data.includes(\"Key Moments\") || res.data.includes(\"Saved Analysis\")) {\r\n                  loggedIn = true\r\n              }\r\n              console.log(res.data)\r\n          }).catch(err => {\r\n              console.warn(err)\r\n          })\r\n\r\n    return loggedIn;\r\n}\r\n\r\n\r\nexport default ChesscomLogin;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\TermsForm.js",["308","309","310","311","312","313","314"],"import React, { useState, useEffect } from 'react';\r\nimport { CreateURL, GetURL } from '../BusinessLogic/helpers';\r\nimport { UserProfileURL } from '../BusinessLogic/urls';\r\nimport Portal from '../Portal'\r\nimport { ChesscomMembership, ChesscomLoginURL, CorsProxy } from '../BusinessLogic/urls'\r\nimport { initializeState } from \"../BusinessLogic/Initialize\";\r\nimport { store } from '../State/store'\r\n\r\nconst chooseBackgroundColor = (agreed) => {\r\n    if(agreed === true) {\r\n        return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst TermsForm = ({ setPage }) => {\r\n\r\n    const [agreed, setAgreed] = useState(false)\r\n    const [button1, setButton1] = useState(false)\r\n    const [button2, setButton2] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log(\"in here\", button1, button2)\r\n        if(button1 === true && button2 === true) {\r\n            console.log(\"in double here\")\r\n            setAgreed(true)\r\n        }\r\n        else {\r\n            setAgreed(false)\r\n        }\r\n    }, [button1, button2])\r\n\r\n    console.log(\"agreed: \", agreed)\r\n    return (\r\n            <div className=\"username-form\">\r\n                <p className=\"username-form-instructions\" style={chooseBackgroundColor(agreed)}>{\r\n                    (agreed !== true) ? `Please agree to the Terms & Conditions.` :\r\n                    \"Start the analysis! Allow 5-10 minutes per 100 games.\"\r\n                }</p>\r\n                { agreed !== true ?\r\n                    <div className=\"terms-conditions\">\r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"access\" checked={button1} onChange={() => setButton1(prev => !prev)} />\r\n                            <label for=\"access\">You allow Chess Intellect access to your Chess.com games and analysis reports.</label>\r\n                        </div>\r\n                        <div>\r\n                            <input id=\"gameAnalysis\" type=\"checkbox\" checked={button2} onChange={() => setButton2(prev => !prev)} ></input>\r\n                            <label for=\"gameAnalysis\">If a game isn't previously analyzed, you want Chess Intellect to request that Chess.com analyzes that game on your behalf.</label>\r\n                        </div>\r\n                    </div> : null\r\n                }\r\n                \r\n                \r\n                {(agreed === true) ?\r\n                    <p className=\"form-message\">\r\n                        We recommend you close all background programs/tabs to speed up the analysis. Chess Intellect may open a lot of windows - please do <b>NOT</b> close them manually. Thank you for using Game Report Pro! Please share your feedback :).\r\n                    </p> : null\r\n                }\r\n                \r\n                <div className=\"username-form-buttons\">\r\n                    <button onClick={() => setPage(page => page - 1)} className=\"grey-button\">Back</button>\r\n                    {agreed === true ? <button onClick={() => {store.getState().setLoadingFalse(); initializeState();}} className=\"orange-button\">Proceed</button> : null  }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default TermsForm;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\PopupBlocker.js",["315","316","317","318"],"import React, { useState, useEffect} from 'react';\r\n\r\nconst chooseBackgroundColor = (popupBlocker, testing) => {\r\n    if(testing === true) {\r\n        return {backgroundColor:\"#0091F7\"}\r\n    }\r\n    else if(popupBlocker === false) {\r\n        return {backgroundColor: \"rgb(98, 169, 78)\"}\r\n    }\r\n    else if(popupBlocker === true) {\r\n        return {backgroundColor: \"#e03131\"}\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n\r\nconst PopupBlockerForm = ({ setPage, popupBlocker, testPopup, timesTested, testing }) => {\r\n\r\n    console.log(testing)\r\n    // const [popupBlocker, setPopupBlocker] = useState(null)\r\n    // const [testing, setTesting] = useState(false)\r\n\r\n    return (\r\n            <div className=\"username-form\">\r\n                <p className=\"chesscom-login-instructions\" style={chooseBackgroundColor(popupBlocker, testing)}>{\r\n                    (testing === true) ? `Testing ...` :\r\n                    (popupBlocker === false) ? `You might be good to go :)` :\r\n                    \"Please allow popups for this site.\"\r\n                }</p>\r\n\r\n                { (timesTested === 0) ?\r\n                    <p className=\"form-message\">\r\n                        <label>Why?</label>\r\n                        To analyze your games, Chess Intellect will need to open different tabs. Your popup blocker will think these are \"ads\" and block them, thus preventing the analysis. \r\n                        <label>How?</label>These tutorials might be helpful: <a href=\"https://www.wikihow.com/Allow-Pop–ups\" target='_blank'>WikiHow</a> and&nbsp;\r\n                        <a href=\"https://support.lesley.edu/support/solutions/articles/4000009686-allowing-pop-ups-for-specific-sites\" target=\"_blank\">Lesley's IT Support</a>.\r\n                        Click on the button below to test but it's <strong>not</strong> a 100% guarantee everything is working correctly. You might see a message like \"One popup blocked.\" Please click it and select \"Allow popups from chessintellect.com\".\r\n                    </p> :\r\n                    <p className=\"form-message\">\r\n                        Your popup blocker might be disabled, but it's nearly impossible to programmatically check \r\n                        (especially if you're using Chrome). Feel free to continue! \r\n                        Come back to this step if the service doesn't work.\r\n                    </p>\r\n                }\r\n                \r\n                <div className=\"username-form-buttons\">\r\n                    <button onClick={() => setPage(page => page - 1)} className=\"grey-button\">Back</button>\r\n                    <button onClick={() => testPopup(e => e + 1)} className=\"orange-button\">Test If Blocking</button>\r\n                    {(popupBlocker === false || timesTested > 0) ? <button onClick={() => setPage(page => page + 1)} className=\"orange-button\">Proceed</button> :\r\n                        []\r\n                    }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default PopupBlockerForm;","C:\\Users\\Merlin\\Documents\\Coding\\ChessIntellect\\chess-dashboard\\src\\LoadingForms\\AnalysisProgress.js",["319","320"],{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":26},{"ruleId":"325","severity":1,"message":"329","line":1,"column":28,"nodeType":"327","messageId":"328","endLine":1,"endColumn":36},{"ruleId":"325","severity":1,"message":"330","line":15,"column":10,"nodeType":"327","messageId":"328","endLine":15,"endColumn":17},{"ruleId":"331","severity":1,"message":"332","line":103,"column":12,"nodeType":"333","messageId":"334","endLine":130,"endColumn":7},{"ruleId":"335","severity":1,"message":"336","line":35,"column":3,"nodeType":"337","messageId":"338","endLine":38,"endColumn":4},{"ruleId":"335","severity":1,"message":"336","line":66,"column":3,"nodeType":"337","messageId":"338","endLine":71,"endColumn":4},{"ruleId":"335","severity":1,"message":"336","line":124,"column":3,"nodeType":"337","messageId":"338","endLine":127,"endColumn":4},{"ruleId":"325","severity":1,"message":"339","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":15},{"ruleId":"321","replacedBy":"340"},{"ruleId":"323","replacedBy":"341"},{"ruleId":"325","severity":1,"message":"342","line":1,"column":23,"nodeType":"327","messageId":"328","endLine":1,"endColumn":28},{"ruleId":"325","severity":1,"message":"343","line":1,"column":30,"nodeType":"327","messageId":"328","endLine":1,"endColumn":40},{"ruleId":"325","severity":1,"message":"339","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":15},{"ruleId":"325","severity":1,"message":"344","line":9,"column":5,"nodeType":"327","messageId":"328","endLine":9,"endColumn":20},{"ruleId":"335","severity":1,"message":"336","line":25,"column":9,"nodeType":"337","messageId":"338","endLine":29,"endColumn":10},{"ruleId":"335","severity":1,"message":"336","line":15,"column":9,"nodeType":"337","messageId":"338","endLine":19,"endColumn":10},{"ruleId":"335","severity":1,"message":"336","line":48,"column":25,"nodeType":"337","messageId":"338","endLine":51,"endColumn":26},{"ruleId":"335","severity":1,"message":"336","line":87,"column":9,"nodeType":"337","messageId":"338","endLine":91,"endColumn":10},{"ruleId":"345","severity":1,"message":"346","line":115,"column":9,"nodeType":"347","messageId":"348","endLine":115,"endColumn":27},{"ruleId":"335","severity":1,"message":"336","line":116,"column":9,"nodeType":"337","messageId":"338","endLine":120,"endColumn":10},{"ruleId":"345","severity":1,"message":"346","line":134,"column":8,"nodeType":"347","messageId":"348","endLine":134,"endColumn":19},{"ruleId":"335","severity":1,"message":"336","line":135,"column":9,"nodeType":"337","messageId":"338","endLine":138,"endColumn":10},{"ruleId":"345","severity":1,"message":"346","line":160,"column":8,"nodeType":"347","messageId":"348","endLine":160,"endColumn":19},{"ruleId":"345","severity":1,"message":"346","line":160,"column":23,"nodeType":"347","messageId":"348","endLine":160,"endColumn":36},{"ruleId":"335","severity":1,"message":"336","line":161,"column":9,"nodeType":"337","messageId":"338","endLine":165,"endColumn":10},{"ruleId":"335","severity":1,"message":"336","line":167,"column":9,"nodeType":"337","messageId":"338","endLine":171,"endColumn":10},{"ruleId":"345","severity":1,"message":"346","line":211,"column":8,"nodeType":"347","messageId":"348","endLine":211,"endColumn":21},{"ruleId":"335","severity":1,"message":"336","line":212,"column":9,"nodeType":"337","messageId":"338","endLine":216,"endColumn":10},{"ruleId":"349","severity":1,"message":"350","line":38,"column":19,"nodeType":"347","messageId":"351","endLine":38,"endColumn":21},{"ruleId":"335","severity":1,"message":"336","line":70,"column":9,"nodeType":"337","messageId":"338","endLine":73,"endColumn":10},{"ruleId":"352","severity":1,"message":"353","line":22,"column":83,"nodeType":"333","messageId":"354","endLine":22,"endColumn":85},{"ruleId":"352","severity":1,"message":"353","line":40,"column":83,"nodeType":"333","messageId":"354","endLine":40,"endColumn":85},{"ruleId":"355","severity":1,"message":"356","line":68,"column":17,"nodeType":"357","endLine":68,"endColumn":91},{"ruleId":"355","severity":1,"message":"358","line":73,"column":17,"nodeType":"357","endLine":73,"endColumn":96},{"ruleId":"325","severity":1,"message":"359","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":28},{"ruleId":"325","severity":1,"message":"360","line":53,"column":7,"nodeType":"327","messageId":"328","endLine":53,"endColumn":20},{"ruleId":"352","severity":1,"message":"353","line":29,"column":23,"nodeType":"333","messageId":"354","endLine":29,"endColumn":25},{"ruleId":"352","severity":1,"message":"353","line":41,"column":23,"nodeType":"333","messageId":"354","endLine":41,"endColumn":25},{"ruleId":"352","severity":1,"message":"353","line":55,"column":23,"nodeType":"333","messageId":"354","endLine":55,"endColumn":25},{"ruleId":"361","severity":1,"message":"362","line":68,"column":7,"nodeType":"363","endLine":68,"endColumn":9,"suggestions":"364"},{"ruleId":"365","severity":1,"message":"366","line":72,"column":13,"nodeType":"367","endLine":72,"endColumn":38},{"ruleId":"365","severity":1,"message":"366","line":76,"column":13,"nodeType":"367","endLine":76,"endColumn":38},{"ruleId":"361","severity":1,"message":"368","line":37,"column":8,"nodeType":"363","endLine":37,"endColumn":14,"suggestions":"369"},{"ruleId":"325","severity":1,"message":"370","line":2,"column":11,"nodeType":"327","messageId":"328","endLine":2,"endColumn":32},{"ruleId":"371","severity":1,"message":"372","line":73,"column":1,"nodeType":"373","messageId":"374","endLine":83,"endColumn":4},{"ruleId":"325","severity":1,"message":"375","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":23},{"ruleId":"325","severity":1,"message":"376","line":22,"column":12,"nodeType":"327","messageId":"328","endLine":22,"endColumn":15},{"ruleId":"361","severity":1,"message":"377","line":46,"column":8,"nodeType":"363","endLine":46,"endColumn":10,"suggestions":"378"},{"ruleId":"325","severity":1,"message":"375","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":23},{"ruleId":"352","severity":1,"message":"353","line":29,"column":38,"nodeType":"333","messageId":"354","endLine":29,"endColumn":40},{"ruleId":"361","severity":1,"message":"377","line":46,"column":8,"nodeType":"363","endLine":46,"endColumn":10,"suggestions":"379"},{"ruleId":"325","severity":1,"message":"380","line":3,"column":8,"nodeType":"327","messageId":"328","endLine":3,"endColumn":16},{"ruleId":"325","severity":1,"message":"381","line":5,"column":10,"nodeType":"327","messageId":"328","endLine":5,"endColumn":29},{"ruleId":"361","severity":1,"message":"377","line":47,"column":8,"nodeType":"363","endLine":47,"endColumn":10,"suggestions":"382"},{"ruleId":"361","severity":1,"message":"383","line":45,"column":8,"nodeType":"363","endLine":45,"endColumn":15,"suggestions":"384"},{"ruleId":"325","severity":1,"message":"385","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":22},{"ruleId":"325","severity":1,"message":"386","line":3,"column":17,"nodeType":"327","messageId":"328","endLine":3,"endColumn":27},{"ruleId":"352","severity":1,"message":"353","line":29,"column":29,"nodeType":"333","messageId":"354","endLine":29,"endColumn":31},{"ruleId":"352","severity":1,"message":"353","line":53,"column":33,"nodeType":"333","messageId":"354","endLine":53,"endColumn":35},{"ruleId":"361","severity":1,"message":"387","line":59,"column":8,"nodeType":"363","endLine":59,"endColumn":18,"suggestions":"388"},{"ruleId":"352","severity":1,"message":"353","line":34,"column":24,"nodeType":"333","messageId":"354","endLine":34,"endColumn":26},{"ruleId":"352","severity":1,"message":"353","line":55,"column":24,"nodeType":"333","messageId":"354","endLine":55,"endColumn":26},{"ruleId":"352","severity":1,"message":"353","line":76,"column":26,"nodeType":"333","messageId":"354","endLine":76,"endColumn":28},{"ruleId":"361","severity":1,"message":"389","line":98,"column":8,"nodeType":"363","endLine":98,"endColumn":10,"suggestions":"390"},{"ruleId":"355","severity":1,"message":"391","line":28,"column":62,"nodeType":"357","endLine":28,"endColumn":109},{"ruleId":"355","severity":1,"message":"392","line":29,"column":65,"nodeType":"357","endLine":29,"endColumn":115},{"ruleId":"355","severity":1,"message":"393","line":30,"column":66,"nodeType":"357","endLine":30,"endColumn":117},{"ruleId":"355","severity":1,"message":"394","line":31,"column":68,"nodeType":"357","endLine":31,"endColumn":121},{"ruleId":"355","severity":1,"message":"395","line":32,"column":75,"nodeType":"357","endLine":32,"endColumn":153},{"ruleId":"355","severity":1,"message":"395","line":33,"column":75,"nodeType":"357","endLine":33,"endColumn":153},{"ruleId":"355","severity":1,"message":"395","line":34,"column":78,"nodeType":"357","endLine":34,"endColumn":159},{"ruleId":"355","severity":1,"message":"396","line":35,"column":76,"nodeType":"357","endLine":35,"endColumn":143},{"ruleId":"355","severity":1,"message":"396","line":36,"column":76,"nodeType":"357","endLine":36,"endColumn":143},{"ruleId":"355","severity":1,"message":"396","line":37,"column":79,"nodeType":"357","endLine":37,"endColumn":149},{"ruleId":"355","severity":1,"message":"397","line":38,"column":70,"nodeType":"357","endLine":38,"endColumn":133},{"ruleId":"355","severity":1,"message":"397","line":39,"column":70,"nodeType":"357","endLine":39,"endColumn":133},{"ruleId":"355","severity":1,"message":"398","line":40,"column":65,"nodeType":"357","endLine":40,"endColumn":115},{"ruleId":"355","severity":1,"message":"399","line":41,"column":72,"nodeType":"357","endLine":41,"endColumn":129},{"ruleId":"355","severity":1,"message":"400","line":14,"column":37,"nodeType":"357","endLine":14,"endColumn":51},{"ruleId":"355","severity":1,"message":"401","line":15,"column":37,"nodeType":"357","endLine":15,"endColumn":51},{"ruleId":"355","severity":1,"message":"402","line":16,"column":40,"nodeType":"357","endLine":16,"endColumn":58},{"ruleId":"355","severity":1,"message":"403","line":17,"column":40,"nodeType":"357","endLine":17,"endColumn":57},{"ruleId":"325","severity":1,"message":"404","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":14},{"ruleId":"325","severity":1,"message":"405","line":1,"column":8,"nodeType":"327","messageId":"328","endLine":1,"endColumn":13},{"ruleId":"325","severity":1,"message":"406","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":22},{"ruleId":"361","severity":1,"message":"407","line":59,"column":8,"nodeType":"363","endLine":59,"endColumn":10,"suggestions":"408"},{"ruleId":"325","severity":1,"message":"405","line":1,"column":8,"nodeType":"327","messageId":"328","endLine":1,"endColumn":13},{"ruleId":"361","severity":1,"message":"409","line":17,"column":15,"nodeType":"333","endLine":27,"endColumn":6},{"ruleId":"349","severity":1,"message":"410","line":121,"column":44,"nodeType":"347","messageId":"351","endLine":121,"endColumn":46},{"ruleId":"325","severity":1,"message":"411","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":19},{"ruleId":"325","severity":1,"message":"412","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":24},{"ruleId":"325","severity":1,"message":"404","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":14},{"ruleId":"325","severity":1,"message":"413","line":5,"column":10,"nodeType":"327","messageId":"328","endLine":5,"endColumn":28},{"ruleId":"325","severity":1,"message":"414","line":22,"column":11,"nodeType":"327","messageId":"328","endLine":22,"endColumn":26},{"ruleId":"325","severity":1,"message":"415","line":51,"column":7,"nodeType":"327","messageId":"328","endLine":51,"endColumn":19},{"ruleId":"416","severity":1,"message":"417","line":57,"column":19,"nodeType":"327","messageId":"418","endLine":57,"endColumn":27},{"ruleId":"416","severity":1,"message":"417","line":60,"column":19,"nodeType":"327","messageId":"418","endLine":60,"endColumn":27},{"ruleId":"325","severity":1,"message":"411","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":19},{"ruleId":"325","severity":1,"message":"419","line":2,"column":21,"nodeType":"327","messageId":"328","endLine":2,"endColumn":27},{"ruleId":"325","severity":1,"message":"412","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":24},{"ruleId":"325","severity":1,"message":"404","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":14},{"ruleId":"325","severity":1,"message":"413","line":5,"column":10,"nodeType":"327","messageId":"328","endLine":5,"endColumn":28},{"ruleId":"325","severity":1,"message":"420","line":5,"column":30,"nodeType":"327","messageId":"328","endLine":5,"endColumn":46},{"ruleId":"325","severity":1,"message":"421","line":5,"column":48,"nodeType":"327","messageId":"328","endLine":5,"endColumn":57},{"ruleId":"325","severity":1,"message":"329","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"326","line":1,"column":27,"nodeType":"327","messageId":"328","endLine":1,"endColumn":36},{"ruleId":"422","severity":1,"message":"423","line":36,"column":126,"nodeType":"367","endLine":36,"endColumn":141},{"ruleId":"422","severity":1,"message":"423","line":37,"column":136,"nodeType":"367","endLine":37,"endColumn":151},{"ruleId":"361","severity":1,"message":"424","line":45,"column":8,"nodeType":"363","endLine":45,"endColumn":42,"suggestions":"425"},{"ruleId":"361","severity":1,"message":"426","line":81,"column":8,"nodeType":"363","endLine":81,"endColumn":21,"suggestions":"427"},"no-native-reassign",["428"],"no-negated-in-lhs",["429"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Analyze' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'games', 'games', 'gamenum', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'games', 'gamenum'.","ArrowFunctionExpression","unsafeRefs","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'store' is defined but never used.",["428"],["429"],"'phase' is defined but never used.","'plyPercent' is defined but never used.","'AnalyzeEndgames' is defined but never used.","use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","react/jsx-pascal-case","Imported JSX component Sunburst_ECO must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Barchart_Openings must be in PascalCase or SCREAMING_SNAKE_CASE","'ResponsiveSunburst' is defined but never used.","'customPalette' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'black', 'max', and 'white'. Either include them or remove the dependency array.","ArrayExpression",["430"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'defaultState'. Either include it or remove the dependency array.",["431"],"'ResponsiveScatterPlot' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'ResponsiveBar' is defined but never used.","'max' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tactics'. Either include it or remove the dependency array.",["432"],["433"],"'DataGrid' is defined but never used.","'DateFromGameSeconds' is defined but never used.",["434"],"React Hook useEffect has missing dependencies: 'Openings', 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["435"],"'AgGridColumn' is defined but never used.","'renderLink' is defined but never used.","React Hook useEffect has missing dependencies: 'blunder', 'inaccuracy', and 'mistake'. Either include them or remove the dependency array.",["436"],"React Hook useEffect has missing dependencies: 'blunders', 'inaccuracy', and 'mistakes'. Either include them or remove the dependency array.",["437"],"Imported JSX component Game_Pie_Loss must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Game_Pie_Results must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Game_Scatter_CAPS must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Game_Histogram_CAPS must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Move_Histogram_Ply must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Move_Histogram_Time must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Opening_Data must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Tactics_Barchart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Tactics_Barchart_Phases must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Game must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Move must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Openings must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Table_Tactics must be in PascalCase or SCREAMING_SNAKE_CASE","'Portal' is defined but never used.","'React' is defined but never used.","'createPortal' is defined but never used.","React Hook useEffect has a missing dependency: 'modalID'. Either include it or remove the dependency array.",["438"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","Expected '===' and instead saw '=='.","'CreateURL' is defined but never used.","'UserProfileURL' is defined but never used.","'ChesscomMembership' is defined but never used.","'resetValidation' is assigned a value but never used.","'testLoggedIn' is assigned a value but never used.","no-const-assign","'loggedIn' is constant.","const","'GetURL' is defined but never used.","'ChesscomLoginURL' is defined but never used.","'CorsProxy' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","React Hook useEffect has a missing dependency: 'maxGames'. Either include it or remove the dependency array.",["439"],"React Hook useEffect has a missing dependency: 'logs'. Either include it or remove the dependency array.",["440"],"no-global-assign","no-unsafe-negation",{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"445","fix":"447"},{"desc":"445","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},"Update the dependencies array to be: [black, max, white]",{"range":"461","text":"462"},"Update the dependencies array to be: [data, defaultState]",{"range":"463","text":"464"},"Update the dependencies array to be: [tactics]",{"range":"465","text":"466"},{"range":"467","text":"466"},{"range":"468","text":"466"},"Update the dependencies array to be: [Games, Openings, blunders, inaccuracy, mistakes]",{"range":"469","text":"470"},"Update the dependencies array to be: [blunder, inaccuracy, mistake, openings]",{"range":"471","text":"472"},"Update the dependencies array to be: [blunders, inaccuracy, mistakes]",{"range":"473","text":"474"},"Update the dependencies array to be: [modalID]",{"range":"475","text":"476"},"Update the dependencies array to be: [receivedGameData, failedGameData, maxGames]",{"range":"477","text":"478"},"Update the dependencies array to be: [logs, logs.length]",{"range":"479","text":"480"},[2203,2205],"[black, max, white]",[1150,1156],"[data, defaultState]",[1604,1606],"[tactics]",[1458,1460],[1471,1473],[1749,1756],"[Games, Openings, blunders, inaccuracy, mistakes]",[2377,2387],"[blunder, inaccuracy, mistake, openings]",[3329,3331],"[blunders, inaccuracy, mistakes]",[1946,1948],"[modalID]",[1347,1381],"[receivedGameData, failedGameData, maxGames]",[2496,2509],"[logs, logs.length]"]